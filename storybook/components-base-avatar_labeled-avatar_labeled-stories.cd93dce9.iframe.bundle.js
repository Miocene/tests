"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[3912],{"./src/components/base/avatar_labeled/avatar_labeled.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithBadges:()=>WithBadges,WithDefaultSlot:()=>WithDefaultSlot,WithInlineLabels:()=>WithInlineLabels,WithLinks:()=>WithLinks,WithTooltip:()=>WithTooltip,default:()=>avatar_labeled_stories});var vue_esm=__webpack_require__("./node_modules/vue/dist/vue.esm.js"),badge=__webpack_require__("./src/components/base/badge/badge.vue"),button_button=__webpack_require__("./src/components/base/button/button.vue"),icon=__webpack_require__("./src/components/base/icon/icon.vue"),tooltip=__webpack_require__("./node_modules/bootstrap-vue/esm/directives/tooltip/tooltip.js"),constants=__webpack_require__("./src/utils/constants.js"),avatar=__webpack_require__("./static/img/avatar.png"),avatar_labeled=__webpack_require__("./src/components/base/avatar_labeled/avatar_labeled.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}vue_esm.default.directive("gl-tooltip",tooltip.o);var components={GlAvatarLabeled:avatar_labeled.default},generateProps=function(){var{label="GitLab User",subLabel="@gitlab",size=32,shape="circle",src=avatar,inlineLabels=!1,labelLink}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{label,subLabel,size,shape,src,inlineLabels,labelLink}},Default=(args,_ref)=>{var{argTypes}=_ref;return{components,props:Object.keys(argTypes),template:'\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n      />\n    '}};Default.args=generateProps();var WithInlineLabels=(args,_ref2)=>{var{argTypes}=_ref2;return{components,props:Object.keys(argTypes),template:'\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n        :inline-labels="inlineLabels"\n      />\n    '}};WithInlineLabels.args=generateProps({inlineLabels:!0});var WithTooltip=(args,_ref3)=>{var{argTypes}=_ref3;return{components,props:Object.keys(argTypes),template:'\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n        :title="tooltipText"\n        v-gl-tooltip="{ placement }"\n      />\n    '}};WithTooltip.args=_objectSpread(_objectSpread({},generateProps()),function(){var{tooltipText="Avatar tooltip",placement="top"}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{tooltipText,placement}}()),WithTooltip.argTypes={placement:{options:constants.a,control:"select"}};var WithBadges=(args,_ref4)=>{var{argTypes}=_ref4;return{components:{GlAvatarLabeled:avatar_labeled.default,GlBadge:badge.default},props:Object.keys(argTypes),template:'\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n      >\n        <template #meta>\n          <div class="gl-p-1">\n            <gl-badge class="gl-display-flex!" size="sm" variant="info">2FA</gl-badge>\n          </div>\n          <div class="gl-p-1">\n            <gl-badge class="gl-display-flex!" size="sm" variant="danger">Blocked</gl-badge>\n          </div>\n        </template>\n      </gl-avatar-labeled>\n    '}};WithBadges.args=generateProps();var WithDefaultSlot=(args,_ref5)=>{var{argTypes}=_ref5;return{components:{GlAvatarLabeled:avatar_labeled.default,GlButton:button_button.default},props:Object.keys(argTypes),template:'\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n      >\n        <template>\n          <gl-button class="gl-mt-3 gl-align-self-start" size="small">Follow</gl-button>\n        </template>\n      </gl-avatar-labeled>\n    '}};WithDefaultSlot.args=generateProps({size:64});var WithLinks=(args,_ref6)=>{var{argTypes}=_ref6;return{components:{GlAvatarLabeled:avatar_labeled.default,GlBadge:badge.default,GlIcon:icon.default},props:Object.keys(argTypes),template:'\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :label-link="labelLink"\n        :src="src"\n        :label="label"\n      >\n        <template #meta>\n          <gl-icon\n            v-gl-tooltip="\'Public - The project can be accessed without any authentication.\'"\n            name="earth"\n            class="gl-text-secondary gl-ml-2"\n          />\n        </template>\n        <div class="gl-max-w-75">\n          <p class="gl-mb-0 gl-mt-2 gl-font-sm">GitLab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more. Self-host GitLab on your own servers, in a container, or on a cloud provider.</p>\n        </div>\n      </gl-avatar-labeled>\n    '}};WithLinks.args=generateProps({size:48,shape:"rect",label:"GitLab.org / GitLab",subLabel:"",labelLink:"https://gitlab.com/gitlab-org/gitlab"});let avatar_labeled_stories={title:"base/avatar/labeled",component:avatar_labeled.default,parameters:{docs:{description:{component:'## Usage\n\nAvatars may also be adjacent to a text alternative, such as a user or project name. In these cases,\na null `alt` text should be used so that they can be ignored by assistive technologies.\n\nUse the `avatar-labeled` component in those scenarios. It will set a null `alt` text by default.\nIt allows to display a `label` and/or a `sub-label` next to the avatar image. It accepts the same\nproperties as the avatar component to modify the avatarâ€™s shape and size.\n\n## Using the component\n\n```js\n<gl-avatar-labeled\n  :shape="shape"\n  :size="size"\n  :src="src"\n  :label="label"\n  :sub-label="subLabel"\n/>\n```\n'}}},argTypes:{size:{options:constants.E4,control:"select"},shape:{options:constants.yV,control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components,\n  props: Object.keys(argTypes),\n  template: `\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n      />\n    `\n})',...Default.parameters?.docs?.source}}},WithInlineLabels.parameters={...WithInlineLabels.parameters,docs:{...WithInlineLabels.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components,\n  props: Object.keys(argTypes),\n  template: `\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n        :inline-labels="inlineLabels"\n      />\n    `\n})',...WithInlineLabels.parameters?.docs?.source}}},WithTooltip.parameters={...WithTooltip.parameters,docs:{...WithTooltip.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components,\n  props: Object.keys(argTypes),\n  template: `\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n        :title="tooltipText"\n        v-gl-tooltip="{ placement }"\n      />\n    `\n})',...WithTooltip.parameters?.docs?.source}}},WithBadges.parameters={...WithBadges.parameters,docs:{...WithBadges.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlAvatarLabeled,\n    GlBadge\n  },\n  props: Object.keys(argTypes),\n  template: `\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n      >\n        <template #meta>\n          <div class="gl-p-1">\n            <gl-badge class="gl-display-flex!" size="sm" variant="info">2FA</gl-badge>\n          </div>\n          <div class="gl-p-1">\n            <gl-badge class="gl-display-flex!" size="sm" variant="danger">Blocked</gl-badge>\n          </div>\n        </template>\n      </gl-avatar-labeled>\n    `\n})',...WithBadges.parameters?.docs?.source}}},WithDefaultSlot.parameters={...WithDefaultSlot.parameters,docs:{...WithDefaultSlot.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlAvatarLabeled,\n    GlButton\n  },\n  props: Object.keys(argTypes),\n  template: `\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :src="src"\n        :label="label"\n        :sub-label="subLabel"\n      >\n        <template>\n          <gl-button class="gl-mt-3 gl-align-self-start" size="small">Follow</gl-button>\n        </template>\n      </gl-avatar-labeled>\n    `\n})',...WithDefaultSlot.parameters?.docs?.source}}},WithLinks.parameters={...WithLinks.parameters,docs:{...WithLinks.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlAvatarLabeled,\n    GlBadge,\n    GlIcon\n  },\n  props: Object.keys(argTypes),\n  template: `\n      <gl-avatar-labeled\n        :shape="shape"\n        :size="size"\n        :label-link="labelLink"\n        :src="src"\n        :label="label"\n      >\n        <template #meta>\n          <gl-icon\n            v-gl-tooltip="\'Public - The project can be accessed without any authentication.\'"\n            name="earth"\n            class="gl-text-secondary gl-ml-2"\n          />\n        </template>\n        <div class="gl-max-w-75">\n          <p class="gl-mb-0 gl-mt-2 gl-font-sm">GitLab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more. Self-host GitLab on your own servers, in a container, or on a cloud provider.</p>\n        </div>\n      </gl-avatar-labeled>\n    `\n})',...WithLinks.parameters?.docs?.source}}}},"./static/img/avatar.png":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__.p+"0bdb369be89fe90bf186.png"}}]);