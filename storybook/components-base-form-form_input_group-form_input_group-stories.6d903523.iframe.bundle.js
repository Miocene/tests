"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[9414],{"./src/utils/stories_utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>disableControls});var disableControls=function(){var controls=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Object.fromEntries(controls.map(control=>[control,{control:{disable:!0}}]))}},"./src/components/base/form/form_input_group/form_input_group.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,PredefinedOptions:()=>PredefinedOptions,default:()=>form_input_group_stories});var input_group_text=__webpack_require__("./src/components/base/form/input_group_text/input_group_text.vue"),stories_utils=__webpack_require__("./src/utils/stories_utils.js"),form_input_group=__webpack_require__("./src/components/base/form/form_input_group/form_input_group.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var defaultValue=prop=>form_input_group.default.props[prop].default,generateProps=function(){var{prepend="Username",append="Add",readonly=!1,selectOnClick=!1,predefinedOptions=defaultValue("predefinedOptions")(),label="",inputClass=""}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{prepend,append,readonly,selectOnClick,predefinedOptions,label,inputClass}},Template=(args,_ref)=>{var{argTypes}=_ref;return{components:{GlFormInputGroup:form_input_group.default,GlInputGroupText:input_group_text.default},props:Object.keys(argTypes),template:'\n  <gl-form-input-group\n    :readonly="readonly"\n    :select-on-click="selectOnClick"\n    :predefined-options="predefinedOptions"\n    :label="label"\n    :inputClass="inputClass">\n    <template #prepend v-if="prepend">\n      <gl-input-group-text>{{prepend}}</gl-input-group-text>\n    </template>\n    <template #append v-if="append">\n      <gl-input-group-text>{{append}}</gl-input-group-text>\n    </template>\n  </gl-form-input-group>\n'}},Default=Template.bind({});Default.args=generateProps();var PredefinedOptions=Template.bind({});PredefinedOptions.args=generateProps({prepend:"",predefinedOptions:[{name:"Embed",value:"https://embed.com"},{name:"Share",value:"https://share.org"}]});let form_input_group_stories={title:"base/form/form-input-group",component:form_input_group.default,parameters:{bootstrapComponent:"b-form-input",docs:{description:{component:"The `GlFormInputGroup` component allows one to build more advanced text\ninput fields than generic `GlFormInput` when one needs that flexibility.\nBasic usage of the component:\n\n```html\n<div>\n  <gl-form-input-group>\n    <template #prepend>\n      <!-- Content to prepend your text input field -->\n    </template>\n    <template #append>\n      <!-- Content to append your text input field -->\n    </template>\n  </gl-form-input-group>\n</div>\n```\n\nOne can use any other component (custom or `<gl-*>`) in both slots or\nnot to use the slots at all. In the latter, the component will fallback\nto simple `GlFormInput`.\n\n## Predefined options\n\nSometimes custom text input from the user isn't desired. Instead, the\nuser should pick one of the predefined options that will automatically\npopulate the input field. Typically, such cases will also include an\nactionable button (like **Copy**) put into the `append` slot.\n\nTo achieve this effect, the `GlFormInputGroup` component accepts an\narray of options in the form of `predefinedOptions` param. For example:\n\n```javascript\nconst optionValues = [\n  { name: 'Option #1', value: 'Option #1 is selected!' },\n  { name: 'Option #2', value: 'Option #2 is selected!' },\n];\n...\n<gl-form-input-group :predefined-options=\"optionValues\" />\n```\n\nThis will tell `GlFormInputGroup` to render a dropdown in the `prepend`\nslot with all of the supplied options' `name`s. When one of the options\nis selected, the input field is automatically populated with the\noption's `value`. Check the \"Examples\" section below for \"With\npredefined options\" example.\n\n### Pro tips\n\nRead some useful tips below about specific usage of the component.\n\n### Readonly input\n\nOften you want to make sure user doesn't mess up the predefined content\npasted into the input field. In this case, you can set `readonly`\nparam to `true`. You can play with `Readonly` knob on the right.\n\n### Preselect the text to copy\n\nIf you set the `readonly` param on the `GlFormInputGroup` component,\nusers will still be able to manually select the text and copy it.\nHowever, it's more user-friendly to preselect the text for the users if\nthey click anywhere in the input field. This can be achieved by setting\nthe `select-on-click` param to `true`. You can play with\n`Select text on click` knob on the right. Even better, try enabling\n`Readonly`, `Select text on click`, and `Switch to predefined input`\naltogether. And, probably, remove `Prepend text`. Or leave it. It's your\ncall. :)\n"}}},argTypes:_objectSpread(_objectSpread({},(0,stories_utils.W)(["value"])),{},{prepend:{control:"text"},append:{control:"text"},inputClass:{control:"text"},label:{control:"text"}})};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlFormInputGroup,\n    GlInputGroupText\n  },\n  props: Object.keys(argTypes),\n  template\n})",...Default.parameters?.docs?.source}}},PredefinedOptions.parameters={...PredefinedOptions.parameters,docs:{...PredefinedOptions.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlFormInputGroup,\n    GlInputGroupText\n  },\n  props: Object.keys(argTypes),\n  template\n})",...PredefinedOptions.parameters?.docs?.source}}}}}]);