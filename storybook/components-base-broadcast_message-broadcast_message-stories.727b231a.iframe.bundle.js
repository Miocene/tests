"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[9170],{"./src/components/base/broadcast_message/broadcast_message.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,IncreasedSpacing:()=>IncreasedSpacing,Notification:()=>Notification,Stacked:()=>Stacked,default:()=>broadcast_message_stories});var icons=__webpack_require__("./node_modules/@gitlab/svgs/dist/icons.json"),constants=__webpack_require__("./src/utils/constants.js"),broadcast_message=__webpack_require__("./src/components/base/broadcast_message/broadcast_message.vue"),broadcast_message_constants=__webpack_require__("./src/components/base/broadcast_message/constants.js"),template='\n    <gl-broadcast-message\n      :icon-name="iconName"\n      :dismissible="dismissible"\n      :dismiss-label="dismissLabel"\n      :theme="theme"\n      :type="type">\n      {{ text }}\n    </gl-broadcast-message>\n  ',templateWithTheme=theme=>'\n  <gl-broadcast-message\n    :icon-name="iconName"\n    :dismissible="dismissible"\n    :dismiss-label="dismissLabel"\n    theme="'.concat(theme,'"\n    :type="type">\n    {{ text }}\n  </gl-broadcast-message>\n'),defaultValue=prop=>broadcast_message.default.props[prop].default,generateProps=function(){var{text="Tuesday June 12th, at 14:30 UTC we will perform database maintenance that will require up to 1 minute of downtime.",iconName=defaultValue("iconName"),dismissible=defaultValue("dismissible"),dismissLabel=defaultValue("dismissLabel"),theme=defaultValue("theme"),type=defaultValue("type")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{text,iconName,dismissible,dismissLabel,theme,type}},Default=((args,_ref)=>{var{argTypes}=_ref;return{components:{GlBroadcastMessage:broadcast_message.default},props:Object.keys(argTypes),template:"<div>".concat(template,"</div>")}}).bind({});Default.args=generateProps();var Notification=((args,_ref2)=>{var{argTypes}=_ref2;return{components:{GlBroadcastMessage:broadcast_message.default},props:Object.keys(argTypes),template:"<div>".concat(template,"</div>")}}).bind({});Notification.args=generateProps({type:broadcast_message_constants.TYPE_NOTIFICATION});var Stacked=((args,_ref3)=>{var{argTypes}=_ref3;return{components:{GlBroadcastMessage:broadcast_message.default},props:Object.keys(argTypes),template:"<div>".concat(Object.keys(constants.JT).map(templateWithTheme).join(""),"</div>")}}).bind({});Stacked.args=generateProps(),Stacked.tags=["skip-visual-test"];var IncreasedSpacing=(args,_ref4)=>{var{argTypes}=_ref4;return{components:{GlBroadcastMessage:broadcast_message.default},props:Object.keys(argTypes),template:'<div style="--gl-broadcast-message-padding-x: 0.5rem;">'.concat(template,"</div>")}};IncreasedSpacing.args=generateProps();let broadcast_message_stories={title:"base/broadcast message",component:broadcast_message.default,parameters:{docs:{description:{component:'Broadcast messages provide an efficient and prominent way to deliver critical messages at the\ninstance level to all users. For example, a broadcast message can be used when an admin wants to\nannounce that their platform will experience downtime during a specific period.\n\nIn comparison with an alert, broadcast messages are created by an admin and not triggered by the\nsystem.\n\nPlease refer to [Pajamas\' documentation](https://design.gitlab.com/components/broadcast-message)\nfor more information on when to use this component.\n\n## Dismiss a broadcast message\n\nThe `GlBroadcastMessage` component deals with users dismissal the same way `GlAlert` does, meaning\nit does not handle its own visibility but emits a `dismiss` event that the parent component should\nlisten to in order to hide the message. Example:\n\n```html\n<template>\n  ...\n  <gl-broadcast-message v-if="!dismissed" @dismiss="dismissed = true">\n    An important message\n  </gl-broadcast-message>\n  ...\n</template>\n```\n'}}},argTypes:{iconName:{options:icons.ci,control:"select"},theme:{options:Object.keys(constants.JT),control:"select"},type:{options:broadcast_message_constants.TYPE_LIST,control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBroadcastMessage\n  },\n  props: Object.keys(argTypes),\n  template: `<div>${template}</div>`\n})",...Default.parameters?.docs?.source}}},Notification.parameters={...Notification.parameters,docs:{...Notification.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBroadcastMessage\n  },\n  props: Object.keys(argTypes),\n  template: `<div>${template}</div>`\n})",...Notification.parameters?.docs?.source}}},Stacked.parameters={...Stacked.parameters,docs:{...Stacked.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBroadcastMessage\n  },\n  props: Object.keys(argTypes),\n  // eslint-disable-next-line unicorn/no-array-callback-reference\n  template: `<div>${Object.keys(colorThemes).map(templateWithTheme).join('')}</div>`\n})",...Stacked.parameters?.docs?.source}}},IncreasedSpacing.parameters={...IncreasedSpacing.parameters,docs:{...IncreasedSpacing.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBroadcastMessage\n  },\n  props: Object.keys(argTypes),\n  template: `<div style="--gl-broadcast-message-padding-x: 0.5rem;">${template}</div>`\n})',...IncreasedSpacing.parameters?.docs?.source}}}}}]);