"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[3510],{"./src/components/experimental/duo/chat/components/duo_chat_message/duo_chat_message.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ErrorResponse:()=>ErrorResponse,Response:()=>Response,User:()=>User,default:()=>duo_chat_message_stories});var mock_data=__webpack_require__("./src/components/experimental/duo/chat/mock_data.js"),duo_chat_message=__webpack_require__("./src/components/experimental/duo/chat/components/duo_chat_message/duo_chat_message.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var generateProps=function(){var{message=mock_data.MOCK_RESPONSE_MESSAGE}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{message}},Template=(args,_ref)=>{var{argTypes}=_ref;return{components:{GlDuoChatMessage:duo_chat_message.default},props:Object.keys(argTypes),provide:{renderMarkdown:mock_data.renderMarkdown,renderGFM:mock_data.renderGFM},template:'\n    <gl-duo-chat-message :message="message" />\n  '}},User=Template.bind({});User.args=generateProps({message:mock_data.MOCK_USER_PROMPT_MESSAGE});var Response=Template.bind({});Response.args=generateProps({message:mock_data.MOCK_RESPONSE_MESSAGE});var ErrorResponse=Template.bind({});ErrorResponse.args=generateProps({message:_objectSpread(_objectSpread({},mock_data.MOCK_RESPONSE_MESSAGE),{},{errors:["Error: Whatever you see is wrong"]})});let duo_chat_message_stories={title:"experimental/duo/chat/duo-chat-message",component:duo_chat_message.default,parameters:{docs:{description:{component:"The component represents a Duo Chat message.\n\n## Usage\n\n```html\n<gl-duo-chat-message :message=\"message\" />\n```\n\n## Pretty rendering message content\n\nThere are two ways of pretty-rendering a message's content in the component:\n\n- dependency injection, providing functions to convert raw markdown into HTML,\n- sending `contentHtml` prop as part of the `message` property\n\nThe component ships a default markdown renderer based on `marked`. It should produce\nreasonably well-looking results while streaming messages. The implementation can be found\n[here](https://gitlab.com/gitlab-org/gitlab-ui/-/blob/main/src/components/experimental/duo/chat/markdown_renderer.js).\n\n### Injecting functions\n\nTo inject the `renderMarkdown` function, which converts raw markdown into proper HTML,\nthe component relies on [dependency injection, using `provide`/`inject` options](https://docs.gitlab.com/ee/development/fe_guide/vue.html#provide-and-inject).\nThe component expects a reference to a function, converting raw markdown into HTML\nto be _provided_ by a consumer.\n[The example implementation](https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/assets/javascripts/notes/utils.js#L22-24)\n\n### `contentHtml`\n\nThis approach is self-explanatory and is used when raw markdown can be converted to HTML on the server\nbefore the message is returned to the client. Here's an example of a message's structure where markdown\nhas been generated on the server and sent down in the `contentHtml` property:\n\n```javascript\n{\n  content: '_Duo Chat message_ coming from AI',\n  contentHtml: '<p><em>Duo Chat message</em> coming from AI</p>',\n  role: 'assistant',\n  ...\n}\n```\n\n## GitLab Flavored Markdown (GLFM)\n\nIn most cases, it's not enough to just convert raw markdown into HTML. Messages also require the\nmarkup to support [GitLab Flavored Markdown (GLFM)](https://docs.gitlab.com/ee/user/markdown.html).\nFor this, the component relies on another dependency injection (in addition to `renderMarkdown`)\nexpecting a reference to the `renderGFM` function, decorating an HTML element with GLFM to be\n_provided_ by a consumer.\n[The example implementation](https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/assets/javascripts/behaviors/markdown/render_gfm.js#L19-52)\n\n## The underlying use of the `GlDuoUserFeedback` component\n\nThe component integrates the [`GlDuoUserFeedback`](/story/experimental-duo-user-feedback--default)\ncomponent to track user feedback on the AI-generated responses. Note that the `GlDuoChatMessage`\ncomponent renders the default state of `GlDuoUserFeedback` component, not allowing to override\nthe slots in that underlying component.\n\n### Tracking User Feedback for a response\n\nThe component emits the `track-feedback` event, a proxy of the `feedback` event emitted by\nthe `GlDuoUserFeedback` component. Please refer to\n[the documentation on that component](/story/experimental-duo-user-feedback--docs#listening-to-the-feedback-form-submission)\nwhen processing feedback from users.\n"}}},argTypes:{}};User.parameters={...User.parameters,docs:{...User.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlDuoChatMessage\n  },\n  props: Object.keys(argTypes),\n  provide: {\n    renderMarkdown,\n    renderGFM\n  },\n  template: `\n    <gl-duo-chat-message :message="message" />\n  `\n})',...User.parameters?.docs?.source}}},Response.parameters={...Response.parameters,docs:{...Response.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlDuoChatMessage\n  },\n  props: Object.keys(argTypes),\n  provide: {\n    renderMarkdown,\n    renderGFM\n  },\n  template: `\n    <gl-duo-chat-message :message="message" />\n  `\n})',...Response.parameters?.docs?.source}}},ErrorResponse.parameters={...ErrorResponse.parameters,docs:{...ErrorResponse.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlDuoChatMessage\n  },\n  props: Object.keys(argTypes),\n  provide: {\n    renderMarkdown,\n    renderGFM\n  },\n  template: `\n    <gl-duo-chat-message :message="message" />\n  `\n})',...ErrorResponse.parameters?.docs?.source}}}}}]);