"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[2826],{"./src/components/base/form/form_date/form_date.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Disabled:()=>Disabled,DisabledValue:()=>DisabledValue,InvalidDate:()=>InvalidDate,MinMaxDates:()=>MinMaxDates,Readonly:()=>Readonly,Value:()=>Value,default:()=>form_date_stories});var form_group=__webpack_require__("./src/components/base/form/form_group/form_group.vue"),form_date=__webpack_require__("./src/components/base/form/form_date/form_date.vue"),defaultValue=prop=>form_date.default.props[prop].default,generateProps=function(){var{inputId="input-id",labelText="Label",disabled=!1,min="",max="",minInvalidFeedback=defaultValue("minInvalidFeedback"),maxInvalidFeedback=defaultValue("maxInvalidFeedback"),readonly=!1,value=""}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{inputId,labelText,disabled,min,max,minInvalidFeedback,maxInvalidFeedback,readonly,value}},Template=args=>({components:{GlFormDate:form_date.default,GlFormGroup:form_group.default},props:Object.keys(args),watch:{value(newValue){this.localValue=newValue}},data(){return{localValue:this.value}},template:'\n<gl-form-group :label="labelText" :label-for="inputId">\n  <gl-form-date\n    :id="inputId"\n    v-model="localValue"\n    :disabled="disabled"\n    :min="min"\n    :max="max"\n    :min-invalid-feedback="minInvalidFeedback"\n    :max-invalid-feedback="maxInvalidFeedback"\n    :readonly="readonly"\n    :value="value"\n  />\n</gl-form-group>'}),Default=Template.bind({});Default.args=generateProps();var Disabled=Template.bind({});Disabled.args=generateProps({disabled:!0});var DisabledValue=Template.bind({});DisabledValue.args=generateProps({disabled:!0,value:"2020-01-19"});var MinMaxDates=Template.bind({});MinMaxDates.args=generateProps({min:"2020-01-01",max:"2020-01-31",minInvalidFeedback:"Must be after 2020-01-01",maxInvalidFeedback:"Must be before 2020-01-31"});var Readonly=Template.bind({});Readonly.args=generateProps({readonly:!0,value:"2020-01-19"});var Value=Template.bind({});Value.args=generateProps({value:"2020-01-15"});var InvalidDate=Template.bind({});InvalidDate.args=generateProps({min:"2020-01-01",max:"2020-01-31",minInvalidFeedback:"Must be after 2020-01-01",maxInvalidFeedback:"Must be before 2020-01-31",value:"2020-02-02"});let form_date_stories={title:"base/form/form-date",component:form_date.default,parameters:{docs:{description:{component:'`GlFormDate` allows users to choose and input a date using a keyboard by by using\nbrowser implemented calendar controls, where available.\n\n`GlFormDate` extends `<input type="date">` with an `<output>` for audible announcement\nof selected date, in full format, by screen-readers.\n\n## Usage\n\nOn `change` the value is emitted in `YYYY-MM-DD` format.\n\n## Accessibility\n\n`GlFormDate` is a form `<input>` and should have an accessible name using a `<label>`.\n\n`GlFormGroup` can be used to label `GlFormDate`.\n\n```html\n<gl-form-group\n  label="Enter date"\n  label-for="input-id"\n>\n  <gl-form-date\n    id="input-id"\n  />\n</gl-form-group>\n```\n'}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => ({\n  components: {\n    GlFormDate,\n    GlFormGroup\n  },\n  props: Object.keys(args),\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  template\n})",...Default.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"args => ({\n  components: {\n    GlFormDate,\n    GlFormGroup\n  },\n  props: Object.keys(args),\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  template\n})",...Disabled.parameters?.docs?.source}}},DisabledValue.parameters={...DisabledValue.parameters,docs:{...DisabledValue.parameters?.docs,source:{originalSource:"args => ({\n  components: {\n    GlFormDate,\n    GlFormGroup\n  },\n  props: Object.keys(args),\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  template\n})",...DisabledValue.parameters?.docs?.source}}},MinMaxDates.parameters={...MinMaxDates.parameters,docs:{...MinMaxDates.parameters?.docs,source:{originalSource:"args => ({\n  components: {\n    GlFormDate,\n    GlFormGroup\n  },\n  props: Object.keys(args),\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  template\n})",...MinMaxDates.parameters?.docs?.source}}},Readonly.parameters={...Readonly.parameters,docs:{...Readonly.parameters?.docs,source:{originalSource:"args => ({\n  components: {\n    GlFormDate,\n    GlFormGroup\n  },\n  props: Object.keys(args),\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  template\n})",...Readonly.parameters?.docs?.source}}},Value.parameters={...Value.parameters,docs:{...Value.parameters?.docs,source:{originalSource:"args => ({\n  components: {\n    GlFormDate,\n    GlFormGroup\n  },\n  props: Object.keys(args),\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  template\n})",...Value.parameters?.docs?.source}}},InvalidDate.parameters={...InvalidDate.parameters,docs:{...InvalidDate.parameters?.docs,source:{originalSource:"args => ({\n  components: {\n    GlFormDate,\n    GlFormGroup\n  },\n  props: Object.keys(args),\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  template\n})",...InvalidDate.parameters?.docs?.source}}}}}]);