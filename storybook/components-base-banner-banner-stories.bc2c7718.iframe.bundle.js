"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[5006],{"./src/components/base/banner/banner.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Introduction:()=>Introduction,NoImage:()=>NoImage,WithActions:()=>WithActions,default:()=>banner_stories});let empty_service_desk_md_namespaceObject=__webpack_require__.p+"ba85396d1fce6af57980.svg";var button_button=__webpack_require__("./src/components/base/button/button.vue"),constants=__webpack_require__("./src/utils/constants.js"),banner=__webpack_require__("./src/components/base/banner/banner.vue"),generateProps=function(){var{title="Upgrade your plan to activate Service Desk",buttonAttributes={target:"_blank"},buttonText="Upgrade your plan",buttonLink="https://gitlab.com",svgPath=empty_service_desk_md_namespaceObject,variant=banner.default.props.variant.default}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{title,buttonAttributes,buttonText,buttonLink,svgPath,variant}},Template=(args,_ref)=>{var{argTypes}=_ref;return{components:{GlBanner:banner.default},props:Object.keys(argTypes),template:'\n    <gl-banner\n      :title="title"\n      :button-attributes="buttonAttributes"\n      :button-text="buttonText"\n      :button-link="buttonLink"\n      :svg-path="svgPath"\n      :variant="variant"\n    >\n      <p>GitLab Service Desk is a simple way to allow people to create issues in your GitLab instance without needing their own user account. It provides a unique email address for end users to create issues in a project, and replies can be sent either though the GitLab interface or by email. End users will only see the thread though email.</p>\n    </gl-banner>\n'}},Default=Template.bind({});Default.args=generateProps();var NoImage=Template.bind({});NoImage.args=generateProps({svgPath:null});var Introduction=Template.bind({});Introduction.args=generateProps({svgPath:empty_service_desk_md_namespaceObject,variant:constants.P4[1]});var WithActions=(args,_ref2)=>{var{argTypes}=_ref2;return{components:{GlBanner:banner.default,GlButton:button_button.default},props:Object.keys(argTypes),template:'\n    <gl-banner\n      :title="title"\n      :button-attributes="buttonAttributes"\n      :button-text="buttonText"\n      :button-link="buttonLink"\n      :svg-path="svgPath"\n      :variant="variant"\n    >\n      <p>There should be a primary button and a link button below this text.</p>\n      <template #actions>\n        <gl-button class="gl-ml-3" variant="link">Ask again later</gl-button>\n      </template>\n    </gl-banner>'}};WithActions.args=generateProps({title:"Button with actions banner",buttonText:"Primary Button",svgPath:null});let banner_stories={title:"base/banner",component:banner.default,parameters:{docs:{description:{component:"## Dismiss\n\nUsers are able to permanently dismiss banners by default.\nBanners may also be dismissed temporarily, depending on the use case.\n\n### Permanent dismissal\n\nThe dismiss action is always represented by the `Close` icon and anchored\nto the top right of the banner.\n\nBanner dismissal should work as follows:\n\n* Banner dismissal must be associated with the user in the system database.\n  Dismissal must persist, even across version upgrades and clients.\n* Banners do not reappear by default. In rare circumstances, you may present the\n  banner again to a user after some time has passed.\n* Banners should only be shown to users who are logged in.\n\n**Implementation Notes:**\n\n* The dismissal of the banner is achieved using the `UserCallout` model on the backend and the\n  `PersistentUserCallout` JS file on the frontend. If both parameters are implemented correctly, the\n  banner will adhere to the dismissal guidelines above.\n\n### Temporary dismissal\n\nTo introduce temporary dismissal, include a secondary or tertiary button placed alongside\nthe primary action button. Follow the [button](https://design.gitlab.com/components/button#alignment)\nalignment and order guidelines.\n\nTemporary dismissals should work as follows:\n\n* Banners dismissed temporarily will reappear after **7 days**.\n* After a banner is dismissed temporarily, use a [toast](?path=/story/base-toast--default) message\n  to let the user know they will see the banner again in 7 days.\n"}}},argTypes:{variant:{options:constants.P4,control:"select"},svgPath:{control:"text"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBanner\n  },\n  props: Object.keys(argTypes),\n  template\n})",...Default.parameters?.docs?.source}}},NoImage.parameters={...NoImage.parameters,docs:{...NoImage.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBanner\n  },\n  props: Object.keys(argTypes),\n  template\n})",...NoImage.parameters?.docs?.source}}},Introduction.parameters={...Introduction.parameters,docs:{...Introduction.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBanner\n  },\n  props: Object.keys(argTypes),\n  template\n})",...Introduction.parameters?.docs?.source}}},WithActions.parameters={...WithActions.parameters,docs:{...WithActions.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBanner,\n    GlButton\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <gl-banner\n      :title="title"\n      :button-attributes="buttonAttributes"\n      :button-text="buttonText"\n      :button-link="buttonLink"\n      :svg-path="svgPath"\n      :variant="variant"\n    >\n      <p>There should be a primary button and a link button below this text.</p>\n      <template #actions>\n        <gl-button class="gl-ml-3" variant="link">Ask again later</gl-button>\n      </template>\n    </gl-banner>`\n})',...WithActions.parameters?.docs?.source}}}}}]);