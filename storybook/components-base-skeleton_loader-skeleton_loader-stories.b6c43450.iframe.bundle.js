"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[924],{"./src/utils/story_decorators/container.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>makeContainer});var makeContainer=function(style){var tag=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"div";return Story=>({render:h=>h(tag,{style},[h(Story())])})}},"./src/components/base/skeleton_loader/skeleton_loader.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithCustomShapes:()=>WithCustomShapes,default:()=>skeleton_loader_stories});var container=__webpack_require__("./src/utils/story_decorators/container.js"),skeleton_loader=__webpack_require__("./src/components/base/skeleton_loader/skeleton_loader.vue"),defaultValue=prop=>skeleton_loader.default.props[prop].default,generateProps=function(){var{width=defaultValue("width"),height=defaultValue("height"),preserveAspectRatio=defaultValue("preserveAspectRatio"),lines=defaultValue("lines"),equalWidthLines=defaultValue("equalWidthLines")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{width,height,preserveAspectRatio,lines,equalWidthLines}},template=function(){var slotContent=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return'\n    <gl-skeleton-loader\n      :width="width"\n      :height="height"\n      :preserveAspectRatio="preserveAspectRatio"\n      :lines="lines"\n      :equalWidthLines="equalWidthLines"\n    >'.concat(slotContent,"</gl-skeleton-loader>\n")},Default=args=>({components:{GlSkeletonLoader:skeleton_loader.default},props:Object.keys(args),template:template()});Object.assign(Default,{args:generateProps(),parameters:{controls:{include:["width","lines","equalWidthLines"]}}});var WithCustomShapes=args=>({components:{GlSkeletonLoader:skeleton_loader.default},props:Object.keys(args),template:template('\n    <rect width="276" height="16" rx="4" />\n    <rect y="18" width="237" height="16" rx="4" />\n    <rect y="42" width="118" height="16" rx="8" />\n    <rect x="122" y="42" width="130" height="16" rx="8" />\n    <rect y="62" width="106" height="16" rx="8" />\n    <rect x="110" y="62" width="56" height="16" rx="8" />\n    <rect x="256" y="42" width="71" height="16" rx="8" />\n    <rect y="86" width="38" height="16" rx="4" />\n  ')});Object.assign(WithCustomShapes,{args:generateProps({width:327,height:102}),parameters:{controls:{include:["width","height","preserveAspectRatio"]}},decorators:[(0,container.F)({width:"250px"})]});let skeleton_loader_stories={title:"base/skeleton-loader",component:skeleton_loader.default,parameters:{docs:{description:{component:'Skeleton loaders are to be used when pages or sections can be progressively populated with content,\nsuch as text and images, as they become available. Generally speaking the first batch of content\nwill be the lightest to load and is followed by secondary and tertiary content batches. Each loading\nstep will add in more detail to the page until no skeleton loaders are present anymore. Content\nshould replace skeleton objects immediately when the data is available.\n\nThe skeleton loader component accepts shapes which in return will create a skeleton state with a\nloading animation. Any skeleton state components should be created with\n`<gl-skeleton-loader></gl-skeleton-loader>`. If no shape is passed via the slot the default skeleton\nwill be used. See "Default" and "Default With Custom Props" examples.\n\n**NOTE:** Skeleton loaders can also be composed with a `.gl-animate-skeleton-loader`\nCSS class. This CSS-based approach is easier to make responsive and match mocked elements.\nFeel free to use this approach if it suits your use case and please leave your\nfeedback in this [Feedback for css-based skeleton loading\nindicator](https://gitlab.com/gitlab-org/gitlab-ui/-/issues/2319) issue.\nTo improve developer experience and simplify matching Pajamas styles we\'re considering\nseveral improvements in the future, including adding more CSS util classes for\nthis animation, or creating a dedicated component.  Here is an example of how\nyou could replicate the default `<gl-skeleton-loader />` behavior with the\nCSS-based approach:\n\n```html\n<div>\n  <div class="gl-animate-skeleton-loader gl-h-4 gl-rounded-base gl-my-3 gl-max-w-20!"></div>\n  <div class="gl-animate-skeleton-loader gl-h-4 gl-rounded-base gl-my-3 gl-max-w-30!"></div>\n  <div class="gl-animate-skeleton-loader gl-h-4 gl-rounded-base gl-my-3 gl-max-w-26!"></div>\n</div>\n```\n\nSee\n[animation.scss](https://gitlab.com/gitlab-org/gitlab-ui/-/blob/main/src/scss/utility-mixins/animation.scss#L17)\nto learn more.\n\n## Progressive Loading\n\nDetermine if progressive loading is available, if it is break apart the skeleton to load data as it\nbecomes readily available. If progessive loading is not available, replace the entire skeleton when\nthe data is available.\n\n## Under the hood\n\nSkeleton Loader is a port of [vue-content-loader](https://github.com/egoist/vue-content-loader).\nSome changes have been made to the code to better suit our codebase, such as removing props and\nrefactoring into a SFC. Please take a look at their documentation and a useful [UI tool](http://danilowoz.com/create-vue-content-loader/)\nfor seeing the code output for `svg` shapes.\n'}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => ({\n  components: {\n    GlSkeletonLoader\n  },\n  props: Object.keys(args),\n  template: template()\n})",...Default.parameters?.docs?.source}}},WithCustomShapes.parameters={...WithCustomShapes.parameters,docs:{...WithCustomShapes.parameters?.docs,source:{originalSource:'args => ({\n  components: {\n    GlSkeletonLoader\n  },\n  props: Object.keys(args),\n  template: template(`\n    <rect width="276" height="16" rx="4" />\n    <rect y="18" width="237" height="16" rx="4" />\n    <rect y="42" width="118" height="16" rx="8" />\n    <rect x="122" y="42" width="130" height="16" rx="8" />\n    <rect y="62" width="106" height="16" rx="8" />\n    <rect x="110" y="62" width="56" height="16" rx="8" />\n    <rect x="256" y="42" width="71" height="16" rx="8" />\n    <rect y="86" width="38" height="16" rx="4" />\n  `)\n})',...WithCustomShapes.parameters?.docs?.source}}}}}]);