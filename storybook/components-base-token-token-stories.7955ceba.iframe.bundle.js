"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[7943],{"./src/components/base/token/token.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,ViewOnly:()=>ViewOnly,WithAvatar:()=>WithAvatar,default:()=>token_stories});var avatar=__webpack_require__("./src/components/base/avatar/avatar.vue"),constants=__webpack_require__("./src/utils/constants.js"),token=__webpack_require__("./src/components/base/token/token.vue"),defaultValue=prop=>token.default.props[prop].default,generateProps=function(){var{viewOnly=defaultValue("viewOnly"),variant=defaultValue("variant")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{viewOnly,variant}},Template=(args,_ref)=>{var{argTypes}=_ref;return{components:{GlToken:token.default},props:Object.keys(argTypes),template:'\n    <div class="gl-display-flex">\n      <gl-token :variant="variant" :view-only="viewOnly">Token</gl-token>\n    </div>'}},Default=Template.bind({});Default.args=generateProps();var ViewOnly=Template.bind({});ViewOnly.args=generateProps({viewOnly:!0});var WithAvatar=()=>({components:{GlToken:token.default,GlAvatar:avatar.default},template:'\n    <div class="gl-display-flex">\n    <gl-token><gl-avatar src="./img/avatar.png" :size="16" />Token</gl-token>\n    </div>'});let token_stories={title:"base/token",component:token.default,parameters:{docs:{description:{component:"## Usage\n\nTokens are an object that has been created after a user action, like selecting an autocompleted item\nwhile searching. They have a close action in the form of an 'x'.\n\n## Using the component\n\n~~~html\n<gl-token>\n  Token\n</gl-token>\n~~~\n"}}},argTypes:{variant:{options:constants.Xk,control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlToken\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <div class="gl-display-flex">\n      <gl-token :variant="variant" :view-only="viewOnly">Token</gl-token>\n    </div>`\n})',...Default.parameters?.docs?.source}}},ViewOnly.parameters={...ViewOnly.parameters,docs:{...ViewOnly.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlToken\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <div class="gl-display-flex">\n      <gl-token :variant="variant" :view-only="viewOnly">Token</gl-token>\n    </div>`\n})',...ViewOnly.parameters?.docs?.source}}},WithAvatar.parameters={...WithAvatar.parameters,docs:{...WithAvatar.parameters?.docs,source:{originalSource:'() => ({\n  components: {\n    GlToken,\n    GlAvatar\n  },\n  template: `\n    <div class="gl-display-flex">\n    <gl-token><gl-avatar src="./img/avatar.png" :size="16" />Token</gl-token>\n    </div>`\n})',...WithAvatar.parameters?.docs?.source}}}}}]);