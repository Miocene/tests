"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[5466],{"./src/components/base/dropdown/dropdown_item.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Checked:()=>Checked,CheckedWithAvatar:()=>CheckedWithAvatar,CheckedWithSecondaryText:()=>CheckedWithSecondaryText,Default:()=>Default,default:()=>dropdown_item_stories});var icons=__webpack_require__("./node_modules/@gitlab/svgs/dist/icons.json"),constants=__webpack_require__("./src/utils/constants.js"),dropdown_item=__webpack_require__("./src/components/base/dropdown/dropdown_item.vue"),components={GlDropdownItem:dropdown_item.default},wrap=template=>'\n  <ul class="gl-list-style-none gl-pl-0">\n    <gl-dropdown-item\n      :avatar-url="avatarUrl"\n      :icon-color="iconColor"\n      :icon-name="iconName"\n      :icon-right-aria-label="iconRightAriaLabel"\n      :icon-right-name="iconRightName"\n      :is-checked="isChecked"\n      :is-check-item="isCheckItem"\n      :is-check-centered="isCheckCentered"\n      :secondary-text="secondaryText"\n      :disabled="disabled">\n      '.concat(template,"\n    </gl-dropdown-item>\n  </ul>\n"),defaultValue=prop=>dropdown_item.default.props[prop].default,generateProps=function(){var{avatarUrl=defaultValue("avatarUrl"),iconColor=defaultValue("iconColor"),iconName=defaultValue("iconName"),iconRightAriaLabel=defaultValue("iconRightAriaLabel"),iconRightName=defaultValue("iconRightName"),isChecked=defaultValue("isChecked"),isCheckItem=defaultValue("isCheckItem"),isCheckCentered=defaultValue("isCheckCentered"),secondaryText=defaultValue("secondaryText"),disabled=!1}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{avatarUrl,iconColor,iconName,iconRightAriaLabel,iconRightName,isChecked,isCheckItem,isCheckCentered,secondaryText,disabled}},Default=(args,_ref)=>{var{argTypes}=_ref;return{props:Object.keys(argTypes),components,template:wrap("Some item")}};Default.args=generateProps();var Checked=(args,_ref2)=>{var{argTypes}=_ref2;return{props:Object.keys(argTypes),components,template:wrap("Some item")}};Checked.args=generateProps({isChecked:!0,isCheckItem:!0});var CheckedWithAvatar=(args,_ref3)=>{var{argTypes}=_ref3;return{props:Object.keys(argTypes),components,template:wrap("Sid Sijbrandij")}};CheckedWithAvatar.args=generateProps({isChecked:!0,isCheckItem:!0,isCheckCentered:!0,avatarUrl:"./img/avatar.png",secondaryText:"@sytses"});var CheckedWithSecondaryText=(args,_ref4)=>{var{argTypes}=_ref4;return{props:Object.keys(argTypes),components,template:wrap("Some item")}};CheckedWithSecondaryText.args=generateProps({isChecked:!0,isCheckItem:!0,secondaryText:"Lorem ipsum dolar sit amit..."});let dropdown_item_stories={title:"base/dropdown/deprecated/dropdown-item",component:dropdown_item.default,parameters:{bootstrapComponent:"b-dropdown-item",docs:{description:{component:"The dropdown item component is meant to be used for clickable entries inside a dropdown component.\nIf you provide the `href` attribute, it renders a link instead of a button.\n"}}},argTypes:{iconColor:{options:Object.keys(constants.js),control:"select"},iconName:{options:icons.ci,control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap('Some item')\n})",...Default.parameters?.docs?.source}}},Checked.parameters={...Checked.parameters,docs:{...Checked.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap('Some item')\n})",...Checked.parameters?.docs?.source}}},CheckedWithAvatar.parameters={...CheckedWithAvatar.parameters,docs:{...CheckedWithAvatar.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap('Sid Sijbrandij')\n})",...CheckedWithAvatar.parameters?.docs?.source}}},CheckedWithSecondaryText.parameters={...CheckedWithSecondaryText.parameters,docs:{...CheckedWithSecondaryText.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap('Some item')\n})",...CheckedWithSecondaryText.parameters?.docs?.source}}}}}]);