"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[6356],{"./src/components/base/button_group/button_group.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,SplitDropdowns:()=>SplitDropdowns,default:()=>button_group_stories});var button_button=__webpack_require__("./src/components/base/button/button.vue"),disclosure_dropdown=__webpack_require__("./src/components/base/new_dropdowns/disclosure/disclosure_dropdown.vue"),listbox=__webpack_require__("./src/components/base/new_dropdowns/listbox/listbox.vue"),constants=__webpack_require__("./src/utils/constants.js"),button_group=__webpack_require__("./src/components/base/button_group/button_group.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var defaultValue=prop=>button_button.default.props[prop].default,generateProps=function(){var{vertical=!1,category=constants.O7.primary,size=defaultValue("size"),variant="default"}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{vertical,category,size,variant}},Default=((args,_ref)=>{var{argTypes}=_ref;return{components:{GlButton:button_button.default,GlButtonGroup:button_group.default},props:Object.keys(argTypes),template:'\n  <gl-button-group :vertical="vertical">\n    <gl-button :category="category" :size="size" :variant="variant">Button 1</gl-button>\n    <gl-button :category="category" :size="size" :variant="variant">Button 2</gl-button>\n    <gl-button :category="category" :size="size" :variant="variant">Button 3</gl-button>\n  </gl-button-group>'}}).bind({});Default.args=generateProps();var SplitDropdowns=(args,_ref2)=>{var{argTypes}=_ref2;return{components:{GlButton:button_button.default,GlButtonGroup:button_group.default,GlCollapsibleListbox:listbox.default,GlDisclosureDropdown:disclosure_dropdown.default},props:Object.keys(argTypes),data:()=>({firstListboxValue:1,secondListboxValue:1,items:[{text:"One",value:1},{text:"Two",value:2}]}),template:'\n    <div class="gl-display-flex gl-flex-direction-column gl-gap-6 gl-align-items-flex-start">\n      <gl-button-group>\n        <gl-button\n          :disabled="disabled"\n          :category="category"\n          :size="size"\n          :variant="variant"\n        >Split disclosure</gl-button>\n\n        <gl-disclosure-dropdown\n          :disabled="disabled"\n          :items="items"\n          toggle-text="Other actions"\n          text-sr-only\n          :category="category"\n          :size="size"\n          :variant="variant"\n        />\n      </gl-button-group>\n\n      <gl-button-group>\n        <gl-button\n          :disabled="disabled"\n          :category="category"\n          :size="size"\n          :variant="variant"\n        >Split listbox</gl-button>\n\n        <gl-collapsible-listbox\n          v-model="secondListboxValue"\n          :disabled="disabled"\n          :items="items"\n          toggle-text="Choose button action"\n          text-sr-only\n          :category="category"\n          :size="size"\n          :variant="variant"\n        />\n      </gl-button-group>\n    </div>\n  '}};Object.assign(SplitDropdowns,{args:_objectSpread(_objectSpread({},generateProps({variant:"confirm"})),{},{disabled:!1}),parameters:{controls:{include:["category","disabled","size","variant"]}}});let button_group_stories={title:"base/button group",component:button_group.default,parameters:{bootstrapComponent:"b-button-group",docs:{description:{component:'Button groups are an easy way to group a series of buttons together.\n\n## Split dropdowns\n\nBoth `GlCollapsibleListbox` and `GlDisclosureDropdown` can be added as the last\nchild of a button group to produce a "split" dropdown.\n\nFor the correct styling, the dropdown component must render a caret _only_.\nThis means no icon, and no visible text. For accessbility, ensure the\ndropdown\'s `toggle-text` _and_ `text-sr-only` props are set.\n\n```html\n<gl-button-group>\n  <gl-button>Split listbox</gl-button>\n\n  <gl-collapsible-listbox\n    v-model="foo"\n    :items="items"\n    toggle-text="Choose button action"\n    text-sr-only\n  />\n</gl-button-group>\n```\n\n## vue-bootstrap component\n\nThis component uses [`BButtonGroup`](https://bootstrap-vue.org/docs/components/button-group) from vue-bootstrap\ninternally. So please take a look also there at their extensive documentation.\n'}}},argTypes:{category:{options:Object.keys(constants.O7),control:"select"},size:{options:Object.keys(constants.td),control:"select"},variant:{options:Object.keys(constants.b$),control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlButton,\n    GlButtonGroup\n  },\n  props: Object.keys(argTypes),\n  template\n})",...Default.parameters?.docs?.source}}},SplitDropdowns.parameters={...SplitDropdowns.parameters,docs:{...SplitDropdowns.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlButton,\n    GlButtonGroup,\n    GlCollapsibleListbox,\n    GlDisclosureDropdown\n  },\n  props: Object.keys(argTypes),\n  data() {\n    return {\n      firstListboxValue: 1,\n      secondListboxValue: 1,\n      items: [{\n        text: \'One\',\n        value: 1\n      }, {\n        text: \'Two\',\n        value: 2\n      }]\n    };\n  },\n  template: `\n    <div class="gl-display-flex gl-flex-direction-column gl-gap-6 gl-align-items-flex-start">\n      <gl-button-group>\n        <gl-button\n          :disabled="disabled"\n          :category="category"\n          :size="size"\n          :variant="variant"\n        >Split disclosure</gl-button>\n\n        <gl-disclosure-dropdown\n          :disabled="disabled"\n          :items="items"\n          toggle-text="Other actions"\n          text-sr-only\n          :category="category"\n          :size="size"\n          :variant="variant"\n        />\n      </gl-button-group>\n\n      <gl-button-group>\n        <gl-button\n          :disabled="disabled"\n          :category="category"\n          :size="size"\n          :variant="variant"\n        >Split listbox</gl-button>\n\n        <gl-collapsible-listbox\n          v-model="secondListboxValue"\n          :disabled="disabled"\n          :items="items"\n          toggle-text="Choose button action"\n          text-sr-only\n          :category="category"\n          :size="size"\n          :variant="variant"\n        />\n      </gl-button-group>\n    </div>\n  `\n})',...SplitDropdowns.parameters?.docs?.source}}}}}]);