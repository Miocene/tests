"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[1125],{"./src/utils/stories_utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>disableControls});var disableControls=function(){var controls=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Object.fromEntries(controls.map(control=>[control,{control:{disable:!0}}]))}},"./src/components/base/form/form_group/form_group.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Disabled:()=>Disabled,WithLabelDescription:()=>WithLabelDescription,WithTextarea:()=>WithTextarea,WithValidations:()=>WithValidations,default:()=>form_group_stories});var stories_utils=__webpack_require__("./src/utils/stories_utils.js"),form_input=__webpack_require__("./src/components/base/form/form_input/form_input.vue"),form_textarea=__webpack_require__("./src/components/base/form/form_textarea/form_textarea.vue"),form_group=__webpack_require__("./src/components/base/form/form_group/form_group.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var components={GlFormGroup:form_group.default},generateProps=function(){var{id="group-1",label="Label Name",description="form group description",labelDescription="",optional=form_group.default.props.optional.default,optionalText=form_group.default.props.optionalText.default}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{id,label,labelDescription,optional,optionalText,description}},makeBindings=function(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.entries(_objectSpread({":id":"id + '_group'",":label-for":"id",":label":"label",":label-description":"labelDescription",":optional":"optional",":optional-text":"optionalText",":description":"description"},overrides)).map(_ref=>{var[key,value]=_ref;return"".concat(key,'="').concat(value,'"')}).join(" ")},wrap=function(template){var bindingsOverrides=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"\n  <gl-form-group\n    ".concat(makeBindings(bindingsOverrides),"\n    >\n    ").concat(template,"\n  </gl-form-group>\n")},Default=(_args,_ref2)=>{var{argTypes}=_ref2;return{props:Object.keys(argTypes),components:_objectSpread(_objectSpread({},components),{},{GlFormInput:form_input.default}),template:wrap('<gl-form-input :id="id" />')}};Default.args=generateProps();var Disabled=(_args,_ref3)=>{var{argTypes}=_ref3;return{props:Object.keys(argTypes),components:_objectSpread(_objectSpread({},components),{},{GlFormInput:form_input.default}),template:wrap('<gl-form-input :id="id"  type="text" value="Disabled" disabled />')}};Disabled.args=generateProps({description:"This feature is disabled"});var WithTextarea=(_args,_ref4)=>{var{argTypes}=_ref4;return{props:Object.keys(argTypes),components:_objectSpread(_objectSpread({},components),{},{GlFormTextarea:form_textarea.default}),template:wrap('<gl-form-textarea :id="id" placeholder="Enter something" />')}};WithTextarea.args=generateProps({id:"textarea2",optional:!0,description:""});var WithLabelDescription=(_args,_ref5)=>{var{argTypes}=_ref5;return{props:Object.keys(argTypes),components:_objectSpread(_objectSpread({},components),{},{GlFormInput:form_input.default}),template:wrap('<gl-form-input :id="id" />')}};WithLabelDescription.args=generateProps({optional:!0,labelDescription:"form label description"});var WithValidations=(_args,_ref6)=>{var{argTypes}=_ref6;return{props:Object.keys(argTypes),components:_objectSpread(_objectSpread({},components),{},{GlFormInput:form_input.default}),template:"\n    <div>\n    ".concat(wrap('<gl-form-input :id="id + \'-name1\'" :state="false" />',{"invalid-feedback":"This field is required.",":label-for":"id + '-name1'"}),"\n    ").concat(wrap('<gl-form-input :id="id + \'-name2\'" :state="true" value="Sidney Jones" />',{"valid-feedback":"This field is valid.",":id":"'group2'",":label-for":"id + '-name2'"}),"\n    </div>\n  ")}};WithValidations.args=generateProps({label:"Name",description:"Enter a first and last name."});let form_group_stories={title:"base/form/form-group",component:form_group.default,parameters:{bootstrapComponent:"b-form-group",docs:{description:{component:"Form group adds structure to forms.\n"}}},argTypes:_objectSpread(_objectSpread({},(0,stories_utils.W)(["labelClass"])),{},{label:{control:"text"}})};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ...components,\n    GlFormInput\n  },\n  template: wrap('<gl-form-input :id=\"id\" />')\n})",...Default.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ...components,\n    GlFormInput\n  },\n  template: wrap(\'<gl-form-input :id="id"  type="text" value="Disabled" disabled />\')\n})',...Disabled.parameters?.docs?.source}}},WithTextarea.parameters={...WithTextarea.parameters,docs:{...WithTextarea.parameters?.docs,source:{originalSource:'(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ...components,\n    GlFormTextarea\n  },\n  template: wrap(\'<gl-form-textarea :id="id" placeholder="Enter something" />\')\n})',...WithTextarea.parameters?.docs?.source}}},WithLabelDescription.parameters={...WithLabelDescription.parameters,docs:{...WithLabelDescription.parameters?.docs,source:{originalSource:"(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ...components,\n    GlFormInput\n  },\n  template: wrap('<gl-form-input :id=\"id\" />')\n})",...WithLabelDescription.parameters?.docs?.source}}},WithValidations.parameters={...WithValidations.parameters,docs:{...WithValidations.parameters?.docs,source:{originalSource:"(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ...components,\n    GlFormInput\n  },\n  template: `\n    <div>\n    ${wrap('<gl-form-input :id=\"id + \\'-name1\\'\" :state=\"false\" />', {\n    'invalid-feedback': 'This field is required.',\n    ':label-for': \"id + '-name1'\"\n  })}\n    ${wrap('<gl-form-input :id=\"id + \\'-name2\\'\" :state=\"true\" value=\"Sidney Jones\" />', {\n    'valid-feedback': 'This field is valid.',\n    ':id': \"'group2'\",\n    ':label-for': \"id + '-name2'\"\n  })}\n    </div>\n  `\n})",...WithValidations.parameters?.docs?.source}}}}}]);