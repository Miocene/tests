"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[3859],{"./src/components/base/avatars_inline/avatars_inline.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithLinksAndTooltips:()=>WithLinksAndTooltips,default:()=>avatars_inline_stories});var avatar=__webpack_require__("./src/components/base/avatar/avatar.vue"),avatar_link=__webpack_require__("./src/components/base/avatar_link/avatar_link.vue"),tooltip=__webpack_require__("./node_modules/bootstrap-vue/esm/directives/tooltip/tooltip.js"),constants=__webpack_require__("./src/utils/constants.js"),avatars_inline=__webpack_require__("./src/components/base/avatars_inline/avatars_inline.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var defaultAvatars=[{src:"./img/avatar_1.png",alt:"Administrator’s user avatar"},{src:"./img/avatar_2.png",alt:"Ops Manager’s user avatar"},{src:"./img/avatar_3.png",alt:"Developer’s user avatar"},{src:"./img/avatar_4.png",alt:"Business Admin’s user avatar"},{src:"./img/avatar_5.png",alt:"Product designer’s user avatar"}],generateProps=function(){var avatars=arguments.length>0&&void 0!==arguments[0]?arguments[0]:defaultAvatars,{maxVisible=2,collapsed=!0,avatarSize=24,badgeTooltipProp="",badgeSrOnlyText="".concat(avatars.length-maxVisible," additional users")}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return{maxVisible,collapsed,avatarSize,avatars,badgeTooltipProp,badgeSrOnlyText}},Default=(args,_ref)=>{var{argTypes}=_ref;return{components:{GlAvatarsInline:avatars_inline.default},props:Object.keys(argTypes),template:'\n    <gl-avatars-inline :avatars="avatars" :collapsed="collapsed" :avatar-size="avatarSize" :max-visible="maxVisible" :badgeTooltipProp="badgeTooltipProp" :badgeSrOnlyText="badgeSrOnlyText">\n    </gl-avatars-inline>\n    '}};Default.args=generateProps();var WithLinksAndTooltips=(args,_ref2)=>{var{argTypes}=_ref2;return{components:{GlAvatarsInline:avatars_inline.default,GlAvatar:avatar.default,GlAvatarLink:avatar_link.default},directives:{GlTooltip:tooltip.o},props:Object.keys(argTypes),template:'\n    <gl-avatars-inline :avatars="avatars" :collapsed="collapsed" :avatar-size="avatarSize" :max-visible="maxVisible" :badgeTooltipProp="badgeTooltipProp" :badgeSrOnlyText="badgeSrOnlyText">\n      <template #avatar="{ avatar }">\n        <gl-avatar-link target="blank" :href="avatar.href" v-gl-tooltip :title="avatar.tooltip">\n          <gl-avatar :src="avatar.src" :size="avatarSize" />\n        </gl-avatar-link>\n      </template>\n    </gl-avatars-inline>\n    '}};WithLinksAndTooltips.args=generateProps(defaultAvatars.map((avatar,index)=>_objectSpread(_objectSpread({},avatar),{},{href:"//gitlab.com",tooltip:"Avatar ".concat(index)})),{badgeTooltipProp:"tooltip"});let avatars_inline_stories={title:"base/avatar/avatars-inline",component:avatars_inline.default,parameters:{docs:{description:{component:'Use `<avatars-inline />` to display multiple avatars organized in a single row.\n\n### Basic usage\n\nThe `avatars` property accepts an array of objects that contains the avatar properties. By default,\n`<avatars-inline />` expects each object contained in the array to have the same shape as the\nproperties of the `<avatar />` component. You can customize the display of each avatar by\noverriding the default slot:\n\n```html\n<gl-avatars-inline :avatars="avatars">\n  <template #avatar="{ avatar }">\n    <gl-avatar-link v-gl-tooltip target="blank" :href="avatar.href" :title="avatar.tooltip">\n      <gl-avatar :src="avatar.src" :size="32" />\n    </gl-avatar-link>\n  </template>\n</gl-avatars-inline>\n```\n\nIn the example above, the avatars displayed inside `<avatars-inline />` are links pointing to a URL\nstored in each avatar object. Each avatar also displays a tooltip. If you override\n`<inline-avatars />` default display, you can pass an array of objects with any desired shape to\nthe `avatars` property.\n\n### Collapsing\n\nWhen the `collapse` property value is `true` and the `maxVisible` property value is a number less\nthan the length of the `avatars` property array, `<avatars-inline>` will hide the overflown avatars\nand display a badge instead.\n\n### Badge description in screen readers\n\nThe `badgeSrOnlyText` property provides a meaningful description of the badge that appears\nwhen avatars are collapsed for screen reader users.\n\n### Supported sizes\n\n`<avatars-inline>` supports avatars with `16`, `24`, or `32` size.\n'}}},argTypes:{avatarSize:{options:constants.PF,control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlAvatarsInline\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <gl-avatars-inline :avatars="avatars" :collapsed="collapsed" :avatar-size="avatarSize" :max-visible="maxVisible" :badgeTooltipProp="badgeTooltipProp" :badgeSrOnlyText="badgeSrOnlyText">\n    </gl-avatars-inline>\n    `\n})',...Default.parameters?.docs?.source}}},WithLinksAndTooltips.parameters={...WithLinksAndTooltips.parameters,docs:{...WithLinksAndTooltips.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlAvatarsInline,\n    GlAvatar,\n    GlAvatarLink\n  },\n  directives: {\n    GlTooltip: GlTooltipDirective\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <gl-avatars-inline :avatars="avatars" :collapsed="collapsed" :avatar-size="avatarSize" :max-visible="maxVisible" :badgeTooltipProp="badgeTooltipProp" :badgeSrOnlyText="badgeSrOnlyText">\n      <template #avatar="{ avatar }">\n        <gl-avatar-link target="blank" :href="avatar.href" v-gl-tooltip :title="avatar.tooltip">\n          <gl-avatar :src="avatar.src" :size="avatarSize" />\n        </gl-avatar-link>\n      </template>\n    </gl-avatars-inline>\n    `\n})',...WithLinksAndTooltips.parameters?.docs?.source}}}}}]);