"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[7034],{"./src/utils/story_decorators/container.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>makeContainer});var makeContainer=function(style){var tag=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"div";return Story=>({render:h=>h(tag,{style},[h(Story())])})}},"./src/components/base/new_dropdowns/disclosure/disclosure_dropdown.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomGroupsAndItems:()=>CustomGroupsAndItems,CustomGroupsItemsAndToggle:()=>CustomGroupsItemsAndToggle,CustomListItem:()=>CustomListItem,Default:()=>Default,Groups:()=>Groups,InMainWrapper:()=>InMainWrapper,MiscellaneousContent:()=>MiscellaneousContent,default:()=>disclosure_dropdown_stories});var constants=__webpack_require__("./src/utils/constants.js"),badge=__webpack_require__("./src/components/base/badge/badge.vue"),toggle=__webpack_require__("./src/components/base/toggle/toggle.vue"),avatar=__webpack_require__("./src/components/base/avatar/avatar.vue"),modal=__webpack_require__("./src/components/base/modal/modal.vue"),icon=__webpack_require__("./src/components/base/icon/icon.vue"),tooltip=__webpack_require__("./src/components/base/tooltip/tooltip.vue"),container=__webpack_require__("./src/utils/story_decorators/container.js"),disclosure_dropdown=__webpack_require__("./src/components/base/new_dropdowns/disclosure/disclosure_dropdown.vue"),disclosure_dropdown_item=__webpack_require__("./src/components/base/new_dropdowns/disclosure/disclosure_dropdown_item.vue"),disclosure_dropdown_group=__webpack_require__("./src/components/base/new_dropdowns/disclosure/disclosure_dropdown_group.vue"),disclosure_constants=__webpack_require__("./src/components/base/new_dropdowns/disclosure/constants.js"),mock_data=__webpack_require__("./src/components/base/new_dropdowns/disclosure/mock_data.js");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var makeBindings=function(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.entries(_objectSpread({":items":"items",":category":"category",":variant":"variant",":size":"size",":disabled":"disabled",":loading":"loading",":no-caret":"noCaret",":placement":"placement",":toggle-id":"toggleId",":toggle-text":"toggleText",":text-sr-only":"textSrOnly",":icon":"icon",":toggle-aria-labelled-by":"toggleAriaLabelledBy",":list-aria-labelled-by":"listAriaLabelledBy",":block":"block",":fluid-width":"fluidWidth",":auto-close":"autoClose",":positioning-strategy":"positioningStrategy",":start-opened":"startOpened"},overrides)).map(_ref=>{var[key,value]=_ref;return"".concat(key,'="').concat(value,'"')}).join("\n")},template=function(){var content=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",{bindingOverrides={},after=""}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return'\n  <div>\n    <gl-disclosure-dropdown\n      ref="disclosure"\n      '.concat(makeBindings(bindingOverrides),"\n    >\n      ").concat(content,"\n    </gl-disclosure-dropdown>\n    ").concat(after,"\n  </div>\n")},TOGGLE_ID="custom-toggle-id",Default=(args,_ref2)=>{var{argTypes}=_ref2;return{toggleId:TOGGLE_ID,props:Object.keys(argTypes),components:{GlDisclosureDropdown:disclosure_dropdown.default,GlTooltip:tooltip.default},template:"\n    <div>\n      ".concat(template(),'\n      <gl-tooltip :target="$options.toggleId" placement="right">\n        This is a default disclosure\n      </gl-tooltip>\n    </div>\n  ')}};Default.args={items:mock_data.mockItems,icon:"ellipsis_v",noCaret:!0,toggleText:"Disclosure",textSrOnly:!0,toggleId:TOGGLE_ID},Default.decorators=[(0,container.F)({height:"200px"})];var CustomListItem=(args,_ref3)=>{var{argTypes}=_ref3;return{props:Object.keys(argTypes),components:{GlDisclosureDropdown:disclosure_dropdown.default,GlBadge:badge.default},template:template('\n      <template #list-item="{ item }">\n        <span class="gl-display-flex gl-align-items-center gl-justify-content-space-between">\n          {{ item.text }}\n          <gl-badge pill size="sm" variant="neutral">{{ item.count }}</gl-badge>\n        </span>\n      </template>\n    ',{bindingOverrides:{class:"gl-display-block! gl-text-center"}})}};CustomListItem.args={items:mock_data.mockItemsCustomItem,toggleText:"Merge requests",placement:"center"},CustomListItem.decorators=[(0,container.F)({height:"200px"})];var makeGroupedExample=changes=>{var story=(args,_ref4)=>{var{argTypes}=_ref4;return _objectSpread({props:Object.keys(argTypes),components:{GlBadge:badge.default,GlDisclosureDropdown:disclosure_dropdown.default,GlDisclosureDropdownGroup:disclosure_dropdown_group.default,GlDisclosureDropdownItem:disclosure_dropdown_item.default,GlToggle:toggle.default,GlAvatar:avatar.default,GlModal:modal.default,GlIcon:icon.default}},changes)};return story.args={items:mock_data.mockGroups},story.decorators=[(0,container.F)({height:"340px"})],story},Groups=makeGroupedExample({template:template("")});Groups.args={icon:"plus-square",items:mock_data.mockGroups,toggleText:"Create new",textSrOnly:!0};var CustomGroupsAndItems=(args,_ref5)=>{var{argTypes}=_ref5;return{props:Object.keys(argTypes),components:{GlDisclosureDropdown:disclosure_dropdown.default,GlBadge:badge.default},methods:{getTotalMrs:items=>items.reduce((acc,item)=>acc+item.count,0)},template:template('\n      <template #group-label="{ group }">\n        {{ group.name }} <gl-badge pill size="sm" variant="neutral">{{ getTotalMrs(group.items) }}</gl-badge>\n      </template>\n      <template #list-item="{ item }">\n        <span class="gl-display-flex gl-align-items-center gl-justify-content-space-between">\n          {{ item.text }}\n          <gl-badge pill size="sm" variant="neutral">{{ item.count }}</gl-badge>\n        </span>\n      </template>\n    ')}};CustomGroupsAndItems.args={items:mock_data.mockGroupsCustomItem,toggleText:"Merge requests",block:!0},CustomGroupsAndItems.decorators=[(0,container.F)({height:"200px"})];var CustomGroupsItemsAndToggle=makeGroupedExample({template:template('\n      <template #toggle>\n     <button class="gl-rounded-base gl-border-none gl-p-2 gl-bg-gray-50 ">\n        <span class="gl-sr-only">\n          Orange Fox user\'s menu\n        </span>\n        <gl-avatar :size="32" entity-name="Orange Fox" aria-hidden="true"/>\n      </button>\n      </template>\n      <gl-disclosure-dropdown-group>\n        <gl-disclosure-dropdown-item @action="closeDropdown">\n          <template #list-item>\n            <span class="gl-display-flex gl-flex-direction-column">\n              <span class="gl-font-weight-bold gl-white-space-nowrap">Orange Fox</span>\n              <span class="gl-text-gray-600">@thefox</span>\n            </span>\n          </template>\n        </gl-disclosure-dropdown-item>\n      </gl-disclosure-dropdown-group>\n      <gl-disclosure-dropdown-group :bordered="bordered" :border-position="borderPosition" :group="$options.groups[0]" @action="closeDropdown">\n        <template #list-item="{ item }">\n          <span class="gl-display-flex gl-align-items-center gl-justify-content-space-between">\n            {{item.text}}\n            <gl-icon v-if="item.icon" :name="item.icon"/>\n          </span>\n        </template>\n      </gl-disclosure-dropdown-group>\n      <gl-disclosure-dropdown-group :bordered="bordered" :border-position="borderPosition">\n        <template #group-label>\n          <span class="gl-font-sm">Navigation redesign</span>\n          <gl-badge size="sm" variant="info">Beta</gl-badge>\n        </template>\n        <gl-disclosure-dropdown-item @action="toggleNewNavigation">\n          <div  class="gl-new-dropdown-item-content">\n            <div class="gl-new-dropdown-item-text-wrapper">\n              <gl-toggle label="New navigation" label-position="left" :value="newNavigation"/>\n            </div>\n          </div>\n        </gl-disclosure-dropdown-item>\n        <gl-disclosure-dropdown-item @action="toggleModalVisibility(true)">\n          <template #list-item>Provide feedback</template>\n        </gl-disclosure-dropdown-item>\n      </gl-disclosure-dropdown-group>\n      <gl-disclosure-dropdown-group :bordered="bordered" :border-position="borderPosition" :group="$options.groups[1]" @action="closeDropdown"/>\n    ',{after:'\n      <gl-modal :visible="feedBackModalVisible" @change="toggleModalVisibility" modal-id="feedbackModal" size="sm">\n        <textarea class="gl-w-full">Tell us what you think!</textarea>\n      </gl-modal>\n    '}),data:()=>({newNavigation:!0,feedBackModalVisible:!1}),methods:{closeDropdown(){this.$refs.disclosure.closeAndFocus()},toggleModalVisibility(value){this.feedBackModalVisible=value,this.closeDropdown()},toggleNewNavigation(){this.newNavigation=!this.newNavigation,setTimeout(()=>{this.closeDropdown()},500)}},groups:mock_data.mockProfileGroups});CustomGroupsItemsAndToggle.args={icon:"plus-square",toggleText:"User profile menu",textSrOnly:!0,autoClose:!1,bordered:!0,borderPosition:disclosure_constants.DISCLOSURE_DROPDOWN_GROUP_BORDER_POSITIONS.top},CustomGroupsItemsAndToggle.argTypes={borderPosition:{options:disclosure_constants.DISCLOSURE_DROPDOWN_GROUP_BORDER_POSITIONS,control:{type:"select"}}},CustomGroupsItemsAndToggle.decorators=[(0,container.F)({height:"400px"})];var MiscellaneousContent=(args,_ref6)=>{var{argTypes}=_ref6;return{props:Object.keys(argTypes),components:{GlDisclosureDropdown:disclosure_dropdown.default},template:template('\n      <div class="gl-p-3">A disclosure dropdown is a button that toggles a panel containing a list of items and/or links.</div>\n    ')}};MiscellaneousContent.args={icon:"doc-text",toggleText:"Miscellaneous content",textSrOnly:!0,fluidWidth:!0},MiscellaneousContent.decorators=[(0,container.F)({height:"200px"})];let disclosure_dropdown_stories={title:"base/dropdown/disclosure-dropdown",component:disclosure_dropdown.default,parameters:{docs:{description:{component:'A disclosure dropdown is a button that toggles a panel containing a list of actions and/or links. Use\n[this decision tree](https://design.gitlab.com/components/dropdown-overview#which-component-should-you-use)\nto make sure this is the right dropdown component for you.\n\n## Basic usage\n\n```html\n<gl-disclosure-dropdown toggle-text="Actions" :items="items" />\n```\n\n## Icon-only disclosure dropdown\n\nIcon-only disclosure dropdowns must have an accessible name.\nYou can provide this with the combination of `toggleText` and `textSrOnly` props.\n\nOptionally, you can use `no-caret` to remove the caret and `category="tertiary"` to remove the border.\n\n```html\n<gl-disclosure-dropdown\n  icon="ellipsis_v"\n  toggle-text="Actions"\n  text-sr-only\n  category="tertiary"\n  no-caret\n/>\n```\n\n## Opening the disclosure dropdown\n\nDisclosure dropdown will open on toggle button click (if it was previously closed).\nOn open, `GlDisclosureDropdown` will emit the `shown` event.\n\n## Closing the disclosure dropdown\n\nThe disclosure dropdown is closed by any of the following:\n\n- pressing <kbd>Esc</kbd>\n- clicking anywhere outside the component\n- clicking the action or link inside the dropdown\n\nBefore closing, `GlDisclosureDropdown` emits a `beforeClose` event with these properties:\n\n1. `originalEvent` – the event that triggered closing of the dropdown\n2. `preventDefault` – a method which will prevent closing of the dropdown\n\nAn example of using this event to prevent the dropdown from closing:\n\n```html\n<gl-disclosure-dropdown @beforeClose="$event.preventDefault()" />\n```\n\nNote that this method will also prevent the dropdown from closing even if the trigger button is clicked.\n\nYou can use the `preventDefault` to filter out events that are causing undesired dropdown closing:\n\n```html\n<gl-disclosure-dropdown\n  @beforeClose="(e) => { ignoreElement.contains(e.originalEvent.target) && e.preventDefault() }"\n/>\n```\n\nAfter closing, `GlDisclosureDropdown` emits a `hidden` event.\n\n## Setting disclosure dropdown items\n\nUse the `items` prop to provide actions/links to the disclosure dropdown. Each\nitem can be either an item or a group. For `Item`s, provide an `href` or `to` string to\nmake them render as links. Otherwise, they will be buttons. Provide an `action`\nfunction to items to be called when they are pressed, or, listen for the\n`action` event on the top-level component. Both will receive the given item as\nan argument.\nA <!-- markdownlint-disable-next-line line-length -->\n[validation error](https://gitlab.com/gitlab-org/gitlab-ui/-/blob/6cbff4f908b429cc01f17a4cc2868e881db1aa31/src/components/base/new_dropdowns/disclosure/utils.js#L1)\nwill be triggered if neither field is set.\n\nBelow are the expected shapes of these objects:\n\n```typescript\ntype Item = {\n  // The item text\n  text: string;\n  // href link\n  href?: string;\n  // or, a Vue router link with `to`\n  to?: string;\n  // Item action\n  action?: (item: Item) => void;\n  // Set of extra attributes applied directly to the element\n  extraAttrs?: Object;\n  // Additional class/classes applied to the item wrapper\n  wrapperClass?: string;\n};\n\ntype Group = {\n  // Name of the group, used as a header\n  name?: string;\n  // Items of the group\n  items: Array<Item>;\n  // Set of extra attributes applied directly to the element\n  extraAttrs?: Object;\n};\n\ntype ItemsProp = Array<Item> | Array<Group>;\n```\n\n### Actions/links\n\nThe `text` property is used to render the default disclosure dropdown item\ntemplate. If you want to render a custom template for items, use the\n`list-item` scoped slot:\n\n```html\n<gl-disclosure-dropdown :items="items">\n  <template #list-item="{ item }">\n    <span class="gl-display-flex gl-align-items-center gl-justify-content-space-between">\n      {{item.text}}\n      <gl-icon v-if="item.icon" :name="item.icon" />\n    </span>\n  </template>\n</gl-disclosure-dropdown>\n```\n\n### Groups\n\nActions/links can be contained within groups. A group can have a `name`\nproperty, which will be used as the group header if present.\nIt also has a required property `items` that must be an array of links/actions.\n\nGroups can be at most one level deep: a group can only contain actions/links.\nItems and groups _cannot_ be siblings. Either all items are actions/links,\nor they are all groups.\n\nTo render custom group labels, use the `group-label` scoped slot:\n\n```html\n<gl-disclosure-dropdown :items="groups">\n  <template #group-label="{ group }">\n    {{ group.name }} <gl-badge size="sm">{{ group.items.length }}</gl-badge>\n  </template>\n</gl-disclosure-dropdown>\n```\n\nTo draw a horizontal line that separates two groups, set the `bordered` property.\nBy default, the border appears above the group. You can change the border position\nusing the `border-position` property:\n\n```html\n<gl-disclosure-dropdown>\n  <gl-disclosure-dropdown-group bordered border-position="bottom" :group="group" />\n</gl-disclosure-dropdown>\n```\n\n### Miscellaneous content\n\nBesides default components, disclosure dropdown can render miscellaneous content inside it.\nIn this case the user is responsible for handling all events and navigation inside the disclosure.\n\n### Dealing with long option texts\n\n- Some options might have long non-wrapping text that would overflow the dropdown maximum width. In\n  such cases, it\'s recommended to override the `#list-item` slot and to truncate the option text using\n  `GlTruncate`.\n- If the toggle text reflects the selected option text, it might be necessary to truncate\n  it too by overriding the `#toggle` slot.\n\n## Split dropdown\n\nSee [button group documentation](/docs/base-button-group--docs#split-dropdowns).\n'}}},argTypes:{category:{control:{type:"select"},options:constants.O7},variant:{control:{type:"select"},options:constants.b$},size:{control:{type:"select"},options:Object.keys(constants.td)},placement:{control:{type:"select"},options:Object.keys(constants.eY)}},args:{startOpened:!0}};var InMainWrapper=(args,_ref7)=>{var{argTypes}=_ref7;return{toggleId:TOGGLE_ID,props:Object.keys(argTypes),components:{GlDisclosureDropdown:disclosure_dropdown.default,GlTooltip:tooltip.default},template:"\n    <div>\n      ".concat(template(),'\n      <gl-tooltip :target="$options.toggleId" placement="right">\n        Automatic placement to stay inside &lt;main&gt; boundary\n      </gl-tooltip>\n    </div>\n  ')}};InMainWrapper.args={items:mock_data.mockItems,icon:"ellipsis_v",noCaret:!0,toggleText:"Disclosure",textSrOnly:!0,toggleId:TOGGLE_ID},InMainWrapper.decorators=[(0,container.F)({backgroundColor:"#efefef",textAlign:"right",height:"200px"},"main")],Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  toggleId: TOGGLE_ID,\n  props: Object.keys(argTypes),\n  components: {\n    GlDisclosureDropdown,\n    GlTooltip\n  },\n  template: `\n    <div>\n      ${template()}\n      <gl-tooltip :target="$options.toggleId" placement="right">\n        This is a default disclosure\n      </gl-tooltip>\n    </div>\n  `\n})',...Default.parameters?.docs?.source}}},CustomListItem.parameters={...CustomListItem.parameters,docs:{...CustomListItem.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDisclosureDropdown,\n    GlBadge\n  },\n  template: template(`\n      <template #list-item="{ item }">\n        <span class="gl-display-flex gl-align-items-center gl-justify-content-space-between">\n          {{ item.text }}\n          <gl-badge pill size="sm" variant="neutral">{{ item.count }}</gl-badge>\n        </span>\n      </template>\n    `, {\n    bindingOverrides: {\n      class: \'gl-display-block! gl-text-center\'\n    }\n  })\n})',...CustomListItem.parameters?.docs?.source}}},Groups.parameters={...Groups.parameters,docs:{...Groups.parameters?.docs,source:{originalSource:"makeGroupedExample({\n  template: template('')\n})",...Groups.parameters?.docs?.source}}},CustomGroupsAndItems.parameters={...CustomGroupsAndItems.parameters,docs:{...CustomGroupsAndItems.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDisclosureDropdown,\n    GlBadge\n  },\n  methods: {\n    getTotalMrs(items) {\n      return items.reduce((acc, item) => acc + item.count, 0);\n    }\n  },\n  template: template(`\n      <template #group-label="{ group }">\n        {{ group.name }} <gl-badge pill size="sm" variant="neutral">{{ getTotalMrs(group.items) }}</gl-badge>\n      </template>\n      <template #list-item="{ item }">\n        <span class="gl-display-flex gl-align-items-center gl-justify-content-space-between">\n          {{ item.text }}\n          <gl-badge pill size="sm" variant="neutral">{{ item.count }}</gl-badge>\n        </span>\n      </template>\n    `)\n})',...CustomGroupsAndItems.parameters?.docs?.source}}},CustomGroupsItemsAndToggle.parameters={...CustomGroupsItemsAndToggle.parameters,docs:{...CustomGroupsItemsAndToggle.parameters?.docs,source:{originalSource:'makeGroupedExample({\n  template: template(`\n      <template #toggle>\n     <button class="gl-rounded-base gl-border-none gl-p-2 gl-bg-gray-50 ">\n        <span class="gl-sr-only">\n          Orange Fox user\'s menu\n        </span>\n        <gl-avatar :size="32" entity-name="Orange Fox" aria-hidden="true"/>\n      </button>\n      </template>\n      <gl-disclosure-dropdown-group>\n        <gl-disclosure-dropdown-item @action="closeDropdown">\n          <template #list-item>\n            <span class="gl-display-flex gl-flex-direction-column">\n              <span class="gl-font-weight-bold gl-white-space-nowrap">Orange Fox</span>\n              <span class="gl-text-gray-600">@thefox</span>\n            </span>\n          </template>\n        </gl-disclosure-dropdown-item>\n      </gl-disclosure-dropdown-group>\n      <gl-disclosure-dropdown-group :bordered="bordered" :border-position="borderPosition" :group="$options.groups[0]" @action="closeDropdown">\n        <template #list-item="{ item }">\n          <span class="gl-display-flex gl-align-items-center gl-justify-content-space-between">\n            {{item.text}}\n            <gl-icon v-if="item.icon" :name="item.icon"/>\n          </span>\n        </template>\n      </gl-disclosure-dropdown-group>\n      <gl-disclosure-dropdown-group :bordered="bordered" :border-position="borderPosition">\n        <template #group-label>\n          <span class="gl-font-sm">Navigation redesign</span>\n          <gl-badge size="sm" variant="info">Beta</gl-badge>\n        </template>\n        <gl-disclosure-dropdown-item @action="toggleNewNavigation">\n          <div  class="gl-new-dropdown-item-content">\n            <div class="gl-new-dropdown-item-text-wrapper">\n              <gl-toggle label="New navigation" label-position="left" :value="newNavigation"/>\n            </div>\n          </div>\n        </gl-disclosure-dropdown-item>\n        <gl-disclosure-dropdown-item @action="toggleModalVisibility(true)">\n          <template #list-item>Provide feedback</template>\n        </gl-disclosure-dropdown-item>\n      </gl-disclosure-dropdown-group>\n      <gl-disclosure-dropdown-group :bordered="bordered" :border-position="borderPosition" :group="$options.groups[1]" @action="closeDropdown"/>\n    `, {\n    after: `\n      <gl-modal :visible="feedBackModalVisible" @change="toggleModalVisibility" modal-id="feedbackModal" size="sm">\n        <textarea class="gl-w-full">Tell us what you think!</textarea>\n      </gl-modal>\n    `\n  }),\n  data() {\n    return {\n      newNavigation: true,\n      feedBackModalVisible: false\n    };\n  },\n  methods: {\n    closeDropdown() {\n      this.$refs.disclosure.closeAndFocus();\n    },\n    toggleModalVisibility(value) {\n      this.feedBackModalVisible = value;\n      this.closeDropdown();\n    },\n    toggleNewNavigation() {\n      this.newNavigation = !this.newNavigation;\n      // eslint-disable-next-line no-restricted-globals\n      setTimeout(() => {\n        this.closeDropdown();\n      }, 500);\n    }\n  },\n  groups: mockProfileGroups\n})',...CustomGroupsItemsAndToggle.parameters?.docs?.source}}},MiscellaneousContent.parameters={...MiscellaneousContent.parameters,docs:{...MiscellaneousContent.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDisclosureDropdown\n  },\n  template: template(`\n      <div class="gl-p-3">A disclosure dropdown is a button that toggles a panel containing a list of items and/or links.</div>\n    `)\n})',...MiscellaneousContent.parameters?.docs?.source}}},InMainWrapper.parameters={...InMainWrapper.parameters,docs:{...InMainWrapper.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  toggleId: TOGGLE_ID,\n  props: Object.keys(argTypes),\n  components: {\n    GlDisclosureDropdown,\n    GlTooltip\n  },\n  template: `\n    <div>\n      ${template()}\n      <gl-tooltip :target="$options.toggleId" placement="right">\n        Automatic placement to stay inside &lt;main&gt; boundary\n      </gl-tooltip>\n    </div>\n  `\n})',...InMainWrapper.parameters?.docs?.source}}}}}]);