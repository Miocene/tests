"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[4861],{"./src/components/base/token_selector/token_selector.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>token_selector_stories});var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),token_selector=__webpack_require__("./src/components/base/token_selector/token_selector.vue");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){reject(error);return}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)})}}var Default=((args,_ref)=>{var{argTypes}=_ref;return{components:{GlTokenSelector:token_selector.default},props:Object.keys(argTypes),template:'\n  <div>\n    <gl-token-selector\n      v-model="selectedTokens"\n      v-bind="$props"\n      @text-input="handleTextInput"\n      @focus="handleFocus" />\n    {{ selectedTokens }}\n  </div>\n',data:()=>({filteredDropdownItems:[],inputText:"",selectedTokens:[{id:1,name:"Vue.js"}]}),methods:{handleTextInput(value){if(this.inputText=value,""===this.inputText){this.filteredDropdownItems=this.dropdownItems;return}this.filterDropdownItems()},handleFocus(){""!==this.inputText?this.filterDropdownItems():this.filteredDropdownItems=this.dropdownItems},filterDropdownItems(){this.filteredDropdownItems=this.dropdownItems.filter(dropdownItem=>dropdownItem.name.toLowerCase().includes(this.inputText.toLowerCase()))}}}}).bind({});Default.tags=["skip-visual-test"],Default.args={dropdownItems:[{id:1,name:"Vue.js"},{id:2,name:"Ruby On Rails",class:"gl-text-white! gl-bg-data-viz-magenta-950!"},{id:3,name:"GraphQL"},{id:4,name:"Redis",class:"gl-text-white! gl-bg-data-viz-green-700!"},{id:5,name:"CSS",class:"gl-text-red-500!",style:{backgroundColor:"#97acff"}}]},Default.play=function(){var _ref3=_asyncToGenerator(function*(_ref2){var{canvasElement}=_ref2,canvas=(0,dist.uh)(canvasElement),button=canvas.getByRole("textbox");yield dist.mV.click(button),yield(0,dist.X_)(()=>(0,dist.l_)(canvas.getByRole("menu")).toBeVisible())});return function(_x){return _ref3.apply(this,arguments)}}();let token_selector_stories={title:"base/token_selector",component:token_selector.default,parameters:{docs:{description:{component:"Choose from a provided list of tokens or add a user defined token.\n\n```html\n<script>\nexport default {\n  data() {\n    return {\n      selectedTokens: [\n        {\n          id: 1,\n          name: 'Vue.js',\n        },\n      ],\n    };\n  },\n};\n</script>\n\n<template>\n  <div>\n    <gl-token-selector\n      v-model=\"selectedTokens\"\n      :dropdown-items=\"[\n        {\n          id: 1,\n          name: 'Vue.js',\n        },\n        {\n          id: 2,\n          name: 'Ruby On Rails',\n        },\n        {\n          id: 3,\n          name: 'GraphQL',\n        },\n        {\n          id: 4,\n          name: 'Redis',\n        },\n      ]\"\n    />\n    {{ selectedTokens }}\n  </div>\n</template>\n```\n"}}},argTypes:{state:{options:[!0,!1,null],control:"radio"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlTokenSelector\n  },\n  props: Object.keys(argTypes),\n  template,\n  data() {\n    return {\n      filteredDropdownItems: [],\n      inputText: '',\n      selectedTokens: [{\n        id: 1,\n        name: 'Vue.js'\n      }]\n    };\n  },\n  methods: {\n    handleTextInput(value) {\n      this.inputText = value;\n      if (this.inputText === '') {\n        this.filteredDropdownItems = this.dropdownItems;\n        return;\n      }\n      this.filterDropdownItems();\n    },\n    handleFocus() {\n      if (this.inputText !== '') {\n        this.filterDropdownItems();\n      } else {\n        this.filteredDropdownItems = this.dropdownItems;\n      }\n    },\n    filterDropdownItems() {\n      this.filteredDropdownItems = this.dropdownItems.filter(dropdownItem => {\n        return dropdownItem.name.toLowerCase().includes(this.inputText.toLowerCase());\n      });\n    }\n  }\n})",...Default.parameters?.docs?.source}}}}}]);