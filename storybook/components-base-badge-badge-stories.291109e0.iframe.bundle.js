"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[9807],{"./src/utils/stories_utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>disableControls});var disableControls=function(){var controls=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Object.fromEntries(controls.map(control=>[control,{control:{disable:!0}}]))}},"./src/components/base/badge/badge.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Actionable:()=>Actionable,BadgeIcon:()=>BadgeIcon,Default:()=>Default,IconOnly:()=>IconOnly,Sizes:()=>Sizes,Variants:()=>Variants,default:()=>badge_stories});var icons=__webpack_require__("./node_modules/@gitlab/svgs/dist/icons.json"),constants=__webpack_require__("./src/utils/constants.js"),stories_utils=__webpack_require__("./src/utils/stories_utils.js"),badge=__webpack_require__("./src/components/base/badge/badge.vue"),defaultValue=prop=>badge.default.props[prop].default,generateProps=function(){var{variant=defaultValue("variant"),size=defaultValue("size"),href="",content="TestBadge",icon="",iconSize=defaultValue("iconSize")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{variant,size,href,content,icon,iconSize}},Default=((args,_ref)=>{var{argTypes}=_ref;return{components:{GlBadge:badge.default},props:Object.keys(argTypes),template:'\n    <gl-badge\n      :href="href"\n      :variant="variant"\n      :size="size"\n      :icon="icon"\n      :iconSize="iconSize"\n    >{{ content }}</gl-badge>\n  '}}).bind({});Default.args=generateProps(),Default.tags=["skip-visual-test"];var Variants=(args,_ref2)=>{var{argTypes}=_ref2;return{components:{GlBadge:badge.default},props:Object.keys(argTypes),template:'\n    <div>\n      <gl-badge\n        v-for="variant in $options.badgeVariantOptions"\n        :key="variant"\n        :href="href"\n        :variant="variant"\n        :size="size"\n        :icon="icon"\n        :iconSize="iconSize"\n        class="gl-mr-3"\n      >{{ variant }}</gl-badge>\n    </div>\n  ',badgeVariantOptions:constants.mN}};Variants.args=generateProps({variant:constants.mN.warning}),Variants.argTypes=(0,stories_utils.W)(["content","variant"]);var Actionable=(args,_ref3)=>{var{argTypes}=_ref3;return{components:{GlBadge:badge.default},props:Object.keys(argTypes),template:'\n    <div>\n      <gl-badge\n        v-for="variant in $options.badgeVariantOptions"\n        :key="variant"\n        :href="href"\n        :variant="variant"\n        :size="size"\n        :icon="icon"\n        :iconSize="iconSize"\n        class="gl-mr-3"\n      >{{ variant }}</gl-badge>\n    </div>\n  ',badgeVariantOptions:constants.mN}};Actionable.args=generateProps({href:"#foo",variant:constants.mN.warning}),Actionable.tags=["skip-visual-test"],Actionable.argTypes=(0,stories_utils.W)(["content","variant"]);var Sizes=(args,_ref4)=>{var{argTypes}=_ref4;return{components:{GlBadge:badge.default},props:Object.keys(argTypes),template:'\n    <div>\n      <gl-badge\n        v-for="size in $options.badgeSizeOptions"\n        :key="size"\n        :href="href"\n        :variant="variant"\n        :size="size"\n        :icon="icon"\n        :iconSize="iconSize"\n        class="gl-mr-3"\n      >{{ size }}</gl-badge>\n    </div>\n  ',badgeSizeOptions:constants.p8}};Sizes.args=generateProps({variant:constants.mN.danger}),Sizes.argTypes=(0,stories_utils.W)(["content","size"]);var BadgeIcon=(args,_ref5)=>{var{argTypes}=_ref5;return{components:{GlBadge:badge.default},props:Object.keys(argTypes),template:'\n    <div class="gl-display-flex gl-gap-3">\n      <gl-badge variant="tier" icon="license">16px icon</gl-badge>\n      <gl-badge variant="tier" icon="license-sm" iconSize="sm">12px icon</gl-badge>\n    </div>\n  '}};BadgeIcon.argTypes=(0,stories_utils.W)(["content","iconSize"]);var IconOnly=(args,_ref6)=>{var{argTypes}=_ref6;return{components:{GlBadge:badge.default},props:Object.keys(argTypes),template:'\n    <div>\n      <gl-badge\n        :href="href"\n        :variant="variant"\n        :size="size"\n        :icon="icon"\n        :iconSize="iconSize"\n      />\n    </div>\n  '}};IconOnly.args=generateProps({variant:constants.mN.success,icon:"calendar"});let badge_stories={title:"base/badge",component:badge.default,parameters:{bootstrapComponent:"b-badge",docs:{description:{component:'Badges highlight metadata of objects, the kind of information that always needs\nsome context and isn’t useful on its own. For example, they can be used to\nindicate an issue’s status, a member’s role, or if a branch is protected.\n\n## Usage\n\n```html\n<gl-badge>Hello, world!</gl-badge>\n```\n\n> Note: Native support for icons in badges will be added in a future version.\n\n### Using icon-only badges\n\nWhen a badge only has an icon and no slot content, be sure to set the `aria-label` attribute of the\nbadge for best accessibility.\n\n```html\n<!-- bad -->\n<gl-badge icon="eye" />\n\n<!-- good -->\n<gl-badge icon="eye" aria-label="Mark as confidential" />\n```\n\n## Edge cases\n\nWhile this component is based on\n[`BBadge`](https://bootstrap-vue.org/docs/components/badge) from\n`bootstrap-vue`, it is not a drop-in replacement. Specifically, this component:\n\n- Has a different set of valid `variant`s. See the examples or props\n   documentation for those values.\n- Always sets the `pill` prop of the underlying\n[`BBadge`](https://bootstrap-vue.org/docs/components/badge) to `true`. Any passed\n   in `pill` prop value is ignored.\n- Does _not_ scale itself to match the size of its immediate parent, like\n   [`BBadge`](https://bootstrap-vue.org/docs/components/badge) does.\n'}}},argTypes:{variant:{options:Object.keys(constants.mN),control:"select"},size:{options:Object.keys(constants.p8),control:"select"},icon:{options:["",...icons.ci],control:"select"},iconSize:{options:Object.keys(constants.Fv),control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBadge\n  },\n  props: Object.keys(argTypes),\n  template\n})",...Default.parameters?.docs?.source}}},Variants.parameters={...Variants.parameters,docs:{...Variants.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBadge\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <div>\n      <gl-badge\n        v-for="variant in $options.badgeVariantOptions"\n        :key="variant"\n        :href="href"\n        :variant="variant"\n        :size="size"\n        :icon="icon"\n        :iconSize="iconSize"\n        class="gl-mr-3"\n      >{{ variant }}</gl-badge>\n    </div>\n  `,\n  badgeVariantOptions\n})',...Variants.parameters?.docs?.source}}},Actionable.parameters={...Actionable.parameters,docs:{...Actionable.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBadge\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <div>\n      <gl-badge\n        v-for="variant in $options.badgeVariantOptions"\n        :key="variant"\n        :href="href"\n        :variant="variant"\n        :size="size"\n        :icon="icon"\n        :iconSize="iconSize"\n        class="gl-mr-3"\n      >{{ variant }}</gl-badge>\n    </div>\n  `,\n  badgeVariantOptions\n})',...Actionable.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBadge\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <div>\n      <gl-badge\n        v-for="size in $options.badgeSizeOptions"\n        :key="size"\n        :href="href"\n        :variant="variant"\n        :size="size"\n        :icon="icon"\n        :iconSize="iconSize"\n        class="gl-mr-3"\n      >{{ size }}</gl-badge>\n    </div>\n  `,\n  badgeSizeOptions\n})',...Sizes.parameters?.docs?.source}}},BadgeIcon.parameters={...BadgeIcon.parameters,docs:{...BadgeIcon.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBadge\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <div class="gl-display-flex gl-gap-3">\n      <gl-badge variant="tier" icon="license">16px icon</gl-badge>\n      <gl-badge variant="tier" icon="license-sm" iconSize="sm">12px icon</gl-badge>\n    </div>\n  `\n})',...BadgeIcon.parameters?.docs?.source}}},IconOnly.parameters={...IconOnly.parameters,docs:{...IconOnly.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlBadge\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <div>\n      <gl-badge\n        :href="href"\n        :variant="variant"\n        :size="size"\n        :icon="icon"\n        :iconSize="iconSize"\n      />\n    </div>\n  `\n})',...IconOnly.parameters?.docs?.source}}}}}]);