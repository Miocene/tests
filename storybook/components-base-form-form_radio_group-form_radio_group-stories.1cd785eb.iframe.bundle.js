"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[4919],{"./src/components/base/form/form_radio_group/form_radio_group.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>form_radio_group_stories});var form_radio=__webpack_require__("./src/components/base/form/form_radio/form_radio.vue"),form_radio_group=__webpack_require__("./src/components/base/form/form_radio_group/form_radio_group.vue"),defaultOptions=[{value:"pizza",text:"Pizza"},{value:"tacos",text:"Tacos"},{value:"burger",text:"Burger",disabled:!0}],data=()=>({selected:"slot-option"}),Default=((args,_ref)=>{var{argTypes}=_ref;return{components:{GlFormRadioGroup:form_radio_group.default,GlFormRadio:form_radio.default},props:Object.keys(argTypes),template:'\n  <div>\n    <gl-form-radio-group\n      v-model="selected"\n      :options="options"\n      :name="name"\n    >\n      <template #first>\n        <gl-form-radio value="slot-option">\n          Slot option with help text\n          <template #help>\n            Help text\n          </template>\n        </gl-form-radio>\n      </template>\n      <gl-form-radio value="Last option">Last option</gl-form-radio>\n    </gl-form-radio-group>\n  </div>',data}}).bind({});Default.args=function(){var{name="radio-group-name",options=defaultOptions}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{name,options}}();let form_radio_group_stories={title:"base/form/form-radio-group",component:form_radio_group.default,parameters:{bootstrapComponent:"b-form-radio-group",docs:{description:{component:'The `GlFormRadioGroup` component provides an alternative and sometimes more\ncompact way of setting up a group of `GlFormRadio` components.\n\n## Usage\n\n`GlFormRadioGroup` can be used in a few ways to build a group of `GlFormRadio`\ncomponents: implicitly, explicitly, or a mix of both.\n\nBelow is an example which demonstrates all three approaches, written such that\nall of them produce the same visual result.\n\n```html\n<script>\nexport default {\n  data() {\n    return {\n      selected: \'one\',\n      options: [\n        {\n          value: \'one\',\n          text: \'One\',\n        },\n        {\n          value: \'two\',\n          text: \'Two\',\n        },\n        {\n          value: \'three\',\n          text: \'Three\',\n        },\n      ],\n    };\n  },\n};\n</script>\n\n<template>\n  <div>\n    <!-- Implicit -->\n    <gl-form-radio-group v-model="selected" :options="options" name="implicit" />\n\n    <!-- Explicit -->\n    <gl-form-radio-group v-model="selected" name="explicit">\n      <gl-form-radio value="one">One</gl-form-radio>\n      <gl-form-radio value="two">Two</gl-form-radio>\n      <gl-form-radio value="three">Three</gl-form-radio>\n    </gl-form-radio-group>\n\n    <!-- Mixed -->\n    <gl-form-radio-group v-model="selected" :options="[options[1]]" name="mixed">\n      <template #first>\n        <gl-form-radio value="one">One</gl-form-radio>\n      </template>\n      <gl-form-radio value="three">Three</gl-form-radio>\n    </gl-form-radio-group>\n  </div>\n</template>\n```\n\n## Stacked\n\nBy default, the GitLab Design guide mandates the `<gl-form-radio-group>` be `stacked` by default and\nis non-changeable at this time.\n'}}},argTypes:{options:{description:"Array of objects representing the radios to render"},valueField:{description:"Field name in the options prop that should be used for the value"},textField:{description:"Field name in the options prop that should be used for the text label"},htmlField:{description:"Field name in the options prop that should be used for the html label instead of text field. Use with caution."},disabledField:{description:"Field name in the options prop that should be used for the disabled state"},checked:{description:"The current value of the checked radio in the group"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlFormRadioGroup,\n    GlFormRadio\n  },\n  props: Object.keys(argTypes),\n  template,\n  data\n})",...Default.parameters?.docs?.source}}}}}]);