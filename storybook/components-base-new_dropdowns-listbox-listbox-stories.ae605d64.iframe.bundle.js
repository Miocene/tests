"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[8293],{"./src/utils/stories_constants.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B:()=>SERIES_NAME_LONG,Bi:()=>SERIES_NAME,EY:()=>ARG_TYPE_SUBCATEGORY_SEARCH,Ef:()=>LISTBOX_CONTAINER_HEIGHT,Er:()=>ARG_TYPE_SUBCATEGORY_INFINITE_SCROLL,M4:()=>SERIES_NAME_LONG_WITHOUT_SPACES,gq:()=>ARG_TYPE_SUBCATEGORY_STATE,p1:()=>ARG_TYPE_SUBCATEGORY_ACCESSIBILITY,vu:()=>SERIES_NAME_SHORT,wm:()=>ARG_TYPE_SUBCATEGORY_LOOK_AND_FEEL});var ARG_TYPE_SUBCATEGORY_LOOK_AND_FEEL="Look & feel",ARG_TYPE_SUBCATEGORY_STATE="State",ARG_TYPE_SUBCATEGORY_SEARCH="Search",ARG_TYPE_SUBCATEGORY_ACCESSIBILITY="Accessibility",ARG_TYPE_SUBCATEGORY_INFINITE_SCROLL="Infinite scroll",SERIES_NAME_SHORT="SERIES_NAME_SHORT",SERIES_NAME_LONG="SERIES_NAME_LONG",SERIES_NAME_LONG_WITHOUT_SPACES="SERIES_NAME_LONG_WITHOUT_SPACES",SERIES_NAME={[SERIES_NAME_SHORT]:"Series ",[SERIES_NAME_LONG]:"Series name long. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tincidunt interdum sapien ut blandit. Nulla fermentum nisi id euismod vulputate. END",[SERIES_NAME_LONG_WITHOUT_SPACES]:"Series_name_long._Lorem_ipsum_dolor_sit_amet,_consectetur_adipiscing_elit._Sed_tincidunt_interdum_sapien_ut_blandit._Nulla_fermentum_nisi_id_euismod_vulputate._END"},LISTBOX_CONTAINER_HEIGHT="370px"},"./src/utils/stories_utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>disableControls});var disableControls=function(){var controls=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Object.fromEntries(controls.map(control=>[control,{control:{disable:!0}}]))}},"./src/utils/story_decorators/container.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>makeContainer});var makeContainer=function(style){var tag=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"div";return Story=>({render:h=>h(tag,{style},[h(Story())])})}},"./src/components/base/new_dropdowns/listbox/listbox.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomGroupsAndItems:()=>CustomGroupsAndItems,CustomListItem:()=>CustomListItem,CustomToggle:()=>CustomToggle,Default:()=>Default,GroupWithoutLabel:()=>GroupWithoutLabel,Groups:()=>Groups,HeaderActions:()=>HeaderActions,HeaderAndFooter:()=>HeaderAndFooter,InfiniteScroll:()=>InfiniteScroll,Searchable:()=>Searchable,SearchableGroups:()=>SearchableGroups,WithLongContent:()=>WithLongContent,default:()=>listbox_stories});var constants=__webpack_require__("./src/utils/constants.js"),icon=__webpack_require__("./src/components/base/icon/icon.vue"),search_box_by_type=__webpack_require__("./src/components/base/search_box_by_type/search_box_by_type.vue"),button_group=__webpack_require__("./src/components/base/button_group/button_group.vue"),button_button=__webpack_require__("./src/components/base/button/button.vue"),badge=__webpack_require__("./src/components/base/badge/badge.vue"),avatar=__webpack_require__("./src/components/base/avatar/avatar.vue"),truncate=__webpack_require__("./src/components/utilities/truncate/truncate.vue"),container=__webpack_require__("./src/utils/story_decorators/container.js"),test_utils=__webpack_require__("./src/utils/test_utils.js"),stories_utils=__webpack_require__("./src/utils/stories_utils.js"),stories_constants=__webpack_require__("./src/utils/stories_constants.js"),truncate_constants=__webpack_require__("./src/components/utilities/truncate/constants.js"),mock_data=__webpack_require__("./src/components/base/new_dropdowns/listbox/mock_data.js"),utils=__webpack_require__("./src/components/base/new_dropdowns/listbox/utils.js"),listbox=__webpack_require__("./src/components/base/new_dropdowns/listbox/listbox.vue"),_excluded=["infiniteScroll","infiniteScrollLoading","items"],_excluded2=["items"];function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=_objectWithoutPropertiesLoose(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],!(excluded.indexOf(key)>=0)&&Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var target={};for(var key in source)if(Object.prototype.hasOwnProperty.call(source,key)){if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var defaultValue=prop=>listbox.default.props[prop].default,generateProps=function(){var{items=mock_data.mockOptions,category=defaultValue("category"),variant=defaultValue("variant"),size=defaultValue("size"),disabled=defaultValue("disabled"),block=defaultValue("block"),loading=defaultValue("loading"),searchable=defaultValue("searchable"),searching=defaultValue("searching"),infiniteScroll=defaultValue("infiniteScroll"),infiniteScrollLoading=defaultValue("infiniteScrollLoading"),noResultsText=defaultValue("noResultsText"),searchPlaceholder=defaultValue("searchPlaceholder"),noCaret=defaultValue("noCaret"),placement=defaultValue("placement"),toggleClass,toggleText,textSrOnly=defaultValue("textSrOnly"),headerText=defaultValue("headerText"),icon="",multiple=defaultValue("multiple"),isCheckCentered=defaultValue("isCheckCentered"),toggleAriaLabelledBy,listAriaLabelledBy,resetButtonLabel=defaultValue("resetButtonLabel"),showSelectAllButtonLabel=defaultValue("showSelectAllButtonLabel"),startOpened=!0,fluidWidth,positioningStrategy,srOnlyResultsLabel}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{items,category,variant,size,disabled,block,loading,searchable,searching,infiniteScroll,infiniteScrollLoading,noResultsText,searchPlaceholder,noCaret,placement,toggleClass,toggleText,textSrOnly,headerText,icon,multiple,isCheckCentered,toggleAriaLabelledBy,listAriaLabelledBy,resetButtonLabel,showSelectAllButtonLabel,startOpened,fluidWidth,positioningStrategy,srOnlyResultsLabel}},makeBindings=function(){var overrides=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.entries(_objectSpread({":items":"items",":category":"category",":variant":"variant",":block":"block",":size":"size",":disabled":"disabled",":loading":"loading",":searchable":"searchable",":searching":"searching",":infinite-scroll":"infiniteScroll",":infinite-scroll-loading":"infiniteScrollLoading",":no-results-text":"noResultsText",":search-placeholder":"searchPlaceholder",":no-caret":"noCaret",":placement":"placement",":toggle-class":"toggleClass",":toggle-text":"toggleText",":text-sr-only":"textSrOnly",":header-text":"headerText",":icon":"icon",":multiple":"multiple",":is-check-centered":"isCheckCentered",":toggle-aria-labelled-by":"toggleAriaLabelledBy",":list-aria-labelled-by":"listAriaLabelledBy",":reset-button-label":"resetButtonLabel",":show-select-all-button-label":"showSelectAllButtonLabel",":fluid-width":"fluidWidth",":positioning-strategy":"positioningStrategy",":startOpened":"startOpened",":sr-only-results-label":"srOnlyResultsLabel"},overrides)).map(_ref=>{var[key,value]=_ref;return"".concat(key,'="').concat(value,'"')}).join("\n")},template=function(content){var{label="",bindingOverrides={}}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"\n  <div>\n    ".concat(label,"\n    ").concat(label&&"<br/>",'\n    <gl-collapsible-listbox\n      ref="listbox"\n      v-model="selected"\n      ').concat(makeBindings(bindingOverrides),"\n    >\n      ").concat(content,"\n    </gl-collapsible-listbox>\n  </div>\n")},Default=(args,_ref2)=>{var{argTypes}=_ref2;return{props:Object.keys(argTypes),components:{GlCollapsibleListbox:listbox.default},data:()=>({selected:mock_data.mockOptions[1].value}),template:template("",{label:'<span class="gl-my-0" id="listbox-label">Select a department</span>'})}};Default.args=generateProps({toggleAriaLabelledBy:"listbox-label"}),Default.decorators=[(0,container.F)({height:stories_constants.Ef})];var HeaderAndFooter=(args,_ref3)=>{var{argTypes}=_ref3;return{props:Object.keys(argTypes),components:{GlCollapsibleListbox:listbox.default,GlSearchBoxByType:search_box_by_type.default,GlButtonGroup:button_group.default,GlButton:button_button.default},data:()=>({selected:[]}),methods:{selectAllItems(){var allValues=mock_data.mockOptions.map(_ref4=>{var{value}=_ref4;return value});this.selected=[...allValues]},onReset(){this.selected=[]}},template:template('\n    <template #footer>\n       <div class="gl-border-t-solid gl-border-t-1 gl-border-t-gray-200 gl-display-flex gl-flex-direction-column gl-p-2! gl-pt-0!">\n        <gl-button @click="selectAllItems" category="tertiary" block class="gl-justify-content-start! gl-mt-2!">\n          Select all\n        </gl-button>\n        <gl-button category="tertiary" block class="gl-justify-content-start! gl-mt-2!" data-testid="footer-bottom-button">\n          Manage departments\n        </gl-button>\n      </div>\n    </template>\n  ',{bindingOverrides:{"@reset":"onReset"}})}};HeaderAndFooter.args=generateProps({toggleText:"Header and Footer",headerText:"Assign to department",resetButtonLabel:"Unassign",multiple:!0,block:!0}),HeaderAndFooter.decorators=[(0,container.F)({height:stories_constants.Ef})];var HeaderActions=(args,_ref5)=>{var{argTypes}=_ref5;return{props:Object.keys(argTypes),components:{GlCollapsibleListbox:listbox.default,GlSearchBoxByType:search_box_by_type.default,GlButtonGroup:button_group.default,GlButton:button_button.default},data:()=>({selected:[]}),computed:{allValues:()=>mock_data.mockOptions.map(_ref6=>{var{value}=_ref6;return value})},methods:{selectAllItems(){this.selected=[...this.allValues]},onReset(){this.selected=[]}},template:template("",{bindingOverrides:{"@reset":"onReset","@select-all":"selectAllItems"}})}};HeaderActions.args=generateProps({toggleText:"Header actions",headerText:"Assign to department",resetButtonLabel:"Unassign",showSelectAllButtonLabel:"Select All",multiple:!0,block:!0}),HeaderActions.decorators=[(0,container.F)({height:stories_constants.Ef})];var CustomListItem=(args,_ref7)=>{var{argTypes}=_ref7;return{props:Object.keys(argTypes),data:()=>({selected:[mock_data.mockUsers[0].value]}),components:{GlCollapsibleListbox:listbox.default,GlIcon:icon.default,GlAvatar:avatar.default},computed:{customToggleText(){return 0===this.selected.length?"Select assignee(s)":1===this.selected.length?this.items.find(_ref8=>{var{value}=_ref8;return value===this.selected[0]}).text:"".concat(this.selected.length," assignees")}},methods:{onReset(){this.selected=[]}},template:template('<template #list-item="{ item }">\n              <span class="gl-display-flex gl-align-items-center">\n                <gl-avatar :size="32" :entity-name="item.value" class="gl-mr-3"/>\n                  <span class="gl-display-flex gl-flex-direction-column">\n                    <span class="gl-font-weight-bold gl-white-space-nowrap">{{ item.text }}</span>\n                    <span class="gl-text-gray-400"> {{ item.secondaryText }}</span>\n                  </span>\n              </span>\n            </template>\n        ',{bindingOverrides:{":toggle-text":"customToggleText","@reset":"onReset"}})}};CustomListItem.args=generateProps({items:mock_data.mockUsers,multiple:!0,isCheckCentered:!0,headerText:"Select assignees",resetButtonLabel:"Unassign"}),CustomListItem.decorators=[(0,container.F)({height:"200px"})];var CustomToggle=(args,_ref9)=>{var{argTypes}=_ref9;return{props:Object.keys(argTypes),components:{GlCollapsibleListbox:listbox.default,GlAvatar:avatar.default},data:()=>({selected:mock_data.mockUsers[1].value}),template:template('\n    <template #toggle>\n     <button class="gl-rounded-base gl-border-none gl-p-2 gl-bg-gray-50 ">\n       <span class="gl-sr-only">\n          {{selected}}\n       </span>\n       <gl-avatar :size="32" :entity-name="selected" aria-hidden="true"/>\n     </button>\n    </template>\n    <template #list-item="{ item }">\n      <span class="gl-display-flex gl-align-items-center">\n        <gl-avatar :size="32" :entity-name="item.value" class="gl-mr-3"/>\n          <span class="gl-display-flex gl-flex-direction-column">\n            <span class="gl-font-weight-bold gl-white-space-nowrap">{{ item.text }}</span>\n            <span class="gl-text-gray-400"> {{ item.secondaryText }}</span>\n          </span>\n      </span>\n    </template>\n  ')}};CustomToggle.args=generateProps({items:mock_data.mockUsers,isCheckCentered:!0}),CustomToggle.decorators=[(0,container.F)({height:"200px"})];var makeGroupedExample=changes=>{var story=(args,_ref10)=>{var{argTypes}=_ref10;return _objectSpread({props:Object.keys(argTypes),components:{GlBadge:badge.default,GlCollapsibleListbox:listbox.default},data:()=>({selected:"v1.0"})},changes)};return story.args=generateProps({items:mock_data.mockGroups}),story.decorators=[(0,container.F)({height:"280px"})],story},Groups=makeGroupedExample({template:template("",{bindingOverrides:{":toggle-text":"customToggleText",":items":"computedItems"}}),data:()=>({selected:["v1.0"]}),computed:{customToggleText(){return this.selected.length?"".concat(this.selected.length," refs selected"):"Select refs"},computedItems(){var isSelected=option=>this.selected.includes(option.value),notSelected=option=>!isSelected(option),selectedBranches=mock_data.mockGroups[0].options.filter(isSelected),availableBranches=mock_data.mockGroups[0].options.filter(notSelected);return[{text:"Selected branches",options:selectedBranches},{text:"Selected tags",options:mock_data.mockGroups[1].options.filter(isSelected)},{text:"Branches",options:availableBranches},{text:"Tags",options:mock_data.mockGroups[1].options.filter(notSelected)}].filter(group=>group.options.length)}}});Groups.args=generateProps({multiple:!0});var CustomGroupsAndItems=makeGroupedExample({template:template('\n    <template #group-label="{ group }">\n      {{ group.text }} <gl-badge size="sm">{{ group.options.length }}</gl-badge>\n    </template>\n    <template #list-item="{ item }">\n      {{ item.text }} <gl-badge v-if="item.value === \'main\'" size="sm">default</gl-badge>\n    </template>\n  ')}),GroupWithoutLabel=(args,_ref11)=>{var{argTypes}=_ref11;return{props:Object.keys(argTypes),components:{GlBadge:badge.default,GlCollapsibleListbox:listbox.default},data:()=>({selected:mock_data.mockGroupsWithTextSrOnly[1].options[1].value}),template:template('\n    <template #list-item="{ item }">\n      {{ item.text }} <gl-badge v-if="item.value === \'main\'" size="sm">default</gl-badge>\n    </template>\n  ')}};GroupWithoutLabel.args=generateProps({items:mock_data.mockGroupsWithTextSrOnly,headerText:"Select branch"});let listbox_stories={title:"base/dropdown/collapsible-listbox",component:listbox.default,parameters:{docs:{description:{component:'A collapsible listbox is a button that toggles a panel containing a list of options.\nIt supports single and multi-selection.\n\n**Single-select:** By default, selecting an option will update the toggle label with the choice.\nBut the custom toggle text can be provided.\nWhen option is selected, the dropdown will be closed and focus set on the toggle button.\n\n**Multi-select:** Selecting an option will not update the toggle, but it can be customized\nproviding `toggleText` property. Also, selecting or deselecting an item won\'t close the dropdown.\n\n## Icon-only listbox\n\nIcon-only listboxes must have an accessible name.\nYou can provide this with the combination of `toggleText` and `textSrOnly` props.\nFor single-select listboxes `toggleText` will be set to the selected item\'s `text` property value\nby default.\n\nOptionally, you can use `no-caret` to remove the caret and `category="tertiary"` to remove the border.\n\n```html\n<gl-collapsible-listbox\n  icon="ellipsis_v"\n  toggle-text="More options"\n  text-sr-only\n  category="tertiary"\n  no-caret\n>\n```\n\n## Opening the listbox\n\nListbox will open on toggle button click (if it was previously closed).\nOn open, `GlCollapsibleListbox` will emit the `shown` event.\n\n## Closing the listbox\n\nThe listbox is closed by any of the following:\n\n- pressing <kbd>Esc</kbd>\n- clicking anywhere outside the component\n- selecting an option in single-select mode\n\nAfter closing, `GlCollapsibleListbox` emits a `hidden` event.\n\n## Selecting items\n\nSet the `v-model` on the listbox to have 2-way data binding for the selected items in the listbox.\nAlternatively, you can set `selected` property to the array of selected items\n`value` properties (for multi-select) or to the selected item `value` property for a single-select.\nOn selection the listbox will emit the `select` event with the selected values.\n\n## Resetting the selection\n\n`GlCollapsibleListbox` can render a reset button if the `headerText` and\n`resetButtonLabel` props are provided.\nWhen clicking on the reset button, a `reset` event is emitted. It is the consumer\'s responsibility\nto listen to that event and to update the model as needed.\n\n## Setting listbox options\n\nUse the `items` prop to provide options to the listbox. Each item can be\neither an option or a group. Below are the expected shapes of these\nobjects:\n\n```typescript\ntype Option = {\n  value: string\n  text?: string\n}\n\ntype Group = {\n  text: string\n  options: Array<Option>\n  textSrOnly?: boolean\n}\n\ntype ItemsProp = Array<Option> | Array<Group>\n```\n\n### Options\n\nThe `value` property of options must be unique across all options\nprovided to the listbox, as it\'s used as a primary key.\n\nThe optional `text` property is used to render the default listbox item\ntemplate. If you want to render a custom template for items, use the\n`list-item` scoped slot:\n\n```html\n<gl-collapsible-listbox :items="items">\n  <template #list-item="{ item }">\n    <span class="gl-display-flex gl-align-items-center">\n      <gl-avatar :size="32" class-="gl-mr-3"/>\n      <span class="gl-display-flex gl-flex-direction-column">\n        <span class="gl-font-weight-bold gl-white-space-nowrap">{{ item.text }}</span>\n        <span class="gl-text-gray-400"> {{ item.secondaryText }}</span>\n      </span>\n    </span>\n  </template>\n</gl-collapsible-listbox>\n```\n\n### Groups\n\nOptions can be contained within groups. A group has a required `text`\nproperty, which must be unique across all groups within the listbox, as\nit\'s used as a primary key. It also has a required property `items` that\nmust be an array of options. Optionally, you can hide the group heading\nby setting `textSrOnly` to `true`. In this case the `text` is only used\nfor accessibility purposes.\n\nGroups can be at most one level deep: a group can only contain options.\nOptions and groups _cannot_ be siblings. Either all items are options,\nor they are all groups.\n\nTo render custom group labels, use the `group-label` scoped slot:\n\n```html\n<gl-collapsible-listbox :items="groups">\n  <template #group-label="{ group }">\n    {{ group.text }} <gl-badge size="sm">{{ group.options.length }}</gl-badge>\n  </template>\n</gl-collapsible-listbox>\n```\n\n### Dealing with long option texts\n\n- Some options might have long non-wrapping text that would overflow the dropdown maximum width. In\nsuch cases, it\'s recommended to override the `#list-item` slot and to truncate the option text using\n`GlTruncate`.\n- If the toggle text reflects the selected option text, it might be necessary to truncate\nit too by overriding the `#toggle` slot.\n\n## Search\n\nTo filter out items by  search query set `searchable` property to `true`.\nListbox will render the search field and will emit `search` event with the `searchQuery` value.\nPerforming the search is the responsibility of the listbox\'s consumer component.\nWhen performing search set `searching` prop to `true` - this will render the loader\nwhile search is in progress instead of the list of items.\nTo update content of the listbox, toggle the `searching` property\nand update the `items` property with a new array. Be sure to debounce (or\nsimilar) the `search` event handler to avoid rendering stale results.\nTo improve the accessibility, provide the `search-summary-sr-only` scoped slot\nwith a number of found search results text, alternately, you can pass a plural translate function.\nAn example of the plural translate function can be found [the GitLab Docs internationalization section](https://docs.gitlab.com/ee/development/i18n/externalization.html#plurals)\nScreen reader will announce this text when the list is updated.\n\n```html\n<gl-collapsible-listbox :items="items" searchable>\n  <template #search-summary-sr-only>\n    5 users found\n  </template>\n</gl-collapsible-listbox>\n```\n\n## Split dropdown\n\nSee [button group documentation](/docs/base-button-group--docs#split-dropdowns).\n'}}},argTypes:{category:{control:"select",options:constants.O7,table:{subcategory:stories_constants.wm}},variant:{control:"select",options:constants.b$,table:{subcategory:stories_constants.wm}},size:{control:"select",options:Object.keys(constants.td),table:{subcategory:stories_constants.wm}},block:{table:{subcategory:stories_constants.wm}},noCaret:{table:{subcategory:stories_constants.wm}},placement:{control:"select",options:Object.keys(constants.eY),table:{subcategory:stories_constants.wm}},toggleText:{table:{subcategory:stories_constants.wm}},icon:{table:{subcategory:stories_constants.wm}},isCheckCentered:{table:{subcategory:stories_constants.wm}},headerText:{table:{subcategory:stories_constants.wm}},resetButtonLabel:{table:{subcategory:stories_constants.wm}},toggleClass:{table:{subcategory:stories_constants.wm}},fluidWidth:{table:{subcategory:stories_constants.wm}},disabled:{table:{subcategory:stories_constants.gq}},loading:{table:{subcategory:stories_constants.gq}},searchable:{table:{subcategory:stories_constants.EY}},searching:{table:{subcategory:stories_constants.EY}},noResultsText:{table:{subcategory:stories_constants.EY}},searchPlaceholder:{table:{subcategory:stories_constants.EY}},textSrOnly:{table:{subcategory:stories_constants.p1}},toggleAriaLabelledBy:{table:{subcategory:stories_constants.p1}},srOnlyResultsLabel:{table:{subcategory:stories_constants.p1}},listAriaLabelledBy:{table:{subcategory:stories_constants.p1}},infiniteScroll:{table:{subcategory:stories_constants.Er}},infiniteScrollLoading:{table:{subcategory:stories_constants.Er}},totalItems:{table:{subcategory:stories_constants.Er}}}};var Searchable=(args,_ref12)=>{var{argTypes}=_ref12;return{props:Object.keys(argTypes),components:{GlCollapsibleListbox:listbox.default},data:()=>({selected:mock_data.mockOptions[1].value,filteredItems:mock_data.mockOptions,searchInProgress:!1,timeoutId:null}),methods:{filterList(searchTerm){this.timeoutId&&clearTimeout(this.timeoutId),this.searchInProgress=!0,this.timeoutId=setTimeout(()=>{this.filteredItems=this.items.filter(_ref13=>{var{text}=_ref13;return text.toLowerCase().includes(searchTerm.toLowerCase())}),this.searchInProgress=!1},2e3)}},computed:{customToggleText(){var selectedValues=Array.isArray(this.selected)?this.selected:[this.selected];return 1===selectedValues.length?this.items.find(_ref14=>{var{value}=_ref14;return value===selectedValues[0]}).text:"Selected ".concat(selectedValues.length," departments")},numberOfSearchResults(){return"".concat(this.filteredItems.length," department").concat(this.filteredItems.length>1?"s":"")}},template:template("<template #search-summary-sr-only>\n      {{ numberOfSearchResults }}\n    </template>",{bindingOverrides:{":items":"filteredItems",":toggle-text":"customToggleText",":searching":"searchInProgress","@search":"filterList"}})}};Searchable.args=generateProps({headerText:"Assign to department",searchable:!0,searchPlaceholder:"Find department"}),Searchable.decorators=[(0,container.F)({height:stories_constants.Ef})];var SearchableGroups=(args,_ref15)=>{var{argTypes}=_ref15;return{props:Object.keys(argTypes),components:{GlCollapsibleListbox:listbox.default},data:()=>({selected:mock_data.mockGroups[1].options[0].value,filteredGroupOptions:mock_data.mockGroups,searchInProgress:!1,timeoutId:null}),computed:{flattenedOptions(){return(0,utils.eu)(this.items)},flattenedFilteredOptions(){return(0,utils.eu)(this.filteredGroupOptions)},customToggleText(){var selectedValues=Array.isArray(this.selected)?this.selected:[this.selected];return 1===selectedValues.length?this.flattenedOptions.find(_ref16=>{var{value}=_ref16;return value===selectedValues[0]}).text:"Selected ".concat(selectedValues.length," departments")}},methods:{filterList(searchTerm){this.timeoutId&&clearTimeout(this.timeoutId),this.searchInProgress=!0,this.timeoutId=setTimeout(()=>{this.filteredGroupOptions=this.items.map(_ref17=>{var{text,options}=_ref17;return{text,options:options.filter(option=>option.text.toLowerCase().includes(searchTerm.toLowerCase()))}}).filter(_ref18=>{var{options}=_ref18;return options.length}),this.searchInProgress=!1},2e3)},srOnlyResultsLabel:count=>"".concat(count," branch").concat(count>1?"es":""," or tag").concat(count>1?"s":"")},template:template("",{bindingOverrides:{":items":"filteredGroupOptions",":toggle-text":"customToggleText",":searching":"searchInProgress",":sr-only-results-label":"srOnlyResultsLabel","@search":"filterList"}})}};SearchableGroups.args=generateProps({headerText:"Select ref",searchable:!0,items:mock_data.mockGroups}),SearchableGroups.decorators=[(0,container.F)({height:stories_constants.Ef})];var InfiniteScroll=(args,_ref19)=>{var{argTypes:{infiniteScroll,infiniteScrollLoading,items}}=_ref19;return{props:Object.keys(_objectWithoutProperties(_ref19.argTypes,_excluded)),components:{GlCollapsibleListbox:listbox.default},data:()=>({selected:mock_data.mockOptions[1].value,items:mock_data.mockOptions.slice(0,10),infiniteScrollLoading:!1,infiniteScroll:!0}),methods:{onBottomReached(){this.infiniteScrollLoading=!0,(0,test_utils.$L)(()=>{this.items.push(...mock_data.mockOptions.slice(10,12)),this.infiniteScrollLoading=!1,this.infiniteScroll=!1},1e3)}},template:template("",{label:'<span class="gl-my-0" id="listbox-label">Select a department</span>',bindingOverrides:{":items":"items",":infinite-scroll":"infiniteScroll",":infinite-scroll-loading":"infiniteScrollLoading",":total-items":12,"@bottom-reached":"onBottomReached"}})}};InfiniteScroll.argTypes=_objectSpread({},(0,stories_utils.W)(["infiniteScroll","infiniteScrollLoading","items"])),InfiniteScroll.tags=["skip-visual-test"],InfiniteScroll.args=generateProps(),InfiniteScroll.decorators=[(0,container.F)({height:stories_constants.Ef})];var WithLongContent=(args,_ref20)=>{var{argTypes:{items}}=_ref20;return{props:Object.keys(_objectWithoutProperties(_ref20.argTypes,_excluded2)),components:{GlCollapsibleListbox:listbox.default,GlButton:button_button.default,GlTruncate:truncate.default},data(){var positions=Object.values(truncate_constants.POSITION),longItems=Array.from({length:positions.length}).map((_,index)=>({value:"long_value_".concat(index),text:"".concat(index+1,". This is a super long option. Its text is so long that it overflows the max content width. Thankfully, we are truncating it!"),truncatePosition:positions[index]}));return{selected:longItems[0].value,items:longItems}},computed:{customToggleText(){return this.items.find(_ref21=>{var{value}=_ref21;return value===this.selected}).text},numberOfSearchResults(){return 1===this.filteredItems.length?"1 result":"".concat(this.filteredItems.length," results")}},template:template('\n    <template #toggle>\n      <gl-button class="gl-w-30">\n        <gl-truncate :text="customToggleText" />\n      </gl-button>\n    </template>\n    <template #list-item="{ item }">\n      <gl-truncate :text="item.text" :position="item.truncatePosition" />\n    </template>\n  ',{label:'<span class="gl-my-0" id="listbox-label">Select the longest option</span>',bindingOverrides:{":items":"items"}})}};WithLongContent.args=generateProps({fluidWidth:!0}),Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlCollapsibleListbox\n  },\n  data() {\n    return {\n      selected: mockOptions[1].value\n    };\n  },\n  template: template(\'\', {\n    label: `<span class="gl-my-0" id="listbox-label">Select a department</span>`\n  })\n})',...Default.parameters?.docs?.source}}},HeaderAndFooter.parameters={...HeaderAndFooter.parameters,docs:{...HeaderAndFooter.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlCollapsibleListbox,\n    GlSearchBoxByType,\n    GlButtonGroup,\n    GlButton\n  },\n  data() {\n    return {\n      selected: []\n    };\n  },\n  methods: {\n    selectAllItems() {\n      const allValues = mockOptions.map(({\n        value\n      }) => value);\n      this.selected = [...allValues];\n    },\n    onReset() {\n      this.selected = [];\n    }\n  },\n  template: template(`\n    <template #footer>\n       <div class="gl-border-t-solid gl-border-t-1 gl-border-t-gray-200 gl-display-flex gl-flex-direction-column gl-p-2! gl-pt-0!">\n        <gl-button @click="selectAllItems" category="tertiary" block class="gl-justify-content-start! gl-mt-2!">\n          Select all\n        </gl-button>\n        <gl-button category="tertiary" block class="gl-justify-content-start! gl-mt-2!" data-testid="footer-bottom-button">\n          Manage departments\n        </gl-button>\n      </div>\n    </template>\n  `, {\n    bindingOverrides: {\n      \'@reset\': \'onReset\'\n    }\n  })\n})',...HeaderAndFooter.parameters?.docs?.source}}},HeaderActions.parameters={...HeaderActions.parameters,docs:{...HeaderActions.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlCollapsibleListbox,\n    GlSearchBoxByType,\n    GlButtonGroup,\n    GlButton\n  },\n  data() {\n    return {\n      selected: []\n    };\n  },\n  computed: {\n    allValues() {\n      return mockOptions.map(({\n        value\n      }) => value);\n    }\n  },\n  methods: {\n    selectAllItems() {\n      this.selected = [...this.allValues];\n    },\n    onReset() {\n      this.selected = [];\n    }\n  },\n  template: template('', {\n    bindingOverrides: {\n      '@reset': 'onReset',\n      '@select-all': 'selectAllItems'\n    }\n  })\n})",...HeaderActions.parameters?.docs?.source}}},CustomListItem.parameters={...CustomListItem.parameters,docs:{...CustomListItem.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  data() {\n    return {\n      selected: [mockUsers[0].value]\n    };\n  },\n  components: {\n    GlCollapsibleListbox,\n    GlIcon,\n    GlAvatar\n  },\n  computed: {\n    customToggleText() {\n      if (this.selected.length === 0) return \'Select assignee(s)\';\n      if (this.selected.length === 1) return this.items.find(({\n        value\n      }) => value === this.selected[0]).text;\n      return `${this.selected.length} assignees`;\n    }\n  },\n  methods: {\n    onReset() {\n      this.selected = [];\n    }\n  },\n  template: template(`<template #list-item="{ item }">\n              <span class="gl-display-flex gl-align-items-center">\n                <gl-avatar :size="32" :entity-name="item.value" class="gl-mr-3"/>\n                  <span class="gl-display-flex gl-flex-direction-column">\n                    <span class="gl-font-weight-bold gl-white-space-nowrap">{{ item.text }}</span>\n                    <span class="gl-text-gray-400"> {{ item.secondaryText }}</span>\n                  </span>\n              </span>\n            </template>\n        `, {\n    bindingOverrides: {\n      \':toggle-text\': \'customToggleText\',\n      \'@reset\': \'onReset\'\n    }\n  })\n})',...CustomListItem.parameters?.docs?.source}}},CustomToggle.parameters={...CustomToggle.parameters,docs:{...CustomToggle.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlCollapsibleListbox,\n    GlAvatar\n  },\n  data() {\n    return {\n      selected: mockUsers[1].value\n    };\n  },\n  template: template(`\n    <template #toggle>\n     <button class="gl-rounded-base gl-border-none gl-p-2 gl-bg-gray-50 ">\n       <span class="gl-sr-only">\n          {{selected}}\n       </span>\n       <gl-avatar :size="32" :entity-name="selected" aria-hidden="true"/>\n     </button>\n    </template>\n    <template #list-item="{ item }">\n      <span class="gl-display-flex gl-align-items-center">\n        <gl-avatar :size="32" :entity-name="item.value" class="gl-mr-3"/>\n          <span class="gl-display-flex gl-flex-direction-column">\n            <span class="gl-font-weight-bold gl-white-space-nowrap">{{ item.text }}</span>\n            <span class="gl-text-gray-400"> {{ item.secondaryText }}</span>\n          </span>\n      </span>\n    </template>\n  `)\n})',...CustomToggle.parameters?.docs?.source}}},Groups.parameters={...Groups.parameters,docs:{...Groups.parameters?.docs,source:{originalSource:"makeGroupedExample({\n  template: template('', {\n    bindingOverrides: {\n      ':toggle-text': 'customToggleText',\n      ':items': 'computedItems'\n    }\n  }),\n  data() {\n    return {\n      selected: ['v1.0']\n    };\n  },\n  computed: {\n    customToggleText() {\n      return this.selected.length ? `${this.selected.length} refs selected` : 'Select refs';\n    },\n    computedItems() {\n      const isSelected = option => this.selected.includes(option.value);\n      const notSelected = option => !isSelected(option);\n\n      // eslint-disable-next-line unicorn/no-array-callback-reference\n      const selectedBranches = mockGroups[0].options.filter(isSelected);\n      // eslint-disable-next-line unicorn/no-array-callback-reference\n      const availableBranches = mockGroups[0].options.filter(notSelected);\n      // eslint-disable-next-line unicorn/no-array-callback-reference\n      const selectedTags = mockGroups[1].options.filter(isSelected);\n      // eslint-disable-next-line unicorn/no-array-callback-reference\n      const availableTags = mockGroups[1].options.filter(notSelected);\n      return [{\n        text: 'Selected branches',\n        options: selectedBranches\n      }, {\n        text: 'Selected tags',\n        options: selectedTags\n      }, {\n        text: 'Branches',\n        options: availableBranches\n      }, {\n        text: 'Tags',\n        options: availableTags\n      }].filter(group => group.options.length);\n    }\n  }\n})",...Groups.parameters?.docs?.source}}},CustomGroupsAndItems.parameters={...CustomGroupsAndItems.parameters,docs:{...CustomGroupsAndItems.parameters?.docs,source:{originalSource:'makeGroupedExample({\n  template: template(`\n    <template #group-label="{ group }">\n      {{ group.text }} <gl-badge size="sm">{{ group.options.length }}</gl-badge>\n    </template>\n    <template #list-item="{ item }">\n      {{ item.text }} <gl-badge v-if="item.value === \'main\'" size="sm">default</gl-badge>\n    </template>\n  `)\n})',...CustomGroupsAndItems.parameters?.docs?.source}}},GroupWithoutLabel.parameters={...GroupWithoutLabel.parameters,docs:{...GroupWithoutLabel.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlBadge,\n    GlCollapsibleListbox\n  },\n  data() {\n    return {\n      selected: mockGroupsWithTextSrOnly[1].options[1].value\n    };\n  },\n  template: template(`\n    <template #list-item="{ item }">\n      {{ item.text }} <gl-badge v-if="item.value === \'main\'" size="sm">default</gl-badge>\n    </template>\n  `)\n})',...GroupWithoutLabel.parameters?.docs?.source}}},Searchable.parameters={...Searchable.parameters,docs:{...Searchable.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlCollapsibleListbox\n  },\n  data() {\n    return {\n      selected: mockOptions[1].value,\n      filteredItems: mockOptions,\n      searchInProgress: false,\n      timeoutId: null\n    };\n  },\n  methods: {\n    filterList(searchTerm) {\n      if (this.timeoutId) {\n        clearTimeout(this.timeoutId);\n      }\n      this.searchInProgress = true;\n\n      // eslint-disable-next-line no-restricted-globals\n      this.timeoutId = setTimeout(() => {\n        this.filteredItems = this.items.filter(({\n          text\n        }) => text.toLowerCase().includes(searchTerm.toLowerCase()));\n        this.searchInProgress = false;\n      }, 2000);\n    }\n  },\n  computed: {\n    customToggleText() {\n      let toggleText = 'Search for department';\n      const selectedValues = Array.isArray(this.selected) ? this.selected : [this.selected];\n      if (selectedValues.length === 1) {\n        toggleText = this.items.find(({\n          value\n        }) => value === selectedValues[0]).text;\n      } else {\n        toggleText = `Selected ${selectedValues.length} departments`;\n      }\n      return toggleText;\n    },\n    numberOfSearchResults() {\n      return `${this.filteredItems.length} department${this.filteredItems.length > 1 ? 's' : ''}`;\n    }\n  },\n  template: template(`<template #search-summary-sr-only>\n      {{ numberOfSearchResults }}\n    </template>`, {\n    bindingOverrides: {\n      ':items': 'filteredItems',\n      ':toggle-text': 'customToggleText',\n      ':searching': 'searchInProgress',\n      '@search': 'filterList'\n    }\n  })\n})",...Searchable.parameters?.docs?.source}}},SearchableGroups.parameters={...SearchableGroups.parameters,docs:{...SearchableGroups.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlCollapsibleListbox\n  },\n  data() {\n    return {\n      selected: mockGroups[1].options[0].value,\n      filteredGroupOptions: mockGroups,\n      searchInProgress: false,\n      timeoutId: null\n    };\n  },\n  computed: {\n    flattenedOptions() {\n      return flattenedOptions(this.items);\n    },\n    flattenedFilteredOptions() {\n      return flattenedOptions(this.filteredGroupOptions);\n    },\n    customToggleText() {\n      let toggleText = 'Search for department';\n      const selectedValues = Array.isArray(this.selected) ? this.selected : [this.selected];\n      if (selectedValues.length === 1) {\n        toggleText = this.flattenedOptions.find(({\n          value\n        }) => value === selectedValues[0]).text;\n      } else {\n        toggleText = `Selected ${selectedValues.length} departments`;\n      }\n      return toggleText;\n    }\n  },\n  methods: {\n    filterList(searchTerm) {\n      if (this.timeoutId) {\n        clearTimeout(this.timeoutId);\n      }\n      this.searchInProgress = true;\n\n      // eslint-disable-next-line no-restricted-globals\n      this.timeoutId = setTimeout(() => {\n        this.filteredGroupOptions = this.items.map(({\n          text,\n          options\n        }) => {\n          return {\n            text,\n            options: options.filter(option => option.text.toLowerCase().includes(searchTerm.toLowerCase()))\n          };\n        }).filter(({\n          options\n        }) => options.length);\n        this.searchInProgress = false;\n      }, 2000);\n    },\n    srOnlyResultsLabel(count) {\n      return `${count} branch${count > 1 ? 'es' : ''} or tag${count > 1 ? 's' : ''}`;\n    }\n  },\n  template: template('', {\n    bindingOverrides: {\n      ':items': 'filteredGroupOptions',\n      ':toggle-text': 'customToggleText',\n      ':searching': 'searchInProgress',\n      ':sr-only-results-label': 'srOnlyResultsLabel',\n      '@search': 'filterList'\n    }\n  })\n})",...SearchableGroups.parameters?.docs?.source}}},InfiniteScroll.parameters={...InfiniteScroll.parameters,docs:{...InfiniteScroll.parameters?.docs,source:{originalSource:"(args, {\n  argTypes: {\n    infiniteScroll,\n    infiniteScrollLoading,\n    items,\n    ...argTypes\n  }\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlCollapsibleListbox\n  },\n  data() {\n    return {\n      selected: mockOptions[1].value,\n      items: mockOptions.slice(0, 10),\n      infiniteScrollLoading: false,\n      infiniteScroll: true\n    };\n  },\n  methods: {\n    onBottomReached() {\n      this.infiniteScrollLoading = true;\n      setStoryTimeout(() => {\n        this.items.push(...mockOptions.slice(10, 12));\n        this.infiniteScrollLoading = false;\n        this.infiniteScroll = false;\n      }, 1000);\n    }\n  },\n  template: template('', {\n    label: `<span class=\"gl-my-0\" id=\"listbox-label\">Select a department</span>`,\n    bindingOverrides: {\n      ':items': 'items',\n      ':infinite-scroll': 'infiniteScroll',\n      ':infinite-scroll-loading': 'infiniteScrollLoading',\n      ':total-items': 12,\n      '@bottom-reached': 'onBottomReached'\n    }\n  })\n})",...InfiniteScroll.parameters?.docs?.source}}},WithLongContent.parameters={...WithLongContent.parameters,docs:{...WithLongContent.parameters?.docs,source:{originalSource:'(args, {\n  argTypes: {\n    items,\n    ...argTypes\n  }\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlCollapsibleListbox,\n    GlButton,\n    GlTruncate\n  },\n  data() {\n    const positions = Object.values(POSITION);\n    const longItems = Array.from({\n      length: positions.length\n    }).map((_, index) => ({\n      value: `long_value_${index}`,\n      text: `${index + 1}. This is a super long option. Its text is so long that it overflows the max content width. Thankfully, we are truncating it!`,\n      truncatePosition: positions[index]\n    }));\n    return {\n      selected: longItems[0].value,\n      items: longItems\n    };\n  },\n  computed: {\n    customToggleText() {\n      return this.items.find(({\n        value\n      }) => value === this.selected).text;\n    },\n    numberOfSearchResults() {\n      return this.filteredItems.length === 1 ? \'1 result\' : `${this.filteredItems.length} results`;\n    }\n  },\n  template: template(`\n    <template #toggle>\n      <gl-button class="gl-w-30">\n        <gl-truncate :text="customToggleText" />\n      </gl-button>\n    </template>\n    <template #list-item="{ item }">\n      <gl-truncate :text="item.text" :position="item.truncatePosition" />\n    </template>\n  `, {\n    label: `<span class="gl-my-0" id="listbox-label">Select the longest option</span>`,\n    bindingOverrides: {\n      \':items\': \'items\'\n    }\n  })\n})',...WithLongContent.parameters?.docs?.source}}}}}]);