"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[2365],{"./src/utils/stories_utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>disableControls});var disableControls=function(){var controls=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Object.fromEntries(controls.map(control=>[control,{control:{disable:!0}}]))}},"./src/components/base/icon/icon.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>icon_stories});var icons=__webpack_require__("./node_modules/@gitlab/svgs/dist/icons.json"),constants=__webpack_require__("./src/utils/constants.js"),stories_utils=__webpack_require__("./src/utils/stories_utils.js"),icon=__webpack_require__("./src/components/base/icon/icon.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var components={GlIcon:icon.default},Default=(args=>({components,props:Object.keys(args),template:'<gl-icon :name="name" :size="size" :aria-label="ariaLabel"/>'})).bind({});Default.args=function(){var{name="check-circle",size=32,ariaLabel="This is an icon"}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{name,size,ariaLabel}}();let icon_stories={title:"base/icon",component:icon.default,tags:["skip-visual-test"],parameters:{docs:{description:{component:'## Usage\n\nThe Icon component can be used to render any svg within the @gitlab/svgs icon sprites.\n\n### Accessibility\n\n`gl-icon` icons are hidden from screen readers by default, as usages of icons are commonly decorative.\n\nIf the icon is not decorative, add an `aria-label` attribute to `gl-icon` to give it an accessible name.\nThis label is read out by screen readers.\n\nIf the icon is clickable, use `gl-button` instead of `gl-icon` because a clickable element should\nsemantically be a button.\n\n```html\n<!-- icon, which is hidden from screen readers by default  -->\n<gl-icon name="rocket" />\n\n<!-- icon, which has an accessible name "Confidential issue" that is read out by screen readers -->\n<gl-icon name="eye-slash" :aria-label="__(\'Confidential issue\')" />\n\n<!-- clickable icon, which is borderless and padding-less -->\n<gl-button icon="close" category="tertiary" class="gl-p-0!" aria-label="Close" />\n```\n\nFor more information about icons within GitLab, visit the\n[GitLab accessibility guidelines](https://docs.gitlab.com/ee/development/fe_guide/accessibility#icons).\n'}}},argTypes:_objectSpread(_objectSpread({},(0,stories_utils.W)(["useDeprecatedSizes"])),{},{name:{options:icons.ci,control:"select"},size:{options:constants.RZ,control:"select"}})};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => ({\n  components,\n  props: Object.keys(args),\n  template\n})",...Default.parameters?.docs?.source}}}}}]);