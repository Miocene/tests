"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[3133],{"./src/components/base/filtered_search/filtered_search_suggestion_list.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>filtered_search_suggestion_list_stories});var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),filtered_search_suggestion_list=__webpack_require__("./src/components/base/filtered_search/filtered_search_suggestion_list.vue"),filtered_search_suggestion=__webpack_require__("./src/components/base/filtered_search/filtered_search_suggestion.vue"),common_story_options=__webpack_require__("./src/components/base/filtered_search/common_story_options.js");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){reject(error);return}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)})}}var Default=()=>({components:{GlFilteredSearchSuggestionList:filtered_search_suggestion_list.default,GlFilteredSearchSuggestion:filtered_search_suggestion.default},data:()=>({iteration:1,items:Array.from({length:5}).map((_,idx)=>"item-".concat(idx,"-iteration-1"))}),provide:common_story_options.provide,methods:{change(){this.iteration+=1,this.items=Array.from({length:3+Math.floor(5*Math.random())}).map((_,idx)=>"item-".concat(idx,"-iteration-").concat(this.iteration))}},template:'\n      <div>\n        <button @click="$refs.suggestions.prevItem()">prev</button>\n        <button @click="$refs.suggestions.nextItem()">next</button>\n        <button @click="change">replace suggestions in list</button>\n        <gl-filtered-search-suggestion-list ref="suggestions" style="float: none; position: relative;">\n          <gl-filtered-search-suggestion v-for="item in items" :key="item" :value="item">\n            {{item}}\n          </gl-filtered-search-suggestion>\n        </gl-filtered-search-suggestion-list>\n      </div>\n    '});Default.play=function(){var _ref2=_asyncToGenerator(function*(_ref){var{canvasElement}=_ref,button=(0,dist.uh)(canvasElement).getByRole("button",{name:"next"});yield dist.mV.click(button)});return function(_x){return _ref2.apply(this,arguments)}}();let filtered_search_suggestion_list_stories={title:"base/filtered-search/suggestion-list",component:filtered_search_suggestion_list.default,parameters:{docs:{description:{component:'The filtered search suggestion list component is responsible for managing underlying suggestion instances.\nYou obtain the ref for this component and manage suggestion selection via the component public API:\n\n- `getValue()` - Retrieves the current selected suggestion.\n- `nextItem()` - Selects the next suggestion. If last suggestion was selected, selection is cleared.\n- `prevItem()` - Selects the previous suggestion. If first suggestion was selected, selection is cleared.\n\n```html\n<gl-filtered-search-suggestion-list ref="suggestions">\n  <gl-filtered-search-suggestion value="foo">Example suggestion</gl-filtered-search-suggestion>\n  <gl-filtered-search-suggestion value="bar">Example suggestion 2</gl-filtered-search-suggestion>\n</gl-filtered-search-suggestion-list>\n```\n'}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'() => ({\n  components: {\n    GlFilteredSearchSuggestionList,\n    GlFilteredSearchSuggestion\n  },\n  data() {\n    return {\n      iteration: 1,\n      items: Array.from({\n        length: 5\n      }).map((_, idx) => `item-${idx}-iteration-1`)\n    };\n  },\n  provide,\n  methods: {\n    change() {\n      this.iteration += 1;\n      this.items = Array.from({\n        length: 3 + Math.floor(Math.random() * 5)\n      }).map((_, idx) => `item-${idx}-iteration-${this.iteration}`);\n    }\n  },\n  template: `\n      <div>\n        <button @click="$refs.suggestions.prevItem()">prev</button>\n        <button @click="$refs.suggestions.nextItem()">next</button>\n        <button @click="change">replace suggestions in list</button>\n        <gl-filtered-search-suggestion-list ref="suggestions" style="float: none; position: relative;">\n          <gl-filtered-search-suggestion v-for="item in items" :key="item" :value="item">\n            {{item}}\n          </gl-filtered-search-suggestion>\n        </gl-filtered-search-suggestion-list>\n      </div>\n    `\n})',...Default.parameters?.docs?.source}}}}}]);