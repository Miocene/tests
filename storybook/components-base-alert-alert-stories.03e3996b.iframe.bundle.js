"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[6807],{"./src/components/base/alert/alert.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomActions:()=>CustomActions,Default:()=>Default,IncreasedSpacing:()=>IncreasedSpacing,NoIcon:()=>NoIcon,Sticky:()=>Sticky,TextLinks:()=>TextLinks,TitledWarning:()=>TitledWarning,UndismissibleDangerWithActions:()=>UndismissibleDangerWithActions,Variants:()=>Variants,default:()=>alert_stories});var toggle=__webpack_require__("./src/components/base/toggle/toggle.vue"),constants=__webpack_require__("./src/utils/constants.js"),alert_alert=__webpack_require__("./src/components/base/alert/alert.vue"),template='\n  <gl-alert\n    :title="title"\n    :dismissible="dismissible"\n    :show-icon="showIcon"\n    :dismiss-label="dismissLabel"\n    :variant="variant"\n    :primary-button-text="primaryButtonText"\n    :secondary-button-text="secondaryButtonText"\n    :primary-button-link="primaryButtonLink"\n    :secondary-button-link="secondaryButtonLink"\n    :sticky="sticky"\n  >{{ message }}</gl-alert>',defaultValue=prop=>alert_alert.default.props[prop].default,generateProps=function(){var{title=defaultValue("title"),variant=defaultValue("variant"),dismissible=defaultValue("dismissible"),showIcon=defaultValue("showIcon"),dismissLabel=defaultValue("dismissLabel"),primaryButtonText=defaultValue("primaryButtonText"),primaryButtonLink=defaultValue("primaryButtonLink"),secondaryButtonText=defaultValue("secondaryButtonText"),secondaryButtonLink=defaultValue("secondaryButtonLink"),sticky=defaultValue("sticky")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{title,message:"Lorem ipsum dolor sit amet",variant,dismissible,showIcon,dismissLabel,primaryButtonText,primaryButtonLink,secondaryButtonText,secondaryButtonLink,sticky}},Template=(args,_ref)=>{var{argTypes}=_ref;return{components:{GlAlert:alert_alert.default},props:Object.keys(argTypes),template}},Default=Template.bind({});Default.args=generateProps();var TitledWarning=Template.bind({});TitledWarning.args=generateProps({title:"A warning",variant:constants.wx.warning});var UndismissibleDangerWithActions=Template.bind({});UndismissibleDangerWithActions.args=generateProps({variant:constants.wx.danger,dismissible:!1,primaryButtonText:"Primary action",secondaryButtonText:"Secondary action",secondaryButtonLink:"#"});var CustomActions=()=>({components:{GlAlert:alert_alert.default,GlToggle:toggle.default},data:()=>({toggle:!1}),template:'\n    <gl-alert>\n      Lorem ipsum dolor sit amet\n      <template #actions>\n        <gl-toggle v-model="toggle" label="label-name" label-position="hidden" />\n      </template>\n    </gl-alert>'});CustomActions.tags=["skip-visual-test"];var TextLinks=()=>({components:{GlAlert:alert_alert.default},template:'\n    <gl-alert>\n      Lorem ipsum dolor sit <a class="gl-link" href="#">text link</a> amet\n    </gl-alert>'});TextLinks.tags=["skip-visual-test"];var NoIcon=()=>({components:{GlAlert:alert_alert.default},template:'\n    <gl-alert :show-icon="false">\n      Lorem ipsum dolor sit amet\n    </gl-alert>'});NoIcon.tags=["skip-visual-test"];var Variants=()=>({components:{GlAlert:alert_alert.default},variants:constants.wx,template:'\n  <div>\n    <gl-alert\n      v-for="variant in $options.variants"\n      :key="variant"\n      :variant="variant"\n      title="Alert title"\n      primary-button-text="Primary"\n      secondary-button-text="Secondary"\n      class="mb-2"\n    >\n      <span class="text-capitalize">{{ variant }}</span> lorem ipsum dolor sit\n      <gl-link href="#">text link</gl-link> amet\n    </gl-alert>\n  </div>'});Variants.tags=["skip-visual-test"];var Sticky=()=>({components:{GlAlert:alert_alert.default},variants:constants.wx,data:()=>generateProps({sticky:!0}),template:'\n  <div style="max-height: 200px; overflow-y: auto;">\n    '.concat(template,'\n    <div style="height: 200px;" class="gl-bg-red-100 gl-my-3"><p>Scrolling content…</p></div>\n    <div style="height: 200px;" class="gl-bg-green-100 gl-my-3"><p>Scrolling content…</p></div>\n    <div style="height: 200px;" class="gl-bg-blue-100 gl-my-3"><p>Scrolling content…</p></div>\n  </div>')}),IncreasedSpacing=(args,_ref2)=>{var{argTypes}=_ref2;return{components:{GlAlert:alert_alert.default},props:Object.keys(argTypes),template:'\n    <div style="--gl-alert-padding-x: 0.5rem;">\n      <gl-alert>\n        Lorem ipsum dolor sit <a class="gl-link" href="#">text link</a> amet\n      </gl-alert>\n    </div>'}};IncreasedSpacing.args=generateProps();let alert_stories={title:"base/alert",component:alert_alert.default,parameters:{docs:{description:{component:'Alerts allow the application to pass along relevant system information to the\nuser without impeding their journey. Alerts are system generated and may or may\nnot be derived by a user’s action.\n\n## Dismissible alerts\n\nAlerts don\'t handle their own visibility, so it\'s the parent component\'s\nresponsbility to listen for the `dismiss` event and hide the alert in some way.\nFor example:\n\n```html\n<script>\n  ...\n  computed: {\n    shouldShowAlert() {\n      return !this.isAlertDismissed && this.someOtherCondition();\n    },\n  },\n  ...\n</script>\n\n<template>\n  ...\n  <gl-alert v-if="shouldShowAlert" @dismiss="isAlertDismissed = true">\n    An important message\n  </gl-alert>\n  ...\n</template>\n```\n\n## Sticky alerts\n\nAny alert can use `position: sticky`, however it should be limited to critical alerts where keeping\nthe alert visually in context is necessary or when alerts are injected into a page and might\notherwise go unnoticed.\n'}}},argTypes:{variant:{options:constants.wx,control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlAlert\n  },\n  props: Object.keys(argTypes),\n  template\n})",...Default.parameters?.docs?.source}}},TitledWarning.parameters={...TitledWarning.parameters,docs:{...TitledWarning.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlAlert\n  },\n  props: Object.keys(argTypes),\n  template\n})",...TitledWarning.parameters?.docs?.source}}},UndismissibleDangerWithActions.parameters={...UndismissibleDangerWithActions.parameters,docs:{...UndismissibleDangerWithActions.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlAlert\n  },\n  props: Object.keys(argTypes),\n  template\n})",...UndismissibleDangerWithActions.parameters?.docs?.source}}},CustomActions.parameters={...CustomActions.parameters,docs:{...CustomActions.parameters?.docs,source:{originalSource:'() => ({\n  components: {\n    GlAlert,\n    GlToggle\n  },\n  data: () => ({\n    toggle: false\n  }),\n  template: `\n    <gl-alert>\n      Lorem ipsum dolor sit amet\n      <template #actions>\n        <gl-toggle v-model="toggle" label="label-name" label-position="hidden" />\n      </template>\n    </gl-alert>`\n})',...CustomActions.parameters?.docs?.source}}},TextLinks.parameters={...TextLinks.parameters,docs:{...TextLinks.parameters?.docs,source:{originalSource:'() => ({\n  components: {\n    GlAlert\n  },\n  template: `\n    <gl-alert>\n      Lorem ipsum dolor sit <a class="gl-link" href="#">text link</a> amet\n    </gl-alert>`\n})',...TextLinks.parameters?.docs?.source}}},NoIcon.parameters={...NoIcon.parameters,docs:{...NoIcon.parameters?.docs,source:{originalSource:'() => ({\n  components: {\n    GlAlert\n  },\n  template: `\n    <gl-alert :show-icon="false">\n      Lorem ipsum dolor sit amet\n    </gl-alert>`\n})',...NoIcon.parameters?.docs?.source}}},Variants.parameters={...Variants.parameters,docs:{...Variants.parameters?.docs,source:{originalSource:'() => ({\n  components: {\n    GlAlert\n  },\n  variants: alertVariantOptions,\n  template: `\n  <div>\n    <gl-alert\n      v-for="variant in $options.variants"\n      :key="variant"\n      :variant="variant"\n      title="Alert title"\n      primary-button-text="Primary"\n      secondary-button-text="Secondary"\n      class="mb-2"\n    >\n      <span class="text-capitalize">{{ variant }}</span> lorem ipsum dolor sit\n      <gl-link href="#">text link</gl-link> amet\n    </gl-alert>\n  </div>`\n})',...Variants.parameters?.docs?.source}}},Sticky.parameters={...Sticky.parameters,docs:{...Sticky.parameters?.docs,source:{originalSource:'() => ({\n  components: {\n    GlAlert\n  },\n  variants: alertVariantOptions,\n  data: () => generateProps({\n    sticky: true\n  }),\n  template: `\n  <div style="max-height: 200px; overflow-y: auto;">\n    ${template}\n    <div style="height: 200px;" class="gl-bg-red-100 gl-my-3"><p>Scrolling content…</p></div>\n    <div style="height: 200px;" class="gl-bg-green-100 gl-my-3"><p>Scrolling content…</p></div>\n    <div style="height: 200px;" class="gl-bg-blue-100 gl-my-3"><p>Scrolling content…</p></div>\n  </div>`\n})',...Sticky.parameters?.docs?.source}}},IncreasedSpacing.parameters={...IncreasedSpacing.parameters,docs:{...IncreasedSpacing.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlAlert\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <div style="--gl-alert-padding-x: 0.5rem;">\n      <gl-alert>\n        Lorem ipsum dolor sit <a class="gl-link" href="#">text link</a> amet\n      </gl-alert>\n    </div>`\n})',...IncreasedSpacing.parameters?.docs?.source}}}}}]);