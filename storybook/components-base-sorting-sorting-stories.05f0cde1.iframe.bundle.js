"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[879],{"./src/utils/story_decorators/container.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>makeContainer});var makeContainer=function(style){var tag=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"div";return Story=>({render:h=>h(tag,{style},[h(Story())])})}},"./src/components/base/sorting/sorting.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>sorting_stories});var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),container=__webpack_require__("./src/utils/story_decorators/container.js"),sorting=__webpack_require__("./src/components/base/sorting/sorting.vue");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){reject(error);return}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)})}}var components={GlSorting:sorting.default},propDefault=prop=>sorting.default.props[prop].default,Default=(args=>({components,props:Object.keys(args),template:'\n  <gl-sorting\n    :text="text"\n    :sort-options="sortOptions"\n    :sort-by="sortBy"\n    :is-ascending="isAscending"\n    :sort-direction-tool-tip="sortDirectionToolTip"\n    :dropdown-class="dropdownClass"\n    :dropdown-toggle-class="dropdownToggleClass"\n    :sort-direction-toggle-class="sortDirectionToggleClass"\n  />\n'})).bind({});Object.assign(Default,{args:function(){var{text="Sorting options",sortOptions=propDefault("sortOptions"),sortBy=propDefault("sortBy"),isAscending=propDefault("isAscending"),sortDirectionToolTip=propDefault("sortDirectionToolTip"),dropdownClass=propDefault("dropdownClass"),dropdownToggleClass=propDefault("dropdownToggleClass"),sortDirectionToggleClass=propDefault("sortDirectionToggleClass")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{text,sortOptions,sortBy,isAscending,sortDirectionToolTip,dropdownClass,dropdownToggleClass,sortDirectionToggleClass}}({text:"",sortOptions:[{value:"first",text:"First item"},{value:"second",text:"Second item"},{value:"third",text:"Third item"}],sortBy:"first"}),parameters:{}}),Default.play=function(){var _ref2=_asyncToGenerator(function*(_ref){var{canvasElement}=_ref,canvas=(0,dist.uh)(canvasElement),button=canvas.getByTestId("base-dropdown-toggle");yield dist.mV.click(button),yield(0,dist.X_)(()=>(0,dist.l_)(canvas.getByRole("listbox")).toBeVisible())});return function(_x){return _ref2.apply(this,arguments)}}();let sorting_stories={title:"base/sorting",component:sorting.default,decorators:[(0,container.F)({height:"150px",display:"flex",justifyContent:"center",alignItems:"flex-start"})],parameters:{docs:{description:{component:"The sorting component allows the user to select the field on which they would like to sort a list\nand whether to sort in ascending or descending order.\n\nProvide a list of sort options via the `sortOptions` prop with this structure:\n\n```typescript\ntype sortOptionsProp = Array<{\n  value: string\n  text: string\n}>\n```\n\nThe `value` should be a unique primitive value, and `text` is the user-facing\nstring for that option.\n\nSet the currently selected sort option by passing a value to the `sortBy` prop.\nThis should equal one of the `sortOptions` values. The selected sort option is\nrendered with a check mark next to it in the dropdown menu.\n\nWhen the user changes the selected sort option, a `sortByChange` event is\nemitted, with the `value` of the option as the only payload.\n\nThe text of the dropdown trigger button is the `text` of the selected sort\noption. Pass a string to the `text` prop to override this behavior.\n\nWhen the user clicks on the sort direction button, a `sortDirectionChange`\nevent is emitted, with a boolean value as its only payload. If the payload is\n`true`, the new order is ascending; otherwise it's descending.\n\nA complete implementation example might look like:\n\n```html\n<template>\n  <gl-sorting\n    :sort-options=\"sortOptions\"\n    :sort-by=\"sortBy\"\n    :is-ascending=\"isAscending\"\n    @sortByChange=\"onSortByChange\"\n    @sortDirectionChange=\"onDirectionChange\"\n  />\n</template>\n\n<script>\nimport { GlSorting } from '@gitlab/ui';\n\nexport default {\n  components: {\n    GlSorting,\n  },\n  data() {\n    const sortOptions = [{\n      value: 'name',\n      text: 'Name',\n    }, {\n      value: 'date',\n      text: 'Date',\n    }];\n\n    return {\n      isAscending: false,\n      sortBy: sortOptions[0].value,\n      sortOptions,\n    }\n  },\n  methods: {\n    onSortByChange(value) {\n      this.sortBy = value;\n      this.sortMyData(this.sortBy, this.isAscending);\n    },\n    onDirectionChange(isAscending) {\n      this.isAscending = isAscending;\n      this.sortMyData(this.sortBy, this.isAscending);\n    },\n    sortMyData(sortBy, isAscending) {\n      // Use sortBy and direction to sort your data\n    },\n  }\n}\n</script>\n```\n"}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => ({\n  components,\n  props: Object.keys(args),\n  template\n})",...Default.parameters?.docs?.source}}}}}]);