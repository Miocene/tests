"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[590],{"./src/components/base/dropdown/dropdown.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,FullWidth:()=>FullWidth,IconOnly:()=>IconOnly,OnRightEdge:()=>OnRightEdge,Secondary:()=>Secondary,WithAvatarAndSecondaryText:()=>WithAvatarAndSecondaryText,WithCheckedItems:()=>WithCheckedItems,WithClearAll:()=>WithClearAll,WithDivider:()=>WithDivider,WithForm:()=>WithForm,WithHeaderAndFooter:()=>WithHeaderAndFooter,WithHighlightedItems:()=>WithHighlightedItems,WithIcons:()=>WithIcons,WithItemTextThatDoesNotWrap:()=>WithItemTextThatDoesNotWrap,WithLoadingState:()=>WithLoadingState,WithLongTextAndNarrowWidth:()=>WithLongTextAndNarrowWidth,WithSectionHeader:()=>WithSectionHeader,WithShortTextAndWideWidth:()=>WithShortTextAndWideWidth,default:()=>dropdown_stories});var icons=__webpack_require__("./node_modules/@gitlab/svgs/dist/icons.json"),avatar=__webpack_require__("./src/components/base/avatar/avatar.vue"),icon=__webpack_require__("./src/components/base/icon/icon.vue"),button_button=__webpack_require__("./src/components/base/button/button.vue"),search_box_by_type=__webpack_require__("./src/components/base/search_box_by_type/search_box_by_type.vue"),constants=__webpack_require__("./src/utils/constants.js"),dropdown_divider=__webpack_require__("./src/components/base/dropdown/dropdown_divider.vue"),dropdown_section_header=__webpack_require__("./src/components/base/dropdown/dropdown_section_header.vue"),dropdown_item=__webpack_require__("./src/components/base/dropdown/dropdown_item.vue"),dropdown_text=__webpack_require__("./src/components/base/dropdown/dropdown_text.vue"),dropdown_form=__webpack_require__("./src/components/base/dropdown/dropdown_form.vue"),dropdown=__webpack_require__("./src/components/base/dropdown/dropdown.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var components={GlAvatar:avatar.default,GlIcon:icon.default,GlDropdown:dropdown.default,GlDropdownDivider:dropdown_divider.default,GlDropdownSectionHeader:dropdown_section_header.default,GlDropdownItem:dropdown_item.default,GlDropdownText:dropdown_text.default,GlDropdownForm:dropdown_form.default};function addClass(component){component.$el.querySelectorAll(".btn").forEach(el=>el.classList.add("gl-button"))}var defaultValue=prop=>dropdown.default.props[prop].default,generateProps=function(){var{headerText=defaultValue("headerText"),hideHeaderBorder=defaultValue("hideHeaderBorder"),showClearAll=defaultValue("showClearAll"),clearAllText=defaultValue("clearAllText"),clearAllTextClass=defaultValue("clearAllTextClass"),text=defaultValue("text"),showHighlightedItemsTitle=defaultValue("showHighlightedItemsTitle"),highlightedItemsTitle=defaultValue("highlightedItemsTitle"),highlightedItemsTitleClass=defaultValue("highlightedItemsTitleClass"),textSrOnly=defaultValue("textSrOnly"),split=defaultValue("split"),category=defaultValue("category"),variant=defaultValue("variant"),size=defaultValue("size"),icon=defaultValue("icon"),block=defaultValue("block"),disabled=defaultValue("disabled"),loading=defaultValue("loading"),toggleClass=defaultValue("toggleClass"),right=defaultValue("right")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{headerText,hideHeaderBorder,showClearAll,clearAllText,clearAllTextClass,text,showHighlightedItemsTitle,highlightedItemsTitle,highlightedItemsTitleClass,textSrOnly,split,category,variant,size,icon,block,disabled,loading,toggleClass,right}},withContainer=function(template){var containerHeight=arguments.length>1&&void 0!==arguments[1]?arguments[1]:150;return'\n  <div style="height: '.concat(containerHeight,'px;">\n    ').concat(template,"\n  </div>")};function wrap(template,containerHeight,cssClass){return withContainer('\n    <gl-dropdown\n      ref="dropdown"\n      :category="category"\n      :variant="variant"\n      :size="size"\n      :block="block"\n      :disabled="disabled"\n      :text="text"\n      :text-sr-only="textSrOnly"\n      :icon="icon"\n      :split="split"\n      :toggle-class="toggleClass"\n      :header-text="headerText"\n      :hide-header-border="hideHeaderBorder"\n      :show-clear-all="showClearAll"\n      :clear-all-text="clearAllText"\n      :clear-all-text-class="clearAllTextClass"\n      :show-highlighted-items-title="showHighlightedItemsTitle"\n      :highlighted-items-title="highlightedItemsTitle"\n      :highlighted-items-title-class="highlightedItemsTitleClass"\n      :loading="loading"\n      :right="right"\n      class="'.concat(cssClass,'"\n    >\n      ').concat(template,"\n    </gl-dropdown>"),containerHeight)}function clickDropdown(component){component.$nextTick(()=>component.$el.querySelector(".dropdown-toggle").click())}var Default=(_args,_ref)=>{var{argTypes}=_ref;return{props:Object.keys(argTypes),components,template:wrap("\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>\n    <gl-dropdown-item>Fifth item</gl-dropdown-item>\n    <gl-dropdown-item>Sixth item</gl-dropdown-item>\n    <gl-dropdown-item>Seventh item</gl-dropdown-item>\n    <gl-dropdown-item>Eighth item</gl-dropdown-item>\n    <gl-dropdown-item>Ninth item</gl-dropdown-item>\n    <gl-dropdown-item>Tenth item</gl-dropdown-item>\n    <gl-dropdown-item>Eleventh item</gl-dropdown-item>",340),mounted(){clickDropdown(this)},updated(){addClass(this)}}};Default.args=generateProps({text:"Some dropdown"});var Secondary=(_args,_ref2)=>{var{argTypes}=_ref2;return{props:Object.keys(argTypes),components,template:wrap("\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Third item</gl-dropdown-item>"),mounted(){clickDropdown(this)},updated(){addClass(this)}}};Secondary.args=generateProps({text:"Some dropdown",category:constants.O7.secondary,variant:constants.Bv.confirm});var WithForm=(_args,_ref3)=>{var{argTypes}=_ref3;return{props:Object.keys(argTypes),components:_objectSpread(_objectSpread({},components),{},{GlButton:button_button.default}),template:wrap('\n    <gl-dropdown-form class="gl-px-4">\n      <gl-button>One</gl-button>\n      <gl-button>Two</gl-button>\n      <gl-button>Three</gl-button>\n    </gl-dropdown-form>'),mounted(){clickDropdown(this)}}};WithForm.args=generateProps({text:"Some dropdown"});var WithDivider=(args,_ref4)=>{var{argTypes}=_ref4;return{props:Object.keys(argTypes),components,template:wrap("\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-divider />\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>",200),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithDivider.args=generateProps({text:"Some dropdown"});var WithHeaderAndFooter=(args,_ref5)=>{var{argTypes}=_ref5;return{props:Object.keys(argTypes),components:_objectSpread(_objectSpread({},components),{},{GlSearchBoxByType:search_box_by_type.default}),template:wrap("\n    <template #header>\n      <gl-search-box-by-type />\n    </template>\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>\n    <gl-dropdown-item>Fifth item</gl-dropdown-item>\n    <gl-dropdown-item>Sixth item</gl-dropdown-item>\n    <gl-dropdown-item>Seventh item</gl-dropdown-item>\n    <gl-dropdown-item>Eighth item</gl-dropdown-item>\n    <template #footer>\n      <gl-dropdown-item>First footer item</gl-dropdown-item>\n      <gl-dropdown-item>Second footer item</gl-dropdown-item>\n    </template>",340),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithHeaderAndFooter.args=generateProps({text:"Some dropdown",headerText:"Header",hideHeaderBorder:!0});var WithSectionHeader=(args,_ref6)=>{var{argTypes}=_ref6;return{props:Object.keys(argTypes),components,template:wrap("\n    <gl-dropdown-section-header>Header title</gl-dropdown-section-header>\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-section-header>I am a really long header title which should wrap</gl-dropdown-section-header>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>",300),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithSectionHeader.args=generateProps({text:"Some dropdown"});var WithCheckedItems=(args,_ref7)=>{var{argTypes}=_ref7;return{props:Object.keys(argTypes),components,template:wrap('\n    <gl-dropdown-item :is-check-item="true" :is-checked="true">Checked item</gl-dropdown-item>\n    <gl-dropdown-item :is-check-item="true">Unchecked item</gl-dropdown-item>'),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithCheckedItems.args=generateProps({text:"Some dropdown"});var WithAvatarAndSecondaryText=(args,_ref8)=>{var{argTypes}=_ref8;return{props:Object.keys(argTypes),components,template:wrap('\n    <gl-dropdown-item\n      avatar-url="./img/avatar.png"\n      secondary-text="@sytses"\n    >\n      Sid Sijbrandij\n    </gl-dropdown-item>'),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithAvatarAndSecondaryText.args=generateProps({text:"Some dropdown"});var WithIcons=(args,_ref9)=>{var{argTypes}=_ref9;return{props:Object.keys(argTypes),components,template:wrap('\n    <gl-dropdown-item\n      icon-color="info"\n      icon-name="status_running"\n      icon-right-name="retry"\n      icon-right-aria-label="Retry"\n    >\n      Status running\n    </gl-dropdown-item>\n    <gl-dropdown-item\n      icon-color="success"\n      icon-name="status_success"\n      icon-right-name="cancel"\n      icon-right-aria-label="Cancel"\n    >\n      Status success\n    </gl-dropdown-item>\n    <gl-dropdown-item\n      icon-color="warning"\n      icon-name="status_warning"\n      icon-right-name="cancel"\n      icon-right-aria-label="Cancel"\n    >\n      Status warning\n    </gl-dropdown-item>\n    <gl-dropdown-item\n      icon-color="danger"\n      icon-name="status_failed"\n      icon-right-name="cancel"\n      icon-right-aria-label="Cancel"\n    >\n      Status failed\n    </gl-dropdown-item>\n    <gl-dropdown-item\n      icon-name="status_manual"\n      icon-right-name="cancel"\n      icon-right-aria-label="Cancel"\n    >\n      Status manual\n    </gl-dropdown-item>',200),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithIcons.args=generateProps({text:"Some dropdown"});var FullWidth=(args,_ref10)=>{var{argTypes}=_ref10;return{props:Object.keys(argTypes),components,template:wrap("\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Last item</gl-dropdown-item>"),mounted(){clickDropdown(this)},updated(){addClass(this)}}};FullWidth.args=generateProps({text:"Some dropdown",block:!0});var WithShortTextAndWideWidth=(args,_ref11)=>{var{argTypes}=_ref11;return{props:Object.keys(argTypes),components,template:withContainer('\n    <gl-dropdown\n      text="Some dropdown"\n      :category="category"\n      :variant="variant"\n      :size="size"\n      :block="block"\n      :disabled="disabled"\n      style="width: 300px;"\n    >\n      <gl-dropdown-item>First item</gl-dropdown-item>\n      <gl-dropdown-item>Last item</gl-dropdown-item>\n    </gl-dropdown>'),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithShortTextAndWideWidth.args=generateProps();var WithLongTextAndNarrowWidth=(args,_ref12)=>{var{argTypes}=_ref12;return{props:Object.keys(argTypes),components,template:withContainer('\n    <gl-dropdown\n      text="Truncated text dropdown"\n      :category="category"\n      :variant="variant"\n      :size="size"\n      :block="block"\n      :disabled="disabled"\n      style="width: 160px;"\n    >\n      <gl-dropdown-item>First item</gl-dropdown-item>\n      <gl-dropdown-item>Last item</gl-dropdown-item>\n    </gl-dropdown>'),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithLongTextAndNarrowWidth.args=generateProps({block:!0});var WithItemTextThatDoesNotWrap=(args,_ref13)=>{var{argTypes}=_ref13;return{props:Object.keys(argTypes),components,template:wrap('\n    <gl-dropdown-item icon-right-name="star" icon-right-aria-label="Some action">\n      Normal item\n    </gl-dropdown-item>\n    <gl-dropdown-item icon-right-name="star" icon-right-aria-label="Some action">\n      <div class="gl-text-truncate">ellipsis/should/truncate/this/item</div>\n    </gl-dropdown-item>'),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithItemTextThatDoesNotWrap.args=generateProps({text:"Some dropdown"});var IconOnly=(args,_ref14)=>{var{argTypes}=_ref14;return{props:Object.keys(argTypes),components,template:wrap("\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Last item</gl-dropdown-item>"),mounted(){clickDropdown(this)},updated(){addClass(this)}}};IconOnly.args=generateProps({icon:"ellipsis_v",text:"More actions",textSrOnly:!0});var WithLoadingState=(args,_ref15)=>{var{argTypes}=_ref15;return{props:Object.keys(argTypes),components,template:wrap("\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Last item</gl-dropdown-item>"),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithLoadingState.args=generateProps({text:"Some dropdown",loading:!0});var WithClearAll=(args,_ref16)=>{var{argTypes}=_ref16;return{props:Object.keys(argTypes),components,template:wrap('\n    <gl-dropdown-item :is-check-item="true" :is-checked="true">First item</gl-dropdown-item>\n    <gl-dropdown-item :is-check-item="true" :is-checked="true">Second item</gl-dropdown-item>\n    <gl-dropdown-item :is-check-item="true" :is-checked="true">Third item</gl-dropdown-item>'),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithClearAll.args=generateProps({text:"Some dropdown",showClearAll:!0,clearAllText:"Clear all",clearAllTextClass:"gl-px-5"});var WithHighlightedItems=(args,_ref17)=>{var{argTypes}=_ref17;return{props:Object.keys(argTypes),components,template:wrap('\n    <template #highlighted-items>\n      <gl-dropdown-item :is-check-item="true" :is-checked="true">First item</gl-dropdown-item>\n      <gl-dropdown-item :is-check-item="true" :is-checked="true">Second item</gl-dropdown-item>\n    </template>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>\n    ',200),mounted(){clickDropdown(this)},updated(){addClass(this)}}};WithHighlightedItems.args=generateProps({text:"Some dropdown",showHighlightedItemsTitle:!0,highlightedItemsTitle:"Highlights",highlightedItemsTitleClass:"gl-px-5"});var OnRightEdge=(args,_ref18)=>{var{argTypes}=_ref18;return{props:Object.keys(argTypes),components,template:wrap("\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>\n    ",200,"gl-display-block gl-text-right"),mounted(){clickDropdown(this)},updated(){addClass(this)}}};OnRightEdge.args=generateProps({text:"Some dropdown"});let dropdown_stories={title:"base/dropdown/deprecated",component:dropdown.default,subcomponents:{GlDropdownDivider:dropdown_divider.default,GlDropdownForm:dropdown_form.default,GlDropdownItem:dropdown_item.default,GlDropdownSectionHeader:dropdown_section_header.default,GlDropdownText:dropdown_text.default},parameters:{bootstrapComponent:"b-dropdown",docs:{description:{component:'The dropdown component offers a user multiple items or actions to choose from which are initially\ncollapsed behind a button.\n\n> **NOTE**: This component has been deprecated in favor of components\n> more suited to the various use cases for dropdowns. Consider using a more\n> appropriate component instead:\n>\n> - For single or multiselect options, use `GlCollapsibleListbox`.\n> - For displaying a list of actions like "Edit user", "Delete user", use `GlDisclosureDropdown`.\n>\n> See [Which component should you use?](https://design.gitlab.com/components/dropdown-overview#which-component-should-you-use)\n> for what to use and when.\n\n### Icon-only dropdown\n\nIcon-only dropdowns must have an accessible name.\nYou can provide this with the combination of `text` and `text-sr-only` props.\n\nOptionally, you can use `no-caret` to remove the caret and `category="tertiary"` to remove the border.\n\n```html\n<gl-dropdown\n  icon="ellipsis_v"\n  text="More actions"\n  :text-sr-only="true"\n  category="tertiary"\n  no-caret\n>\n```\n\n### Button Content\n\nThere are 3 ways to set the dropdown button\'s content.\n\n1. Use the `text` attribute. This will display the text with the loading spinner (shown with the\n`loading` attribute), icon (if provided by the `icon` attribute), and dropdown caret:\n\n    ```html\n    <gl-dropdown text="Button text">\n    ```\n\n1. Use the `button-text` template. This allows custom content for the button\'s text, but keeps the\nloading spinner, icon, and dropdown caret:\n\n    ```html\n    <gl-dropdown>\n      <template #button-text>\n        <!-- Loading spinner shown here -->\n        <!-- Icon shown here -->\n        Custom <strong>Content</strong> with <em>HTML</em> via Slot\n        <gl-truncate position="middle" text="Truncated button text"/>\n        <!-- Dropdown arrow shown here -->\n      </template>\n    </gl-dropdown>\n    ```\n\n1. Use the `button-content` template. This will replace everything in the button with the template:\n\n    ```html\n    <gl-dropdown>\n      <template #button-content>\n        Custom <strong>Content</strong> with <em>HTML</em> via Slot\n      </template>\n    </gl-dropdown>\n    ```\n\n### GlDropdownForm\n\nUnlike `b-dropdown-form`, we do _not_ add any additional padding with the `gl-dropdown-form` component.\nThis is to prevent double padding with `gl-dropdown-item` and similar components, so in most cases\nshouldn\'t be needed. To add padding, either add a padding utility class to your form, or an inner\nelement with some padding.\n'}}},argTypes:{category:{options:Object.keys(constants.O7),control:"select"},variant:{options:Object.keys(constants.Bv),control:"select"},size:{options:Object.keys(constants.td),control:"select"},icon:{options:icons.ci,control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>\n    <gl-dropdown-item>Fifth item</gl-dropdown-item>\n    <gl-dropdown-item>Sixth item</gl-dropdown-item>\n    <gl-dropdown-item>Seventh item</gl-dropdown-item>\n    <gl-dropdown-item>Eighth item</gl-dropdown-item>\n    <gl-dropdown-item>Ninth item</gl-dropdown-item>\n    <gl-dropdown-item>Tenth item</gl-dropdown-item>\n    <gl-dropdown-item>Eleventh item</gl-dropdown-item>`, 340),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})",...Default.parameters?.docs?.source}}},Secondary.parameters={...Secondary.parameters,docs:{...Secondary.parameters?.docs,source:{originalSource:"(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Third item</gl-dropdown-item>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})",...Secondary.parameters?.docs?.source}}},WithForm.parameters={...WithForm.parameters,docs:{...WithForm.parameters?.docs,source:{originalSource:'(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ...components,\n    GlButton\n  },\n  template: wrap(`\n    <gl-dropdown-form class="gl-px-4">\n      <gl-button>One</gl-button>\n      <gl-button>Two</gl-button>\n      <gl-button>Three</gl-button>\n    </gl-dropdown-form>`),\n  mounted() {\n    clickDropdown(this);\n  }\n})',...WithForm.parameters?.docs?.source}}},WithDivider.parameters={...WithDivider.parameters,docs:{...WithDivider.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-divider />\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>`, 200),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})",...WithDivider.parameters?.docs?.source}}},WithHeaderAndFooter.parameters={...WithHeaderAndFooter.parameters,docs:{...WithHeaderAndFooter.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ...components,\n    GlSearchBoxByType\n  },\n  template: wrap(`\n    <template #header>\n      <gl-search-box-by-type />\n    </template>\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>\n    <gl-dropdown-item>Fifth item</gl-dropdown-item>\n    <gl-dropdown-item>Sixth item</gl-dropdown-item>\n    <gl-dropdown-item>Seventh item</gl-dropdown-item>\n    <gl-dropdown-item>Eighth item</gl-dropdown-item>\n    <template #footer>\n      <gl-dropdown-item>First footer item</gl-dropdown-item>\n      <gl-dropdown-item>Second footer item</gl-dropdown-item>\n    </template>`, 340),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})",...WithHeaderAndFooter.parameters?.docs?.source}}},WithSectionHeader.parameters={...WithSectionHeader.parameters,docs:{...WithSectionHeader.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-section-header>Header title</gl-dropdown-section-header>\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-section-header>I am a really long header title which should wrap</gl-dropdown-section-header>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>`, 300),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})",...WithSectionHeader.parameters?.docs?.source}}},WithCheckedItems.parameters={...WithCheckedItems.parameters,docs:{...WithCheckedItems.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item :is-check-item="true" :is-checked="true">Checked item</gl-dropdown-item>\n    <gl-dropdown-item :is-check-item="true">Unchecked item</gl-dropdown-item>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})',...WithCheckedItems.parameters?.docs?.source}}},WithAvatarAndSecondaryText.parameters={...WithAvatarAndSecondaryText.parameters,docs:{...WithAvatarAndSecondaryText.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item\n      avatar-url="./img/avatar.png"\n      secondary-text="@sytses"\n    >\n      Sid Sijbrandij\n    </gl-dropdown-item>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})',...WithAvatarAndSecondaryText.parameters?.docs?.source}}},WithIcons.parameters={...WithIcons.parameters,docs:{...WithIcons.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item\n      icon-color="info"\n      icon-name="status_running"\n      icon-right-name="retry"\n      icon-right-aria-label="Retry"\n    >\n      Status running\n    </gl-dropdown-item>\n    <gl-dropdown-item\n      icon-color="success"\n      icon-name="status_success"\n      icon-right-name="cancel"\n      icon-right-aria-label="Cancel"\n    >\n      Status success\n    </gl-dropdown-item>\n    <gl-dropdown-item\n      icon-color="warning"\n      icon-name="status_warning"\n      icon-right-name="cancel"\n      icon-right-aria-label="Cancel"\n    >\n      Status warning\n    </gl-dropdown-item>\n    <gl-dropdown-item\n      icon-color="danger"\n      icon-name="status_failed"\n      icon-right-name="cancel"\n      icon-right-aria-label="Cancel"\n    >\n      Status failed\n    </gl-dropdown-item>\n    <gl-dropdown-item\n      icon-name="status_manual"\n      icon-right-name="cancel"\n      icon-right-aria-label="Cancel"\n    >\n      Status manual\n    </gl-dropdown-item>`, 200),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})',...WithIcons.parameters?.docs?.source}}},FullWidth.parameters={...FullWidth.parameters,docs:{...FullWidth.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Last item</gl-dropdown-item>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})",...FullWidth.parameters?.docs?.source}}},WithShortTextAndWideWidth.parameters={...WithShortTextAndWideWidth.parameters,docs:{...WithShortTextAndWideWidth.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: withContainer(`\n    <gl-dropdown\n      text="Some dropdown"\n      :category="category"\n      :variant="variant"\n      :size="size"\n      :block="block"\n      :disabled="disabled"\n      style="width: 300px;"\n    >\n      <gl-dropdown-item>First item</gl-dropdown-item>\n      <gl-dropdown-item>Last item</gl-dropdown-item>\n    </gl-dropdown>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})',...WithShortTextAndWideWidth.parameters?.docs?.source}}},WithLongTextAndNarrowWidth.parameters={...WithLongTextAndNarrowWidth.parameters,docs:{...WithLongTextAndNarrowWidth.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: withContainer(`\n    <gl-dropdown\n      text="Truncated text dropdown"\n      :category="category"\n      :variant="variant"\n      :size="size"\n      :block="block"\n      :disabled="disabled"\n      style="width: 160px;"\n    >\n      <gl-dropdown-item>First item</gl-dropdown-item>\n      <gl-dropdown-item>Last item</gl-dropdown-item>\n    </gl-dropdown>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})',...WithLongTextAndNarrowWidth.parameters?.docs?.source}}},WithItemTextThatDoesNotWrap.parameters={...WithItemTextThatDoesNotWrap.parameters,docs:{...WithItemTextThatDoesNotWrap.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item icon-right-name="star" icon-right-aria-label="Some action">\n      Normal item\n    </gl-dropdown-item>\n    <gl-dropdown-item icon-right-name="star" icon-right-aria-label="Some action">\n      <div class="gl-text-truncate">ellipsis/should/truncate/this/item</div>\n    </gl-dropdown-item>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})',...WithItemTextThatDoesNotWrap.parameters?.docs?.source}}},IconOnly.parameters={...IconOnly.parameters,docs:{...IconOnly.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Last item</gl-dropdown-item>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})",...IconOnly.parameters?.docs?.source}}},WithLoadingState.parameters={...WithLoadingState.parameters,docs:{...WithLoadingState.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Last item</gl-dropdown-item>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})",...WithLoadingState.parameters?.docs?.source}}},WithClearAll.parameters={...WithClearAll.parameters,docs:{...WithClearAll.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item :is-check-item="true" :is-checked="true">First item</gl-dropdown-item>\n    <gl-dropdown-item :is-check-item="true" :is-checked="true">Second item</gl-dropdown-item>\n    <gl-dropdown-item :is-check-item="true" :is-checked="true">Third item</gl-dropdown-item>`),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})',...WithClearAll.parameters?.docs?.source}}},WithHighlightedItems.parameters={...WithHighlightedItems.parameters,docs:{...WithHighlightedItems.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <template #highlighted-items>\n      <gl-dropdown-item :is-check-item="true" :is-checked="true">First item</gl-dropdown-item>\n      <gl-dropdown-item :is-check-item="true" :is-checked="true">Second item</gl-dropdown-item>\n    </template>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>\n    `, 200),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})',...WithHighlightedItems.parameters?.docs?.source}}},OnRightEdge.parameters={...OnRightEdge.parameters,docs:{...OnRightEdge.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-dropdown-item>First item</gl-dropdown-item>\n    <gl-dropdown-item>Second item</gl-dropdown-item>\n    <gl-dropdown-item>Third item</gl-dropdown-item>\n    <gl-dropdown-item>Fourth item</gl-dropdown-item>\n    `, 200, 'gl-display-block gl-text-right'),\n  mounted() {\n    clickDropdown(this);\n  },\n  updated() {\n    addClass(this);\n  }\n})",...OnRightEdge.parameters?.docs?.source}}}}}]);