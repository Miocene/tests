"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[6646],{"./src/components/charts/chart/chart.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Connected:()=>Connected,Default:()=>Default,Tab:()=>Tab,default:()=>chart_stories});var tabs=__webpack_require__("./src/components/base/tabs/tabs/tabs.vue"),tab=__webpack_require__("./src/components/base/tabs/tab/tab.vue"),chart=__webpack_require__("./src/components/charts/chart/chart.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var Template=(args,_ref)=>{var{argTypes={}}=_ref;return _objectSpread({components:{GlChart:chart.default,GlTabs:tabs.default,GlTab:tab.default},props:Object.keys(argTypes),data:()=>({options:{xAxis:{type:"category",data:["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]},yAxis:{type:"value"},series:[{data:[820,932,901,934,1290,1330,1320],type:"bar"}]}})},args)},Default=Template.bind({},{template:'\n      <gl-chart\n        :options="options"\n      />\n      '}),Tab=Template.bind({},{template:'\n      <gl-tabs>\n        <gl-tab title="Chart">\n          <gl-chart :options="options" />\n        </gl-tab>\n      </gl-tabs>\n      '}),Connected=Template.bind({},{methods:{optionsFromData:data=>({xAxis:{type:"category",data:["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]},yAxis:{type:"value"},axisPointer:{show:!0},series:[{data,type:"bar"}]})},template:'\n      <div>\n        <gl-chart\n          group-id="connected-chart-unique-id"\n          :options="optionsFromData([820, 932, 901, 934, 1290, 1330, 1320])"\n        />\n        <gl-chart\n          group-id="connected-chart-unique-id"\n          :options="optionsFromData([540, 759, 140, 757, 675, 1500, 457])"\n        />\n      </div>\n      '});Connected.tags=["skip-visual-test"];let chart_stories={title:"charts/chart",component:chart.default,parameters:{docs:{description:{component:"### ECharts Wrapper\n\nThe chart component is a Vue component wrapper around [Apache ECharts](https://echarts.apache.org/en/api.html#echarts).\nThe chart component accepts width and height props in order to allow the user to make it responsive.\n\n> Note: When implementing a chart type that does not already have a GitLab UI component, you can use\n> this component alonside the [ECharts options](https://echarts.apache.org/en/api.html#echarts) to\n> build your chart. Each type of chart should still follow the general guidelines in the\n> [pajamas documentation](https://design.gitlab.com/data-visualization/charts).\n\n### EChart Lifecycle\n\nThis component emits the following events during the ECharts lifecycle:\n\n- `created`: emitted after calling `echarts.init`\n- `updated`: emitted after calling `echarts.setOption`\n\nIn all cases, the event payload is the\n[echart instance](https://echarts.apache.org/en/api.html#echartsInstance).\n"}},controls:{disable:!0}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'Template.bind({}, {\n  template: `\n      <gl-chart\n        :options="options"\n      />\n      `\n})',...Default.parameters?.docs?.source}}},Tab.parameters={...Tab.parameters,docs:{...Tab.parameters?.docs,source:{originalSource:'Template.bind({}, {\n  template: `\n      <gl-tabs>\n        <gl-tab title="Chart">\n          <gl-chart :options="options" />\n        </gl-tab>\n      </gl-tabs>\n      `\n})',...Tab.parameters?.docs?.source}}},Connected.parameters={...Connected.parameters,docs:{...Connected.parameters?.docs,source:{originalSource:"Template.bind({}, {\n  methods: {\n    optionsFromData(data) {\n      return {\n        xAxis: {\n          type: 'category',\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n        },\n        yAxis: {\n          type: 'value'\n        },\n        axisPointer: {\n          show: true\n        },\n        series: [{\n          data,\n          type: 'bar'\n        }]\n      };\n    }\n  },\n  template: `\n      <div>\n        <gl-chart\n          group-id=\"connected-chart-unique-id\"\n          :options=\"optionsFromData([820, 932, 901, 934, 1290, 1330, 1320])\"\n        />\n        <gl-chart\n          group-id=\"connected-chart-unique-id\"\n          :options=\"optionsFromData([540, 759, 140, 757, 675, 1500, 457])\"\n        />\n      </div>\n      `\n})",...Connected.parameters?.docs?.source}}}}}]);