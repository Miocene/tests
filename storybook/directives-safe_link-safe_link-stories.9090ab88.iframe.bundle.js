"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[2948],{"./src/directives/safe_link/safe_link.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>safe_link_stories});var safe_link=__webpack_require__("./src/directives/safe_link/safe_link.js"),directives={SafeLink:safe_link.SafeLinkDirective},Default=(_args,_ref)=>{var{argTypes}=_ref;return{props:Object.keys(argTypes),directives,template:'\n    <a\n      :href="href"\n      :target="target"\n      v-safe-link\n    >\n      This is a secure link\n    </a>'}};Default.args=function(){var{href="javascript:alert(1)",target="_blank"}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{href,target}}();let safe_link_stories={title:"directives/safe-link-directive",component:safe_link.SafeLinkDirective,tags:["skip-visual-test"],parameters:{docs:{description:{component:'A Vue directive to make the hyperlinks secure by default.\n\n## Security measures\n\n### rel\n\nWhen setting target to `_blank`, the rel attribute gets set automatically to `noopener noreferrer`,\nthis is done to avoid the `window.opener` [API exploit]. If you set the `rel` attribute manually,\nthis will overwrite the aforementioned logic.\n\n### href\n\nThis directive enforces "safe" URLs. What this means is that, if the provided `href`\ndoesn\'t point to a safe protocol (one of `http:`, `https:`, `mailto:` or `ftp:`), then it is\nreplaced with `about:blank` to prevent [URL injections].\n\n```html\n<script>\nimport { GlSafeLinkDirective as SafeLink } from \'@gitlab/ui\';\n\nexport default {\n  data() {\n    return {\n      url: \'javascript:alert(1)\',\n    };\n  },\n  directives: { SafeLink },\n};\n</script>\n<template>\n  <a v-safe-link href="url" target="_blank">Click</a>\n  <!-- Renders to: <a href="about:blank" target="_blank">Click</a> -->\n</template>\n```\n\n[API exploit]: https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/\n[URL injections]: https://vuejs.org/v2/guide/security.html#Injecting-URLs\n'}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  directives,\n  template: `\n    <a\n      :href="href"\n      :target="target"\n      v-safe-link\n    >\n      This is a secure link\n    </a>`\n})',...Default.parameters?.docs?.source}}}}}]);