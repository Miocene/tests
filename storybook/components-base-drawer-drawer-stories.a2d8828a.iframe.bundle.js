"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[933],{"./src/components/base/drawer/drawer.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,SidebarVariant:()=>SidebarVariant,StickyHeaderFooter:()=>StickyHeaderFooter,WithActions:()=>WithActions,WithScrimAndStaticContent:()=>WithScrimAndStaticContent,WithStickyFooter:()=>WithStickyFooter,WithStickyFooterShortContent:()=>WithStickyFooterShortContent,default:()=>drawer_stories});var button_button=__webpack_require__("./src/components/base/button/button.vue"),markdown=__webpack_require__("./src/components/base/markdown/markdown.vue"),constants=__webpack_require__("./src/utils/constants.js"),drawer=__webpack_require__("./src/components/base/drawer/drawer.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var components={GlDrawer:drawer.default,GlButton:button_button.default,GlMarkdown:markdown.default},generateStaticContent=function(){var number=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return Array.from(Array(number),(_,index)=>'\n      <div class="gl-mb-8">\n        <h4 class="gl-mb-4">View jobs in a pipeline '.concat(index,'</h4>\n        <p>\n          Pipeline configuration begins with jobs. Jobs are the most fundamental element of a .gitlab-ci.yml file.\n        </p>\n        <p>Jobs are:</p>\n        <ul>\n          <li>Defined with constraints stating under what conditions they should be executed. </li>\n          <li>Top-level elements with an arbitrary name and must contain at least the script clause.</li>\n          <li>Not limited in how many can be defined.</li>\n        </ul>\n        <p>For example:</p>\n        <gl-markdown compact>\n          <code>job1: script: "execute-script-for-job1"</code>\n          <br />\n          <code>job2: script: "execute-script-for-job2"</code>\n        </gl-markdown>\n      </div>\n    ')).join("")},generateDrawerContent=items=>items.map(str=>'\n    <div>\n      <label class="gl-font-weight-bold">'.concat(str,"</label>\n      <div>None</div>\n    </div>\n    ")).join(""),drawerContent=generateDrawerContent(["One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen"]),drawerContentShortList=generateDrawerContent(["One","Two","Three"]),createSidebarTemplate=function(content){var{extraBindings={}}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return'\n  <gl-drawer\n    :open="open"\n    :header-height="headerHeight"\n    :header-sticky="headerSticky"\n    :z-index="zIndex"\n    :variant="variant"\n    '.concat(Object.entries(extraBindings).map(_ref=>{var[key,value]=_ref;return"".concat(key,'="').concat(value,'"')}).join("\n"),'\n    @close="close">').concat(content,"</gl-drawer>\n  ")},defaultValue=prop=>drawer.default.props[prop].default,generateProps=function(){var{headerHeight=defaultValue("headerHeight"),headerSticky=defaultValue("headerSticky"),zIndex=defaultValue("zIndex"),variant=defaultValue("variant")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{headerHeight,headerSticky,zIndex,variant}},storyOptions=viewMode=>({props:Object.keys(generateProps()),components,methods:{toggle(){this.open=!this.open},close(){this.open=!1}},data:()=>({open:"docs"!==viewMode})}),Default=(_args,_ref2)=>{var{viewMode}=_ref2;return _objectSpread(_objectSpread({mixins:[{data:()=>({timesOpened:0}),methods:{opened(){this.timesOpened+=1}}}]},storyOptions(viewMode)),{},{template:'\n    <div :data-opened-count="timesOpened">\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      '.concat(createSidebarTemplate("\n        <template #title>List Settings</template>\n        ".concat(drawerContent,"\n      "),{extraBindings:{"@opened":"opened"}}),"\n    </div>")})};Default.args=generateProps();var WithActions=(_args,_ref3)=>{var{viewMode}=_ref3;return _objectSpread(_objectSpread({},storyOptions(viewMode)),{},{template:'\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      '.concat(createSidebarTemplate('\n          <template #title>\n          <h3>custom-network-policy multiple lines headline</h3>\n        </template>\n        <template #header>\n            <div class="gl-mt-5">\n              <gl-button variant="confirm">Save</gl-button>\n              <gl-button class="gl-ml-3" @click="toggle">Cancel</gl-button>\n            </div>\n        </template>\n          '.concat(drawerContent,"\n      ")),"\n    </div>")})};WithActions.args=generateProps();var WithStickyFooterShortContent=(_args,_ref4)=>{var{viewMode}=_ref4;return _objectSpread(_objectSpread({},storyOptions(viewMode)),{},{template:'\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      '.concat(createSidebarTemplate("\n        <template #title>List Settings</template>\n        ".concat(drawerContentShortList,"\n        <template #footer>\n          Drawer footer\n        </template>\n      ")),"\n    </div>")})};WithStickyFooterShortContent.args=generateProps();var WithStickyFooter=(_args,_ref5)=>{var{viewMode}=_ref5;return _objectSpread(_objectSpread({},storyOptions(viewMode)),{},{template:'\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      '.concat(createSidebarTemplate("\n        <template #title>List Settings</template>\n        ".concat(drawerContent,"\n        <template #footer>\n          Drawer footer\n        </template>\n      ")),"\n    </div>")})};WithStickyFooter.args=generateProps();var WithScrimAndStaticContent=(_args,_ref6)=>{var{viewMode}=_ref6;return _objectSpread(_objectSpread({},storyOptions(viewMode)),{},{template:'\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      '.concat(createSidebarTemplate("\n        <template #title>List Settings</template>\n        <div>\n          ".concat(generateStaticContent(3),"\n        </div>\n      ")),"\n    </div>")})};WithScrimAndStaticContent.args=generateProps({headerSticky:!0});var SidebarVariant=(_args,_ref7)=>{var{viewMode}=_ref7;return _objectSpread(_objectSpread({},storyOptions(viewMode)),{},{template:'\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      '.concat(createSidebarTemplate('\n        <template #title>\n          <h3>Sidebar</h3>\n        </template>\n        <template #header>\n          <div class="gl-mt-5">\n            <gl-button>Action</gl-button>\n          </div>\n        </template>\n        '.concat(drawerContent,"\n      ")),"\n    </div>")})};SidebarVariant.args=generateProps({variant:constants.GD.sidebar});var StickyHeaderFooter=(_args,_ref8)=>{var{viewMode}=_ref8;return _objectSpread(_objectSpread({},storyOptions(viewMode)),{},{template:'\n  <div>\n    <gl-button @click="toggle">Toggle Drawer</gl-button>\n    '.concat(createSidebarTemplate("\n      <template #title>List Settings</template>\n      ".concat(drawerContent,"\n      <template #footer>\n         Drawer footer\n      </template>\n    ")),"\n  </div>")})};StickyHeaderFooter.args=generateProps({headerSticky:!0});let drawer_stories={title:"base/drawer",component:drawer.default,argTypes:{open:{control:!1},variant:{options:Object.keys(constants.GD),control:"select"}},parameters:{docs:{description:{component:'The drawer is used to show more information about a certain resource in the UI and potentially\nhandle actions on the information.\n\n### By default\n\n```html\n<gl-drawer :open="open" @close="close" @opened="opened">\n  <template #header>Your Title</template>\n  <template>\n   ...children\n  </template>\n</gl-drawer>\n```\n\n- `v-bind:open` will be a boolean you will pass to `gl-drawer` and `@close` is a listener that will\nbe a function that will toggle open to `false`.\n- The component emits an `opened` event after the opening animation has finished.\n'}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(_args, {\n  viewMode\n}) => ({\n  mixins: [{\n    data() {\n      return {\n        timesOpened: 0\n      };\n    },\n    methods: {\n      opened() {\n        this.timesOpened += 1;\n      }\n    }\n  }],\n  ...storyOptions(viewMode),\n  template: `\n    <div :data-opened-count=\"timesOpened\">\n      <gl-button @click=\"toggle\">Toggle Drawer</gl-button>\n      ${createSidebarTemplate(`\n        <template #title>List Settings</template>\n        ${drawerContent}\n      `, {\n    extraBindings: {\n      '@opened': 'opened'\n    }\n  })}\n    </div>`\n})",...Default.parameters?.docs?.source}}},WithActions.parameters={...WithActions.parameters,docs:{...WithActions.parameters?.docs,source:{originalSource:'(_args, {\n  viewMode\n}) => ({\n  ...storyOptions(viewMode),\n  template: `\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      ${createSidebarTemplate(`\n          <template #title>\n          <h3>custom-network-policy multiple lines headline</h3>\n        </template>\n        <template #header>\n            <div class="gl-mt-5">\n              <gl-button variant="confirm">Save</gl-button>\n              <gl-button class="gl-ml-3" @click="toggle">Cancel</gl-button>\n            </div>\n        </template>\n          ${drawerContent}\n      `)}\n    </div>`\n})',...WithActions.parameters?.docs?.source}}},WithStickyFooterShortContent.parameters={...WithStickyFooterShortContent.parameters,docs:{...WithStickyFooterShortContent.parameters?.docs,source:{originalSource:'(_args, {\n  viewMode\n}) => ({\n  ...storyOptions(viewMode),\n  template: `\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      ${createSidebarTemplate(`\n        <template #title>List Settings</template>\n        ${drawerContentShortList}\n        <template #footer>\n          Drawer footer\n        </template>\n      `)}\n    </div>`\n})',...WithStickyFooterShortContent.parameters?.docs?.source}}},WithStickyFooter.parameters={...WithStickyFooter.parameters,docs:{...WithStickyFooter.parameters?.docs,source:{originalSource:'(_args, {\n  viewMode\n}) => ({\n  ...storyOptions(viewMode),\n  template: `\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      ${createSidebarTemplate(`\n        <template #title>List Settings</template>\n        ${drawerContent}\n        <template #footer>\n          Drawer footer\n        </template>\n      `)}\n    </div>`\n})',...WithStickyFooter.parameters?.docs?.source}}},WithScrimAndStaticContent.parameters={...WithScrimAndStaticContent.parameters,docs:{...WithScrimAndStaticContent.parameters?.docs,source:{originalSource:'(_args, {\n  viewMode\n}) => ({\n  ...storyOptions(viewMode),\n  template: `\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      ${createSidebarTemplate(`\n        <template #title>List Settings</template>\n        <div>\n          ${generateStaticContent(3)}\n        </div>\n      `)}\n    </div>`\n})',...WithScrimAndStaticContent.parameters?.docs?.source}}},SidebarVariant.parameters={...SidebarVariant.parameters,docs:{...SidebarVariant.parameters?.docs,source:{originalSource:'(_args, {\n  viewMode\n}) => ({\n  ...storyOptions(viewMode),\n  template: `\n    <div>\n      <gl-button @click="toggle">Toggle Drawer</gl-button>\n      ${createSidebarTemplate(`\n        <template #title>\n          <h3>Sidebar</h3>\n        </template>\n        <template #header>\n          <div class="gl-mt-5">\n            <gl-button>Action</gl-button>\n          </div>\n        </template>\n        ${drawerContent}\n      `)}\n    </div>`\n})',...SidebarVariant.parameters?.docs?.source}}},StickyHeaderFooter.parameters={...StickyHeaderFooter.parameters,docs:{...StickyHeaderFooter.parameters?.docs,source:{originalSource:'(_args, {\n  viewMode\n}) => ({\n  ...storyOptions(viewMode),\n  template: `\n  <div>\n    <gl-button @click="toggle">Toggle Drawer</gl-button>\n    ${createSidebarTemplate(`\n      <template #title>List Settings</template>\n      ${drawerContent}\n      <template #footer>\n         Drawer footer\n      </template>\n    `)}\n  </div>`\n})',...StickyHeaderFooter.parameters?.docs?.source}}}}}]);