"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[6715],{"./src/components/base/path/path.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllOptions:()=>AllOptions,Default:()=>Default,WithPopovers:()=>WithPopovers,default:()=>path_stories});var popover=__webpack_require__("./src/components/base/popover/popover.vue"),constants=__webpack_require__("./src/utils/constants.js"),path=__webpack_require__("./src/components/base/path/path.vue"),data=__webpack_require__("./src/components/base/path/data.js"),defaultValue=prop=>path.default.props[prop].default,generateProps=function(){var{theme=defaultValue("theme"),items=data.mockPathItems,backgroundColor=defaultValue("backgroundColor")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{theme,items,backgroundColor}},template=function(){var slot=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return'\n  <gl-path :items="items" :theme="theme" :background-color="backgroundColor">\n    '.concat(slot,"\n  </gl-path>")},Default=(args,_ref)=>{var{argTypes}=_ref;return{components:{GlPath:path.default},props:Object.keys(argTypes),template:template()}};Default.args=generateProps();var WithPopovers=(args,_ref2)=>{var{argTypes}=_ref2;return{components:{GlPath:path.default,GlPopover:popover.default},props:Object.keys(argTypes),template:template('\n    <template #default="{ pathItem, pathId }">\n      <gl-popover triggers="hover" placement="bottom" :target="pathId">\n        <template #title>\n          {{ pathItem.title }}\n        </template>\n        {{ pathItem.metric }}\n      </gl-popover>\n    </template>')}};WithPopovers.args=generateProps();var AllOptions=()=>({components:{GlPath:path.default},data:()=>({items:[{title:"First",metric:"14d",icon:"home"},{title:"Second",metric:"2d"}]}),template:'<gl-path :items="items" />'});AllOptions.parameters={controls:{disable:!0}};let path_stories={title:"base/path",component:path.default,parameters:{docs:{description:{component:"## Usage\n\nPaths are horizontal process flows composed of a series of \"stages\".\nLike tabs, paths let users focus in on specific content at each stage\nwhilst still keeping all the other stages in view. Only one stage can\nbe active at a given time.\n\n### Implemetation\n\nThe component should be initialized with an array of data objects. By\ndefault, the first item in the array will be selected. This can be\noverridden by passing in an object with the selected property set to\ntrue.\n\n```js\nitems: [\n  {\n    title: 'First',\n  },\n  {\n    title: 'Second',\n    selected: true\n  },\n  ...\n```\n\nOnce an item has been selected the `selected` event will be emitted.\nThe emitted event will include the entire object at the selected index.\n\n#### Customization\n\nAdditional attributes can be configured via the `items` object. Currently\nsupport for `metric` and `icon` are provided. Please see the individual\nexamples for further information on these.\n\n### Additional information\n\nA `backgroundColor` property can be specified when using this component\non different colored backgrounds.\n\nThis component supports various themes and is mobile responsive.\n"}}},argTypes:{theme:{options:constants.Fb,control:"select"},backgroundColor:{control:"color"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlPath\n  },\n  props: Object.keys(argTypes),\n  template: template()\n})",...Default.parameters?.docs?.source}}},WithPopovers.parameters={...WithPopovers.parameters,docs:{...WithPopovers.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlPath,\n    GlPopover\n  },\n  props: Object.keys(argTypes),\n  template: template(`\n    <template #default="{ pathItem, pathId }">\n      <gl-popover triggers="hover" placement="bottom" :target="pathId">\n        <template #title>\n          {{ pathItem.title }}\n        </template>\n        {{ pathItem.metric }}\n      </gl-popover>\n    </template>`)\n})',...WithPopovers.parameters?.docs?.source}}},AllOptions.parameters={...AllOptions.parameters,docs:{...AllOptions.parameters?.docs,source:{originalSource:"() => ({\n  components: {\n    GlPath\n  },\n  data: () => ({\n    items: [{\n      title: 'First',\n      metric: '14d',\n      icon: 'home'\n    }, {\n      title: 'Second',\n      metric: '2d'\n    }]\n  }),\n  template: `<gl-path :items=\"items\" />`\n})",...AllOptions.parameters?.docs?.source}}}}}]);