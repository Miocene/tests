"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[4969],{"./src/components/base/table_lite/table_lite.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>table_lite_stories});var table_lite=__webpack_require__("./src/components/base/table_lite/table_lite.vue"),fieldsMock=[{key:"column_one",label:"First column",thClass:"w-60p",tdClass:"table-col"},{key:"column_two",label:"Second column",thClass:"w-60p",tdClass:"table-col"}],tableItemsMock=[{column_one:"test",column_two:1234},{column_one:"test2",column_two:5678},{column_one:"test3",column_two:9101}],Default=((args,_ref)=>{var{argTypes}=_ref;return{components:{GlTableLite:table_lite.default},props:Object.keys(argTypes),template:'\n    <gl-table-lite\n    :sticky-header="stickyHeader"\n    :items="items"\n    :fields="fields" />\n  '}}).bind({});Default.args=function(){var{stickyHeader=!1,items=tableItemsMock,fields=fieldsMock}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{stickyHeader,items,fields}}();let table_lite_stories={title:"base/table/table_lite",component:table_lite.default,parameters:{docs:{description:{component:"## Usage\n\nThe `GlTableLite` component wraps BootstrapVue `BTableLite` component.\n`BTableLite` provides a variety of slots for custom data rendering. You can learn\nmore about them in the\n[component documentation](https://bootstrap-vue.org/docs/components/table#light-weight-tables).\n\n## `GlTable` vs. `GlTableLite`\n\n`GlTableLite` adds less payload to the pagebundle than `GlTable`.\nWhen possible `GlTableLite` should be preferred over `GlTable`.\n\nThe `GlTableLite` component provides all of the styling and formatting features of\n`GlTable` (including row details and stacked support), while excluding the following features:\n\n- Filtering\n- Sorting\n- Pagination\n- Items provider support\n- Selectable rows\n- Busy table state and styling\n- Fixed top and bottom rows\n- Empty row support\n\n## Internationalization\n\nTo ensure we internationalize field labels, always pass an array of objects for the `fields` prop,\nlike mentioned in the implementation example.\n\n_Full documentation for the `field` prop [here.](https://bootstrap-vue.org/docs/components/table#fields-column-definitions)_\n\n## Implementation example\n\n```html\n<script>\nexport default {\n  fields: [\n    {\n      key: 'column_one',\n      label: __('First column'),\n      thClass: 'w-60p',\n      tdClass: 'table-col d-flex'\n    },\n    {\n      key: 'col_2',\n      label: __('Second column'),\n      thClass: 'w-15p',\n      tdClass: 'table-col d-flex'\n    },\n  ];\n}\n</script>\n<template>\n  <gl-table-lite\n    :items=\"items\"\n    :fields=\"$options.fields\"\n  >\n    <template #head(column_one)>\n      <div>First column</div><!-- This is the column head for the first object in `fields` -->\n    </template>\n\n    <template #cell(column_one)>\n      This is the template for column data belonging to the first object\n    </template>\n\n  </gl-table-lite>\n</template>\n```\n"}}},argTypes:{stickyHeader:{options:[!1,!0],control:"boolean"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlTableLite\n  },\n  props: Object.keys(argTypes),\n  template: `\n    <gl-table-lite\n    :sticky-header="stickyHeader"\n    :items="items"\n    :fields="fields" />\n  `\n})',...Default.parameters?.docs?.source}}}}}]);