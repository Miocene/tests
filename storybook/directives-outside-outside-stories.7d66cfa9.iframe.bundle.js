"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[5770],{"./src/directives/outside/outside.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>outside_stories});var button_button=__webpack_require__("./src/components/base/button/button.vue"),outside=__webpack_require__("./src/directives/outside/outside.js"),Default=()=>({components:{GlButton:button_button.default},directives:{outside:outside.default},data:()=>({clicks:0}),methods:{onClick(){this.clicks+=1}},template:'<gl-button v-outside="onClick">Clicks outside me: {{ clicks }}</gl-button>'});Default.tags=["skip-visual-test"];let outside_stories={title:"directives/outside-directive",component:outside.default,parameters:{docs:{description:{component:"A Vue Directive to call a callback when a click occurs *outside* of the element\nthe directive is bound to. Any clicks on the element or any descendant elements are ignored.\n\n## Usage\n\n```html\n<script>\nimport { GlOutsideDirective as Outside } from '@gitlab/ui';\n\nexport default {\n  directives: { Outside },\n  methods: {\n    onClick(event) {\n      console.log('User clicked somewhere outside of this component', event);\n    },\n  },\n};\n</script>\n\n<template>\n  <div v-outside=\"onClick\">Click anywhere but here</div>\n</template>\n```\n\n### When handler expects arguments\n\nIn case a click handler expects an arument to be passed, simple `v-outside=\"onClick('foo')\"` will\ninvoke the handler instantly when mounting the component and the directive won't be active. The\nsimplest solution to pass the arguments to the directive is to wrap the handler into an anonumous\nfunction.\n\n```html\n<script>\nimport { GlOutsideDirective as Outside } from '@gitlab/ui';\n\nexport default {\n  directives: { Outside },\n  methods: {\n    onClick(foo) {\n      // This\n    },\n  },\n};\n</script>\n\n<template>\n  <div v-outside=\"() => onClick('foo')\">Click anywhere but here</div>\n</template>\n```\n\n## Caveats\n\n- If a click event is stopped (e.g., via `event.stopPropagation()`) before it\n  bubbles up to the `document`, it cannot be detected by `GlOutsideDirective`.\n- Clicks cannot be detected across document boundaries (e.g., across an\n  `iframe` boundary), in either direction.\n"}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'() => ({\n  components: {\n    GlButton\n  },\n  directives: {\n    outside: GlOutsideDirective\n  },\n  data: () => ({\n    clicks: 0\n  }),\n  methods: {\n    onClick() {\n      this.clicks += 1;\n    }\n  },\n  template: `<gl-button v-outside="onClick">Clicks outside me: {{ clicks }}</gl-button>`\n})',...Default.parameters?.docs?.source}}}}}]);