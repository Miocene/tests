(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[1613],{"./node_modules/lodash/_baseUnset.js":(module,__unused_webpack_exports,__webpack_require__)=>{var castPath=__webpack_require__("./node_modules/lodash/_castPath.js"),last=__webpack_require__("./node_modules/lodash/last.js"),parent=__webpack_require__("./node_modules/lodash/_parent.js"),toKey=__webpack_require__("./node_modules/lodash/_toKey.js");function baseUnset(object,path){return path=castPath(path,object),null==(object=parent(object,path))||delete object[toKey(last(path))]}module.exports=baseUnset},"./node_modules/lodash/_customOmitClone.js":(module,__unused_webpack_exports,__webpack_require__)=>{var isPlainObject=__webpack_require__("./node_modules/lodash/isPlainObject.js");function customOmitClone(value){return isPlainObject(value)?void 0:value}module.exports=customOmitClone},"./node_modules/lodash/_parent.js":(module,__unused_webpack_exports,__webpack_require__)=>{var baseGet=__webpack_require__("./node_modules/lodash/_baseGet.js"),baseSlice=__webpack_require__("./node_modules/lodash/_baseSlice.js");function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1))}module.exports=parent},"./node_modules/lodash/omit.js":(module,__unused_webpack_exports,__webpack_require__)=>{var arrayMap=__webpack_require__("./node_modules/lodash/_arrayMap.js"),baseClone=__webpack_require__("./node_modules/lodash/_baseClone.js"),baseUnset=__webpack_require__("./node_modules/lodash/_baseUnset.js"),castPath=__webpack_require__("./node_modules/lodash/_castPath.js"),copyObject=__webpack_require__("./node_modules/lodash/_copyObject.js"),customOmitClone=__webpack_require__("./node_modules/lodash/_customOmitClone.js"),flatRest=__webpack_require__("./node_modules/lodash/_flatRest.js"),getAllKeysIn=__webpack_require__("./node_modules/lodash/_getAllKeysIn.js"),omit=flatRest(function(object,paths){var result={};if(null==object)return result;var isDeep=!1;paths=arrayMap(paths,function(path){return path=castPath(path,object),isDeep||(isDeep=path.length>1),path}),copyObject(object,getAllKeysIn(object),result),isDeep&&(result=baseClone(result,7,customOmitClone));for(var length=paths.length;length--;)baseUnset(result,paths[length]);return result});module.exports=omit},"./src/components/base/form/form_fields/form_fields.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>form_fields_stories});var uniqueId=__webpack_require__("./node_modules/lodash/uniqueId.js"),uniqueId_default=__webpack_require__.n(uniqueId),omit=__webpack_require__("./node_modules/lodash/omit.js"),omit_default=__webpack_require__.n(omit),modal=__webpack_require__("./src/components/base/modal/modal.vue"),button_button=__webpack_require__("./src/components/base/button/button.vue"),alert_alert=__webpack_require__("./src/components/base/alert/alert.vue"),listbox=__webpack_require__("./src/components/base/new_dropdowns/listbox/listbox.vue"),icon=__webpack_require__("./src/components/base/icon/icon.vue"),test_utils=__webpack_require__("./src/utils/test_utils.js"),form_fields=__webpack_require__("./src/components/base/form/form_fields/form_fields.vue"),validators=__webpack_require__("./src/components/base/form/form_fields/validators.js"),mappers=__webpack_require__("./src/components/base/form/form_fields/mappers.js");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){reject(error);return}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)})}}var Default=(()=>({ITEMS:["Pizza","Keyboards","Guitars","Rocket ships"].map(text=>({text,value:text})),components:{GlFormFields:form_fields.default,GlButton:button_button.default,GlModal:modal.default,GlListbox:listbox.default,GlAlert:alert_alert.default,GlIcon:icon.default},data(){return{fields:{USERNAME:{label:"NAME (ALL CAPS)",mapValue:x=>null==x?void 0:x.toUpperCase(),validators:[(0,validators.required)("NAME IS REQUIRED!!!")]},password:{label:"Password with group styling",inputAttrs:{type:"password"},groupAttrs:{class:"gl-bg-purple-50 gl-w-20"},validators:[(0,validators.required)("Password is required")]},confirmPassword:{label:"Confirm Password",inputAttrs:{type:"password"},validators:[(0,validators.required)("Confirmed password is required"),confirmValue=>confirmValue!==this.formValues.password?"Must match password":""]},custom:{label:"Custom input",mapValue:mappers.mapToNumber,validators:[val=>val<1?"Please click this at least once :)":""]},favoriteItem:{label:"Favorite Item (Optional)"}},formValues:{},testFormId:uniqueId_default()("form_fields_story_"),serverValidations:{},loading:!1}},computed:{values(){return omit_default()(this.formValues,["confirmPassword"])},valuesJSON(){return JSON.stringify(this.values,(key,value)=>void 0===value?null:value,2)},favoriteItemToggleText(){return this.formValues.favoriteItem?null:"Select an item"}},methods:{onInputField(_ref){var{name}=_ref;this.$delete(this.serverValidations,name)},onSubmit(){var _this=this;return _asyncToGenerator(function*(){if(_this.loading=!0,yield new Promise(resolve=>{(0,test_utils.$L)(resolve,1e3)}),_this.loading=!1,"FOO"===_this.formValues.USERNAME){_this.$set(_this.serverValidations,"USERNAME","Username has already been taken.");return}_this.$refs.modal.show()})()}},template:'\n    <div>\n      <h3>Fields</h3>\n      <form :id="testFormId" @submit.prevent>\n        <gl-form-fields :fields="fields" v-model="formValues" :form-id="testFormId" :server-validations="serverValidations" @input-field="onInputField" @submit="onSubmit">\n          <template #group(confirmPassword)-label>\n            <div class="gl-display-flex gl-align-items-center gl-column-gap-3">\n              <span>Confirm Password</span>\n              <gl-icon name="information-o" />\n            </div>\n          </template>\n          <template #group(confirmPassword)-description>\n            Description using <code>group(confirmPassword)-description</code> slot\n          </template>\n          <template #after(confirmPassword)>\n            <gl-alert class="gl-mb-5" :dismissible="false">Custom content using <code>after(confirmPassword)</code> slot</gl-alert>\n          </template>\n          <template #input(custom)="{ id, value, input, blur }">\n            <button :id="id" @click="input(value + 1)" @blur="blur" type="button">{{value}}</button>\n          </template>\n          <template #input(favoriteItem)="{ id, value, input, blur }">\n            <gl-listbox :id="id" :items="$options.ITEMS" :selected="value" :toggle-text="favoriteItemToggleText" @select="input" @hidden="blur" />\n          </template>\n          <template #group(favoriteItem)-label-description>\n            Label description using <code>group(favoriteItem)-label-description</code> slot\n          </template>\n        </gl-form-fields>\n        <gl-button type="submit" category="primary" :loading="loading">Submit</gl-button>\n      </form>\n      <gl-modal ref="modal" modal-id="submission-modal" title="Form submission"><pre>{{ valuesJSON }}</pre></gl-modal>\n    </div>\n  '})).bind({});let form_fields_stories={title:"base/form/form-fields",component:form_fields.default,parameters:{knobs:{disable:!0},docs:{description:{component:"## Usage\n\n`GlFormFields` provides form builder functionality for ease of building simple\nforms out of other GitLab UI form components.\n\nFor a code example, look at the story. It covers usage of `mapValue`, `validators`,\ncustom form elements, and `inputAttrs`.\n\n## Fields type\n\nEach value of `fields` prop is expected to be a `FieldDefinition`. See below for the shape of this type:\n\n```ts\ninterface FieldDefinition<TValue> {\n  // Label text to show for this field.\n  label: string;\n\n  // Collection of validator functions\n  validators?: Array<(value: TValue) => string | undefined>;\n\n  // Function that maps the inputted string value to the field's actual value\n  // (e.g. a Number).\n  mapValue?: (input: string) => TValue;\n\n  // Properties that are passed to the actual input for this field.\n  inputAttrs?: {};\n\n  // Properties that are passed to the group wrapping this field.\n  groupAttrs?: {};\n}\n```\n\n## Slots\n\n| Name | Description |\n| ------ | ------ |\n| `input(<fieldName>)` | Used to render components other than `GlFormInput`. |\n| `group(<fieldName>)-label` | Used for `label` slot on `GlFormGroup` of a specific field. |\n| `group(<fieldName>)-description` | Used for `description` slot on `GlFormGroup` of a specific field. |\n| `group(<fieldName>)-label-description` | Used for `label-description` slot on `GlFormGroup` of a specific field. |\n| `after(<fieldName>)` | Used to render content after `GlFormGroup` of a specific field. |\n"}}},argTypes:{}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'() => ({\n  ITEMS: [\'Pizza\', \'Keyboards\', \'Guitars\', \'Rocket ships\'].map(text => ({\n    text,\n    value: text\n  })),\n  components: {\n    GlFormFields,\n    GlButton,\n    GlModal,\n    GlListbox,\n    GlAlert,\n    GlIcon\n  },\n  data() {\n    return {\n      // why: We declare fields here so that we can test what binding the\n      //      "confirmPassword" validator to "this.formValues" would act\n      //      like. In most cases, these can be constant and injected through\n      //      `$options`.\n      fields: {\n        USERNAME: {\n          label: \'NAME (ALL CAPS)\',\n          mapValue: x => x?.toUpperCase(),\n          validators: [required(\'NAME IS REQUIRED!!!\')]\n        },\n        password: {\n          label: \'Password with group styling\',\n          inputAttrs: {\n            type: \'password\'\n          },\n          groupAttrs: {\n            class: \'gl-bg-purple-50 gl-w-20\'\n          },\n          validators: [required(\'Password is required\')]\n        },\n        confirmPassword: {\n          label: \'Confirm Password\',\n          inputAttrs: {\n            type: \'password\'\n          },\n          validators: [required(\'Confirmed password is required\'), confirmValue => confirmValue !== this.formValues.password ? \'Must match password\' : \'\']\n        },\n        custom: {\n          label: \'Custom input\',\n          mapValue: mapToNumber,\n          validators: [val => val < 1 ? \'Please click this at least once :)\' : \'\']\n        },\n        favoriteItem: {\n          label: \'Favorite Item (Optional)\'\n        }\n      },\n      formValues: {},\n      testFormId: uniqueId(\'form_fields_story_\'),\n      serverValidations: {},\n      loading: false\n    };\n  },\n  computed: {\n    values() {\n      return omit(this.formValues, [\'confirmPassword\']);\n    },\n    valuesJSON() {\n      // JSON doesn\'t allow undefined values\n      return JSON.stringify(this.values, (key, value) => value === undefined ? null : value, 2);\n    },\n    favoriteItemToggleText() {\n      if (!this.formValues.favoriteItem) {\n        return \'Select an item\';\n      }\n      return null;\n    }\n  },\n  methods: {\n    onInputField({\n      name\n    }) {\n      this.$delete(this.serverValidations, name);\n    },\n    async onSubmit() {\n      this.loading = true;\n\n      // Simulate waiting for API request to resolve\n      await new Promise(resolve => {\n        setStoryTimeout(resolve, 1000);\n      });\n      this.loading = false;\n\n      // Manually checking field and validating for this example.\n      // In practice this error message would come from the API response.\n      if (this.formValues.USERNAME === \'FOO\') {\n        this.$set(this.serverValidations, \'USERNAME\', \'Username has already been taken.\');\n        return;\n      }\n      this.$refs.modal.show();\n    }\n  },\n  template: `\n    <div>\n      <h3>Fields</h3>\n      <form :id="testFormId" @submit.prevent>\n        <gl-form-fields :fields="fields" v-model="formValues" :form-id="testFormId" :server-validations="serverValidations" @input-field="onInputField" @submit="onSubmit">\n          <template #group(confirmPassword)-label>\n            <div class="gl-display-flex gl-align-items-center gl-column-gap-3">\n              <span>Confirm Password</span>\n              <gl-icon name="information-o" />\n            </div>\n          </template>\n          <template #group(confirmPassword)-description>\n            Description using <code>group(confirmPassword)-description</code> slot\n          </template>\n          <template #after(confirmPassword)>\n            <gl-alert class="gl-mb-5" :dismissible="false">Custom content using <code>after(confirmPassword)</code> slot</gl-alert>\n          </template>\n          <template #input(custom)="{ id, value, input, blur }">\n            <button :id="id" @click="input(value + 1)" @blur="blur" type="button">{{value}}</button>\n          </template>\n          <template #input(favoriteItem)="{ id, value, input, blur }">\n            <gl-listbox :id="id" :items="$options.ITEMS" :selected="value" :toggle-text="favoriteItemToggleText" @select="input" @hidden="blur" />\n          </template>\n          <template #group(favoriteItem)-label-description>\n            Label description using <code>group(favoriteItem)-label-description</code> slot\n          </template>\n        </gl-form-fields>\n        <gl-button type="submit" category="primary" :loading="loading">Submit</gl-button>\n      </form>\n      <gl-modal ref="modal" modal-id="submission-modal" title="Form submission"><pre>{{ valuesJSON }}</pre></gl-modal>\n    </div>\n  `\n})',...Default.parameters?.docs?.source}}}}}]);