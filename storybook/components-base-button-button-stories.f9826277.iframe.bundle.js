"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[6197],{"./src/components/base/button/button.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllVariantsAndCategories:()=>AllVariantsAndCategories,BadgeWithSROnlyText:()=>BadgeWithSROnlyText,Badges:()=>Badges,BlockButton:()=>BlockButton,BorderlessTertiary:()=>BorderlessTertiary,Default:()=>Default,DropdownButton:()=>DropdownButton,DropdownIconButton:()=>DropdownIconButton,DropdownIconOnlyButton:()=>DropdownIconOnlyButton,DropdownIconSplitButton:()=>DropdownIconSplitButton,DropdownIconTextButton:()=>DropdownIconTextButton,DropdownLoadingButton:()=>DropdownLoadingButton,DropdownSplitButton:()=>DropdownSplitButton,Ellipsis:()=>Ellipsis,Emojis:()=>Emojis,IconButton:()=>IconButton,IconButtonWithOverflowedText:()=>IconButtonWithOverflowedText,LabelButton:()=>LabelButton,LinkButton:()=>LinkButton,LoadingButton:()=>LoadingButton,Sizes:()=>Sizes,default:()=>button_stories});var dropdown=__webpack_require__("./src/components/base/dropdown/dropdown.vue"),dropdown_item=__webpack_require__("./src/components/base/dropdown/dropdown_item.vue"),constants=__webpack_require__("./src/utils/constants.js"),badge=__webpack_require__("./src/components/base/badge/badge.vue"),button_group=__webpack_require__("./src/components/base/button_group/button_group.vue"),button_button=__webpack_require__("./src/components/base/button/button.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var components={GlButton:button_button.default},defaultValue=prop=>button_button.default.props[prop].default,generateProps=function(){var{category=defaultValue("category"),variant=defaultValue("variant"),size=defaultValue("size"),withLink=!1,href="#",target=null,block=!1,disabled=defaultValue("disabled"),loading=defaultValue("loading"),selected=defaultValue("selected")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return _objectSpread({category,variant,size,block,disabled,loading,selected},withLink&&{href,target})},wrapDropdownButton=template=>'<div class="gl-h-11">'.concat(template,"</div>"),Default=(args,_ref)=>{var{argTypes={}}=_ref;return{components,props:Object.keys(argTypes),template:'\n      <gl-button\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        :loading="loading"\n        :selected="selected"\n      >\n        This is a button\n      </gl-button>\n    '}};Default.args=generateProps();var BlockButton=(args,_ref2)=>{var{argTypes}=_ref2;return{props:Object.keys(argTypes),components,template:'\n      <gl-button\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        :loading="loading"\n        :selected="selected"\n      >\n        This is a block button\n      </gl-button>\n    '}};BlockButton.args=generateProps({block:!0});var IconButton=(args,_ref3)=>{var{argTypes}=_ref3;return{props:Object.keys(argTypes),components,template:'\n      <div>\n        <gl-button\n          :category="category"\n          :variant="variant"\n          :size="size"\n          :block="block"\n          :disabled="disabled"\n          :loading="loading"\n          :selected="selected"\n          icon="star-o"\n          aria-label="Star icon button"\n        />\n        <div class="gl-mt-3">\n          <gl-button icon="star-o" aria-label="Star icon button" />\n          <gl-button size="small" icon="star-o" aria-label="Star icon small button" />\n        </div>\n        <div class="gl-mt-3">\n          <gl-button icon="star-o">Icon text</gl-button>\n          <gl-button size="small" icon="star-o">Icon text</gl-button>\n        </div>\n      </div>\n    '}};IconButton.args=generateProps({category:constants.O7.primary,variant:constants.b$.danger});var DropdownButton=(args,_ref4)=>{var{argTypes}=_ref4;return{props:Object.keys(argTypes),components:{GlDropdown:dropdown.default,GlDropdownItem:dropdown_item.default},template:wrapDropdownButton('\n      <gl-dropdown\n        text="Some dropdown"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    ')}};DropdownButton.args=generateProps();var DropdownIconButton=(args,_ref5)=>{var{argTypes}=_ref5;return{props:Object.keys(argTypes),components:{GlDropdown:dropdown.default,GlDropdownItem:dropdown_item.default},template:wrapDropdownButton('\n      <gl-dropdown\n        icon="download"\n        text="Download"\n        :text-sr-only="true"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    ')}};DropdownIconButton.args=generateProps();var DropdownIconTextButton=(args,_ref6)=>{var{argTypes}=_ref6;return{props:Object.keys(argTypes),components:{GlDropdown:dropdown.default,GlDropdownItem:dropdown_item.default},template:wrapDropdownButton('\n      <gl-dropdown\n        icon="notifications"\n        text="Notifications"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    ')}};DropdownIconTextButton.args=generateProps();var DropdownIconOnlyButton=(args,_ref7)=>{var{argTypes}=_ref7;return{props:Object.keys(argTypes),components:{GlDropdown:dropdown.default,GlDropdownItem:dropdown_item.default},template:wrapDropdownButton('\n      <gl-dropdown\n        icon="ellipsis_v"\n        text="More actions"\n        :text-sr-only="true"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        no-caret\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    ')}};DropdownIconOnlyButton.args=generateProps({category:constants.O7.tertiary});var DropdownSplitButton=(args,_ref8)=>{var{argTypes}=_ref8;return{props:Object.keys(argTypes),components:{GlDropdown:dropdown.default,GlDropdownItem:dropdown_item.default},template:wrapDropdownButton('\n      <gl-dropdown\n        split\n        text="Some dropdown"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    ')}};DropdownSplitButton.args=generateProps({category:"primary",variant:"confirm"});var DropdownIconSplitButton=(args,_ref9)=>{var{argTypes}=_ref9;return{props:Object.keys(argTypes),components:{GlDropdown:dropdown.default,GlDropdownItem:dropdown_item.default},template:wrapDropdownButton('\n      <gl-dropdown\n        split\n        icon="download"\n        text="Some dropdown"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    ')}};DropdownIconSplitButton.args=generateProps({category:"secondary",variant:"danger"});var DropdownLoadingButton=(args,_ref10)=>{var{argTypes}=_ref10;return{props:Object.keys(argTypes),components:{GlDropdown:dropdown.default,GlDropdownItem:dropdown_item.default},template:'\n      <gl-dropdown text="Some dropdown" :category="category" :loading="true">\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    '}};DropdownLoadingButton.args=generateProps({category:"secondary"});var LoadingButton=(args,_ref11)=>{var{argTypes}=_ref11;return{props:Object.keys(argTypes),components,template:'\n      <gl-button\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        :loading="loading"\n        :selected="selected"\n      >\n        Loading button\n      </gl-button>\n    '}};LoadingButton.args=generateProps({loading:!0});var LinkButton=(args,_ref12)=>{var{argTypes}=_ref12;return{props:Object.keys(argTypes),components,template:'\n      <gl-button\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        :loading="loading"\n        :selected="selected"\n        :href="href"\n        :target="target"\n      >\n        This is a link button\n      </gl-button>\n    '}};LinkButton.args=generateProps({withLink:!0});var IconButtonWithOverflowedText=(args,_ref13)=>{var{argTypes}=_ref13;return{props:Object.keys(argTypes),components,template:'\n        <gl-button\n          :category="category"\n          :variant="variant"\n          :size="size"\n          :block="block"\n          :disabled="disabled"\n          :loading="loading"\n          :selected="selected"\n          icon="star-o"\n          style="width: 130px;"\n        >\n            Apply suggestion\n        </gl-button>\n    '}};IconButtonWithOverflowedText.args=generateProps();var BorderlessTertiary=(args,_ref14)=>{var{argTypes}=_ref14;return{props:Object.keys(argTypes),components,template:'\n      <div class="gl-display-inline-flex">\n        <gl-button\n          :category="category"\n          :size="size"\n          :block="block"\n          :disabled="disabled"\n          :loading="loading"\n          :selected="selected"\n        >\n            Default borderless\n        </gl-button>\n        <gl-button\n          variant="confirm"\n          :category="category"\n          :size="size"\n          :block="block"\n          :disabled="disabled"\n          :loading="loading"\n          :selected="selected"\n        >\n            Primary borderless\n        </gl-button>\n      </div>\n    '}};BorderlessTertiary.args=generateProps({category:"tertiary"});var LabelButton=(args,_ref15)=>{var{argTypes={}}=_ref15;return{props:Object.keys(argTypes),components:{GlButton:button_button.default,GlButtonGroup:button_group.default},template:'\n      <div>\n        <gl-button label>Label</gl-button>\n        <gl-button size="small" label>Label</gl-button>\n        <gl-button-group>\n          <gl-button id="commit-sha-label" class="gl-font-monospace" label>\n            b29cc44d\n          </gl-button>\n          <gl-button\n            aria-describedby="commit-sha-label"\n            icon="duplicate"\n            aria-label="Copy commit SHA" />\n          <gl-button icon="folder-open" aria-label="Open file" />\n        </gl-button-group>\n      </div>\n    '}};LabelButton.parameters={controls:{disable:!0}};var AllVariantsAndCategories=(args,_ref16)=>{var{argTypes={}}=_ref16;return{props:Object.keys(argTypes),components,variants:Object.keys(constants.b$).filter(variant=>!constants.b$[variant].includes("deprecated")),categories:constants.O7,style:{display:"grid",gridTemplateColumns:"repeat(3, 150px)",rowGap:"8px",textAlign:"center"},template:'\n      <div :style="$options.style">\n        <template v-for="variant in $options.variants">\n          <div v-for="category in $options.categories" :key="variant + category">\n            <gl-button :key="category" :category="category" :variant="variant">\n              {{ category }} {{ variant }}\n            </gl-button>\n          </div>\n        </template>\n      </div>\n    '}};AllVariantsAndCategories.parameters={controls:{disable:!0}};var Emojis=(args,_ref17)=>{var{argTypes={}}=_ref17;return{props:Object.keys(argTypes),components,template:'\n      <div>\n        <gl-button selected>\n          <template #emoji>\n            <gl-emoji title="thumbs up sign" data-name="thumbsup" data-unicode-version="6.0"\n              >\uD83D\uDC4D</gl-emoji\n            >\n          </template>\n          1\n        </gl-button>\n        <gl-button>\n          <template #emoji>\n            <gl-emoji title="thumbs down sign" data-name="thumbsdown" data-unicode-version="6.0"\n              >\uD83D\uDC4E</gl-emoji\n            >\n          </template>\n          0\n        </gl-button>\n        <gl-button selected size="small">\n          <template #emoji>\n            <gl-emoji title="thumbs up sign" data-name="thumbsup" data-unicode-version="6.0"\n              >\uD83D\uDC4D</gl-emoji\n            >\n          </template>\n          1\n        </gl-button>\n        <gl-button size="small">\n          <template #emoji>\n            <gl-emoji title="thumbs down sign" data-name="thumbsdown" data-unicode-version="6.0"\n              >\uD83D\uDC4E</gl-emoji\n            >\n          </template>\n          0\n        </gl-button>\n      </div>\n    '}};Emojis.parameters={controls:{disable:!0}};var Ellipsis=(args,_ref18)=>{var{argTypes={}}=_ref18;return{props:Object.keys(argTypes),components,template:'\n    <gl-button icon="ellipsis_h" aria-label="Ellipsis button" />\n  '}};Ellipsis.parameters={controls:{disable:!0}};var Sizes=(args,_ref19)=>{var{argTypes={}}=_ref19;return{props:Object.keys(argTypes),components,template:'\n    <div>\n      <gl-button size="small">Small button</gl-button>\n      <gl-button>Default button</gl-button>\n      <div class="mt-2">\n        <gl-button size="small" block>Full width small button</gl-button>\n      </div>\n      <div class="mt-2">\n        <gl-button block>Full width button</gl-button>\n      </div>\n    </div>\n  '}};Sizes.parameters={controls:{disable:!0}};var Badges=(args,_ref20)=>{var{argTypes={}}=_ref20;return{props:Object.keys(argTypes),components:{GlButton:button_button.default,GlBadge:badge.default},variants:Object.keys(constants.mg),categories:constants.O7,style:{display:"grid",gridTemplateColumns:"repeat(3, 200px)",rowGap:"8px",textAlign:"center"},methods:{getBadgeVariant:variant=>constants.mg[variant]},template:'\n      <div :style="$options.style">\n          <template v-for="variant in $options.variants">\n              <div v-for="category in $options.categories" :key="variant + category">\n                  <gl-button :key="category" :category="category" :variant="variant" buttonTextClasses="gl-display-flex gl-align-items-center">\n                      {{ category }} {{ variant }}\n                      <gl-badge size="sm" :variant="getBadgeVariant(variant)" class="gl-ml-2">00</gl-badge>\n                  </gl-button>\n              </div>\n          </template>\n      </div>\n  '}};Badges.parameters={controls:{disable:!0}};var BadgeWithSROnlyText=(args,_ref21)=>{var{argTypes={}}=_ref21;return{props:Object.keys(argTypes),components:{GlButton:button_button.default,GlBadge:badge.default},template:'\n      <gl-button variant="confirm" buttonTextClasses="gl-display-flex gl-align-items-center">\n          Submit review\n          <gl-badge size="sm" variant="info" class="gl-ml-2">2</gl-badge>\n          <span class="sr-only">pending comments</span>\n      </gl-button>\n  '}};BadgeWithSROnlyText.parameters={controls:{disable:!0}};let button_stories={title:"base/button",component:button_button.default,parameters:{bootstrapComponent:"b-button",docs:{description:{component:'Buttons execute an action, either in the background or foreground of an experience. Different button\ncategories help guide users through certain actions. Buttons express what action will occur when the\nuser clicks or touches it either by text, icon, or both. Additional meaning can be derived from the\nbutton variant.\n\n## Button link\n\nA button link is a link that is styled to look like a button, semantically speaking it\'s a `<a>` tag\nwith the necessary classes added to make it look like a button, it shares the same functionality as\n[`<gl-link>`]\n\n> Note: Setting a `target` attribute without a `href` attribute, will not create any side effects.\n> Without the presence of a `href` attribute, this component will render a `<button>`.\n\n[`<gl-link>`]: ./?path=/story/base-link--default-link\n\n## Icon-only button\n\nIcon-only buttons must have an accessible name.\nYou can provide one with the `aria-label` attribute, which is read out by screen readers.\n\n```html\n<gl-button icon="close" aria-label="Close" />\n```\n\n## Label button\n\nA label button renders a non-interactive `span` styled as a button. This can be especially useful\nwhen used in a button group to render text-only labels along with actionable buttons. To improve\naccessibility, and when applicable, consider using [`aria-describedby`] to establish a\nrelationship between the label button and the associated button.\n\n[`aria-describedby`]: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute\n\n## Security\n\nThis component implements a few security measures to make it as safe as possible by default.\nSee [SafeLinkDirective docs] for more details.\n\n### Linking to an unsafe URL\n\nIf you\'re trying to link to a location considered unsafe by the `SafeLink` directive (when rendering\na download link with a [Data URL] for example), you\'ll need to bypass the `href` attribute\'s\nsanitization. This component exposes the `is-unsafe-link` prop for that purpose.\n\n> **Warning:** Only disable URL sanitization when absolutely necessary.\n\n```html\n<gl-button\n  is-unsafe-link\n  download="file.txt"\n  href="data:text/plain;charset=utf-8,GitLab%20is%20awesome">Download</gl-button>\n```\n\n[SafeLinkDirective docs]: https://gitlab-org.gitlab.io/gitlab-ui/?path=/docs/directives-safe-link-directive--default\n[Data URL]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n\n## vue-bootstrap component\n\nThis component uses [`BButton`](https://bootstrap-vue.org/docs/components/button) from vue-bootstrap\ninternally. So please take a look also there at their extensive documentation.\n'}}},argTypes:{category:{options:Object.keys(constants.O7),control:"select"},variant:{options:Object.keys(constants.b$),control:"select"},size:{options:Object.keys(constants.td),control:"select"},target:{options:constants.eU,control:"select"}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes = {}\n}) => ({\n  components,\n  props: Object.keys(argTypes),\n  template: `\n      <gl-button\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        :loading="loading"\n        :selected="selected"\n      >\n        This is a button\n      </gl-button>\n    `\n})',...Default.parameters?.docs?.source}}},BlockButton.parameters={...BlockButton.parameters,docs:{...BlockButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n      <gl-button\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        :loading="loading"\n        :selected="selected"\n      >\n        This is a block button\n      </gl-button>\n    `\n})',...BlockButton.parameters?.docs?.source}}},IconButton.parameters={...IconButton.parameters,docs:{...IconButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n      <div>\n        <gl-button\n          :category="category"\n          :variant="variant"\n          :size="size"\n          :block="block"\n          :disabled="disabled"\n          :loading="loading"\n          :selected="selected"\n          icon="star-o"\n          aria-label="Star icon button"\n        />\n        <div class="gl-mt-3">\n          <gl-button icon="star-o" aria-label="Star icon button" />\n          <gl-button size="small" icon="star-o" aria-label="Star icon small button" />\n        </div>\n        <div class="gl-mt-3">\n          <gl-button icon="star-o">Icon text</gl-button>\n          <gl-button size="small" icon="star-o">Icon text</gl-button>\n        </div>\n      </div>\n    `\n})',...IconButton.parameters?.docs?.source}}},DropdownButton.parameters={...DropdownButton.parameters,docs:{...DropdownButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDropdown,\n    GlDropdownItem\n  },\n  template: wrapDropdownButton(`\n      <gl-dropdown\n        text="Some dropdown"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    `)\n})',...DropdownButton.parameters?.docs?.source}}},DropdownIconButton.parameters={...DropdownIconButton.parameters,docs:{...DropdownIconButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDropdown,\n    GlDropdownItem\n  },\n  template: wrapDropdownButton(`\n      <gl-dropdown\n        icon="download"\n        text="Download"\n        :text-sr-only="true"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    `)\n})',...DropdownIconButton.parameters?.docs?.source}}},DropdownIconTextButton.parameters={...DropdownIconTextButton.parameters,docs:{...DropdownIconTextButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDropdown,\n    GlDropdownItem\n  },\n  template: wrapDropdownButton(`\n      <gl-dropdown\n        icon="notifications"\n        text="Notifications"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    `)\n})',...DropdownIconTextButton.parameters?.docs?.source}}},DropdownIconOnlyButton.parameters={...DropdownIconOnlyButton.parameters,docs:{...DropdownIconOnlyButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDropdown,\n    GlDropdownItem\n  },\n  template: wrapDropdownButton(`\n      <gl-dropdown\n        icon="ellipsis_v"\n        text="More actions"\n        :text-sr-only="true"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        no-caret\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    `)\n})',...DropdownIconOnlyButton.parameters?.docs?.source}}},DropdownSplitButton.parameters={...DropdownSplitButton.parameters,docs:{...DropdownSplitButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDropdown,\n    GlDropdownItem\n  },\n  template: wrapDropdownButton(`\n      <gl-dropdown\n        split\n        text="Some dropdown"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    `)\n})',...DropdownSplitButton.parameters?.docs?.source}}},DropdownIconSplitButton.parameters={...DropdownIconSplitButton.parameters,docs:{...DropdownIconSplitButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDropdown,\n    GlDropdownItem\n  },\n  template: wrapDropdownButton(`\n      <gl-dropdown\n        split\n        icon="download"\n        text="Some dropdown"\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n      >\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    `)\n})',...DropdownIconSplitButton.parameters?.docs?.source}}},DropdownLoadingButton.parameters={...DropdownLoadingButton.parameters,docs:{...DropdownLoadingButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlDropdown,\n    GlDropdownItem\n  },\n  template: `\n      <gl-dropdown text="Some dropdown" :category="category" :loading="true">\n        <gl-dropdown-item>Dropdown item</gl-dropdown-item>\n      </gl-dropdown>\n    `\n})',...DropdownLoadingButton.parameters?.docs?.source}}},LoadingButton.parameters={...LoadingButton.parameters,docs:{...LoadingButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n      <gl-button\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        :loading="loading"\n        :selected="selected"\n      >\n        Loading button\n      </gl-button>\n    `\n})',...LoadingButton.parameters?.docs?.source}}},LinkButton.parameters={...LinkButton.parameters,docs:{...LinkButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n      <gl-button\n        :category="category"\n        :variant="variant"\n        :size="size"\n        :block="block"\n        :disabled="disabled"\n        :loading="loading"\n        :selected="selected"\n        :href="href"\n        :target="target"\n      >\n        This is a link button\n      </gl-button>\n    `\n})',...LinkButton.parameters?.docs?.source}}},IconButtonWithOverflowedText.parameters={...IconButtonWithOverflowedText.parameters,docs:{...IconButtonWithOverflowedText.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n        <gl-button\n          :category="category"\n          :variant="variant"\n          :size="size"\n          :block="block"\n          :disabled="disabled"\n          :loading="loading"\n          :selected="selected"\n          icon="star-o"\n          style="width: 130px;"\n        >\n            Apply suggestion\n        </gl-button>\n    `\n})',...IconButtonWithOverflowedText.parameters?.docs?.source}}},BorderlessTertiary.parameters={...BorderlessTertiary.parameters,docs:{...BorderlessTertiary.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n      <div class="gl-display-inline-flex">\n        <gl-button\n          :category="category"\n          :size="size"\n          :block="block"\n          :disabled="disabled"\n          :loading="loading"\n          :selected="selected"\n        >\n            Default borderless\n        </gl-button>\n        <gl-button\n          variant="confirm"\n          :category="category"\n          :size="size"\n          :block="block"\n          :disabled="disabled"\n          :loading="loading"\n          :selected="selected"\n        >\n            Primary borderless\n        </gl-button>\n      </div>\n    `\n})',...BorderlessTertiary.parameters?.docs?.source}}},LabelButton.parameters={...LabelButton.parameters,docs:{...LabelButton.parameters?.docs,source:{originalSource:'(args, {\n  argTypes = {}\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlButton,\n    GlButtonGroup\n  },\n  template: `\n      <div>\n        <gl-button label>Label</gl-button>\n        <gl-button size="small" label>Label</gl-button>\n        <gl-button-group>\n          <gl-button id="commit-sha-label" class="gl-font-monospace" label>\n            b29cc44d\n          </gl-button>\n          <gl-button\n            aria-describedby="commit-sha-label"\n            icon="duplicate"\n            aria-label="Copy commit SHA" />\n          <gl-button icon="folder-open" aria-label="Open file" />\n        </gl-button-group>\n      </div>\n    `\n})',...LabelButton.parameters?.docs?.source}}},AllVariantsAndCategories.parameters={...AllVariantsAndCategories.parameters,docs:{...AllVariantsAndCategories.parameters?.docs,source:{originalSource:'(args, {\n  argTypes = {}\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  variants: Object.keys(buttonVariantOptions).filter(variant => !buttonVariantOptions[variant].includes(\'deprecated\')),\n  categories: buttonCategoryOptions,\n  style: {\n    display: \'grid\',\n    gridTemplateColumns: \'repeat(3, 150px)\',\n    rowGap: \'8px\',\n    textAlign: \'center\'\n  },\n  template: `\n      <div :style="$options.style">\n        <template v-for="variant in $options.variants">\n          <div v-for="category in $options.categories" :key="variant + category">\n            <gl-button :key="category" :category="category" :variant="variant">\n              {{ category }} {{ variant }}\n            </gl-button>\n          </div>\n        </template>\n      </div>\n    `\n})',...AllVariantsAndCategories.parameters?.docs?.source}}},Emojis.parameters={...Emojis.parameters,docs:{...Emojis.parameters?.docs,source:{originalSource:'(args, {\n  argTypes = {}\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n      <div>\n        <gl-button selected>\n          <template #emoji>\n            <gl-emoji title="thumbs up sign" data-name="thumbsup" data-unicode-version="6.0"\n              >\uD83D\uDC4D</gl-emoji\n            >\n          </template>\n          1\n        </gl-button>\n        <gl-button>\n          <template #emoji>\n            <gl-emoji title="thumbs down sign" data-name="thumbsdown" data-unicode-version="6.0"\n              >\uD83D\uDC4E</gl-emoji\n            >\n          </template>\n          0\n        </gl-button>\n        <gl-button selected size="small">\n          <template #emoji>\n            <gl-emoji title="thumbs up sign" data-name="thumbsup" data-unicode-version="6.0"\n              >\uD83D\uDC4D</gl-emoji\n            >\n          </template>\n          1\n        </gl-button>\n        <gl-button size="small">\n          <template #emoji>\n            <gl-emoji title="thumbs down sign" data-name="thumbsdown" data-unicode-version="6.0"\n              >\uD83D\uDC4E</gl-emoji\n            >\n          </template>\n          0\n        </gl-button>\n      </div>\n    `\n})',...Emojis.parameters?.docs?.source}}},Ellipsis.parameters={...Ellipsis.parameters,docs:{...Ellipsis.parameters?.docs,source:{originalSource:'(args, {\n  argTypes = {}\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n    <gl-button icon="ellipsis_h" aria-label="Ellipsis button" />\n  `\n})',...Ellipsis.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'(args, {\n  argTypes = {}\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n    <div>\n      <gl-button size="small">Small button</gl-button>\n      <gl-button>Default button</gl-button>\n      <div class="mt-2">\n        <gl-button size="small" block>Full width small button</gl-button>\n      </div>\n      <div class="mt-2">\n        <gl-button block>Full width button</gl-button>\n      </div>\n    </div>\n  `\n})',...Sizes.parameters?.docs?.source}}},Badges.parameters={...Badges.parameters,docs:{...Badges.parameters?.docs,source:{originalSource:'(args, {\n  argTypes = {}\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlButton,\n    GlBadge\n  },\n  variants: Object.keys(badgeForButtonOptions),\n  categories: buttonCategoryOptions,\n  style: {\n    display: \'grid\',\n    gridTemplateColumns: \'repeat(3, 200px)\',\n    rowGap: \'8px\',\n    textAlign: \'center\'\n  },\n  methods: {\n    getBadgeVariant(variant) {\n      return badgeForButtonOptions[variant];\n    }\n  },\n  template: `\n      <div :style="$options.style">\n          <template v-for="variant in $options.variants">\n              <div v-for="category in $options.categories" :key="variant + category">\n                  <gl-button :key="category" :category="category" :variant="variant" buttonTextClasses="gl-display-flex gl-align-items-center">\n                      {{ category }} {{ variant }}\n                      <gl-badge size="sm" :variant="getBadgeVariant(variant)" class="gl-ml-2">00</gl-badge>\n                  </gl-button>\n              </div>\n          </template>\n      </div>\n  `\n})',...Badges.parameters?.docs?.source}}},BadgeWithSROnlyText.parameters={...BadgeWithSROnlyText.parameters,docs:{...BadgeWithSROnlyText.parameters?.docs,source:{originalSource:'(args, {\n  argTypes = {}\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    GlButton,\n    GlBadge\n  },\n  template: `\n      <gl-button variant="confirm" buttonTextClasses="gl-display-flex gl-align-items-center">\n          Submit review\n          <gl-badge size="sm" variant="info" class="gl-ml-2">2</gl-badge>\n          <span class="sr-only">pending comments</span>\n      </gl-button>\n  `\n})',...BadgeWithSROnlyText.parameters?.docs?.source}}}}}]);