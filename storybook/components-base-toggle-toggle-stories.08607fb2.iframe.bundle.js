"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[9620],{"./src/utils/stories_utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>disableControls});var disableControls=function(){var controls=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Object.fromEntries(controls.map(control=>[control,{control:{disable:!0}}]))}},"./src/components/base/toggle/toggle.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,LabelPositionLeft:()=>LabelPositionLeft,WithDescription:()=>WithDescription,WithLongHelp:()=>WithLongHelp,default:()=>toggle_stories});var constants=__webpack_require__("./src/utils/constants.js"),stories_utils=__webpack_require__("./src/utils/stories_utils.js"),toggle=__webpack_require__("./src/components/base/toggle/toggle.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var defaultValue=prop=>toggle.default.props[prop].default,generateProps=function(){var{value=!0,disabled=defaultValue("disabled"),isLoading=defaultValue("isLoading"),label="Dark mode",labelId="dark-mode-toggle",description="",help="Toggle dark mode for the website.",labelPosition=defaultValue("labelPosition")}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{value,disabled,isLoading,label,labelId,description,help,labelPosition}},Template=(args,_ref)=>{var{argTypes}=_ref;return{components:{GlToggle:toggle.default},props:Object.keys(argTypes),data(){return{localValue:this.value}},watch:{value(newValue){this.localValue=newValue}},template:'\n  <div class="gl-font-base">\n    <gl-toggle\n      v-model="localValue"\n      :disabled="disabled"\n      :description="description"\n      :help="help"\n      :label-id="labelId"\n      :is-loading="isLoading"\n      :label="label"\n      :label-position="labelPosition"\n    />\n  </div>'}},Default=Template.bind({});Default.args=generateProps();var WithDescription=Template.bind({});WithDescription.args=generateProps({description:"A dark color theme that is easier on the eyes."});var WithLongHelp=Template.bind({});WithLongHelp.args=generateProps({help:"This is a toggle component with a long help message.\n  You can notice how the text wraps when the width of the container\n  is not enough to fix the entire text."});var LabelPositionLeft=Template.bind({});LabelPositionLeft.args=generateProps({labelPosition:"left"});let toggle_stories={title:"base/toggle",component:toggle.default,parameters:{docs:{description:{component:'## Usage\n\nThe toggle component must have a `label` prop to give the toggle button an accessible name.\nTo visually hide the label, provide it with `label-position="hidden"`.\n'}}},argTypes:_objectSpread(_objectSpread({},(0,stories_utils.W)(["name"])),{},{labelPosition:{options:Object.keys(constants.EE),control:"select"},label:{control:"text"},description:{control:"text"},help:{control:"text"}})};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlToggle\n  },\n  props: Object.keys(argTypes),\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  template: `\n  <div class="gl-font-base">\n    <gl-toggle\n      v-model="localValue"\n      :disabled="disabled"\n      :description="description"\n      :help="help"\n      :label-id="labelId"\n      :is-loading="isLoading"\n      :label="label"\n      :label-position="labelPosition"\n    />\n  </div>`\n})',...Default.parameters?.docs?.source}}},WithDescription.parameters={...WithDescription.parameters,docs:{...WithDescription.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlToggle\n  },\n  props: Object.keys(argTypes),\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  template: `\n  <div class="gl-font-base">\n    <gl-toggle\n      v-model="localValue"\n      :disabled="disabled"\n      :description="description"\n      :help="help"\n      :label-id="labelId"\n      :is-loading="isLoading"\n      :label="label"\n      :label-position="labelPosition"\n    />\n  </div>`\n})',...WithDescription.parameters?.docs?.source}}},WithLongHelp.parameters={...WithLongHelp.parameters,docs:{...WithLongHelp.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlToggle\n  },\n  props: Object.keys(argTypes),\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  template: `\n  <div class="gl-font-base">\n    <gl-toggle\n      v-model="localValue"\n      :disabled="disabled"\n      :description="description"\n      :help="help"\n      :label-id="labelId"\n      :is-loading="isLoading"\n      :label="label"\n      :label-position="labelPosition"\n    />\n  </div>`\n})',...WithLongHelp.parameters?.docs?.source}}},LabelPositionLeft.parameters={...LabelPositionLeft.parameters,docs:{...LabelPositionLeft.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => ({\n  components: {\n    GlToggle\n  },\n  props: Object.keys(argTypes),\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n  watch: {\n    value(newValue) {\n      this.localValue = newValue;\n    }\n  },\n  template: `\n  <div class="gl-font-base">\n    <gl-toggle\n      v-model="localValue"\n      :disabled="disabled"\n      :description="description"\n      :help="help"\n      :label-id="labelId"\n      :is-loading="isLoading"\n      :label="label"\n      :label-position="labelPosition"\n    />\n  </div>`\n})',...LabelPositionLeft.parameters?.docs?.source}}}}}]);