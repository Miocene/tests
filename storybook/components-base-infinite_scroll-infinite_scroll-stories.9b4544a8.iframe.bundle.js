"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[6026],{"./src/components/base/infinite_scroll/infinite_scroll.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>infinite_scroll_stories});var test_utils=__webpack_require__("./src/utils/test_utils.js"),loading_icon=__webpack_require__("./src/components/base/loading_icon/loading_icon.vue"),infinite_scroll=__webpack_require__("./src/components/base/infinite_scroll/infinite_scroll.vue"),Default=((args,_ref)=>{var{argTypes}=_ref;return{components:{GlInfiniteScroll:infinite_scroll.default,GlLoadingIcon:loading_icon.default},props:Object.keys(argTypes),watch:{fetchedItems:{immediate:!0,handler(fetchedItems){this.localFetchedItems=fetchedItems}},isLoading:{immediate:!0,handler(isLoading){this.localIsLoading=isLoading}}},data:()=>({loadTimer:null,localFetchedItems:null,localIsLoading:!1}),methods:{onBottomReached(){clearTimeout(this.loadTimer),this.localIsLoading=!0,this.loadTimer=(0,test_utils.$L)(()=>{this.localFetchedItems+=20,this.localIsLoading=!1},500)}},template:'\n  <gl-infinite-scroll\n    :total-items="totalItems"\n    :fetched-items="localFetchedItems"\n    :max-list-height="maxListHeight"\n    @bottomReached="onBottomReached"\n    >\n    <template #items>\n      <ul class="list-group list-group-flushed list-unstyled">\n        <li v-for="item in localFetchedItems" :key="item" class="list-group-item">Item #{{ item }}</li>\n      </ul>\n    </template>\n\n    <template v-if="localIsLoading" #default>\n      <div class="gl-mt-3">\n        <gl-loading-icon />\n      </div>\n    </template>\n  </gl-infinite-scroll>\n'}}).bind({});Default.args=function(){var{isLoading=!1,totalItems=null,fetchedItems=20,maxListHeight=285}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{isLoading,totalItems,fetchedItems,maxListHeight}}();let infinite_scroll_stories={title:"base/infinite-scroll",component:infinite_scroll.default,parameters:{docs:{description:{component:"## Usage\n\nThe infinite scroll component wraps around a results list and emits a message\n(`bottomReached`) when the bottom of the viewport is reached, which should trigger\na re-fetching. The `gl-infinite-scroll` component expects its parent component to\nmanage the re-fetching.\n\nAdditionally it emits a `topReached` message when the top of the viewport is reached, which\ncan be useful to load items on top of the available data. If only `topReached` is present, the\nviewport will be scrolled to the bottom the first time this component is mounted.\n\n## Public methods\n\nUseful public methods you can call via `$refs`:\n\n- `.scrollUp()`: Scrolls to the top of the container.\n- `.scrollDown()`: Scrolls to the bottom of the container.\n- `.scrollTo({ top, behavior })`: Scrolls to a number of pixels\n  along the Y axis of the container. The scrolling behavior can also be specified,\n  as per MDN spec (<https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo>)\n\n## Implementation Example\n\nThis is how a full implementation would look like with paginated results from GitLab's\n`projects` API.\n\nIn the component's state, initialize a `pageInfo` object:\n\n```js\npageInfo: {\n  currentPage: 0,\n  nextPage: 0,\n  totalPages: 0,\n  totalResults: 0,\n}\n```\n\nWhen fetching for the first time, set the state with the header\ninformation in the mutations:\n\n```html\nVue.set(state.pageInfo, 'currentPage', parseInt(headers['X-Page'], 10));\nVue.set(state.pageInfo, 'nextPage', parseInt(headers['X-Next-Page'], 10));\nVue.set(state.pageInfo, 'totalPages', parseInt(headers['X-Total-Pages'], 10));\nVue.set(state.pageInfo, 'totalResults', parseInt(headers['X-Total'], 10));\n```\n\n_Note: There is a function you can use for parsing integers in headers in\nGitLab called `parseIntPagination` in `common/utils.js`_\n\nEvery time `bottomReached` happens, update the state in your mutations:\n\n```js\nstate.searchResults = state.searchResults.concat(results.data);\nVue.set(state.pageInfo, 'nextPage', parseInt(headers['X-Next-Page'],10));\nVue.set(state.pageInfo, 'totalPages', parseInt(headers['X-Total-Pages'],10));\n```\n\nUse the state to fetch the next page in the actions. In this case, the `Projects`\nAPI allows us to send in a `page` parameter to fetch a certain page from the\nlist of results.\n\n```js\nexport const fetchNextPage = ({ state, dispatch }) => {\n  if(state.pageInfo.currentPage < state.pageInfo.totalPages) {\n    Api.projects(searchQuery, { page: state.pageInfo.nextPage })\n      ...\n  }\n};\n```\n\n```html\n<script>\nexportDefault {\n  components: {\n    GlInfiniteScroll,\n  },\n  computed: {\n    ...mapState([\n      'pageInfo',\n      'searchResults',\n    ]),\n  },\n  methods: {\n    ...mapActions([\n      'fetchNextPage',\n    ]),\n    bottomReached() {\n      this.fetchNextPage();\n    },\n  },\n}\n</script>\n<template>\n  <gl-infinite-scroll\n    @bottomReached=\"bottomReached\"\n    :max-list-height=\"400\"\n    :fetched-items=\"searchResults.length\"\n    :total-items=\"totalResults\"\n  >\n    ...Results in a list, another component, etc ....\n  </gl-infinite-scroll>\n</template>\n```\n"}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  components: {\n    GlInfiniteScroll,\n    GlLoadingIcon\n  },\n  props: Object.keys(argTypes),\n  watch: {\n    fetchedItems: {\n      immediate: true,\n      handler(fetchedItems) {\n        this.localFetchedItems = fetchedItems;\n      }\n    },\n    isLoading: {\n      immediate: true,\n      handler(isLoading) {\n        this.localIsLoading = isLoading;\n      }\n    }\n  },\n  data() {\n    return {\n      loadTimer: null,\n      localFetchedItems: null,\n      localIsLoading: false\n    };\n  },\n  methods: {\n    onBottomReached() {\n      clearTimeout(this.loadTimer);\n      this.localIsLoading = true;\n      this.loadTimer = setStoryTimeout(() => {\n        this.localFetchedItems += ITEMS_BATCH_SIZE;\n        this.localIsLoading = false;\n      }, 500);\n    }\n  },\n  template\n})",...Default.parameters?.docs?.source}}}}}]);