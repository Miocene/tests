"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[8090],{"./src/components/base/toast/toast.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithActions:()=>WithActions,WithLongContent:()=>WithLongContent,default:()=>toast_stories});var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),vue_esm=__webpack_require__("./node_modules/vue/dist/vue.esm.js"),button_button=__webpack_require__("./src/components/base/button/button.vue"),toast=__webpack_require__("./src/components/base/toast/toast.js");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){reject(error);return}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)})}}vue_esm.default.use(toast.default);var components={GlToast:toast.default,GlButton:button_button.default},play=function(){var _ref2=_asyncToGenerator(function*(_ref){var{canvasElement}=_ref,button=(0,dist.uh)(canvasElement).getByRole("button");yield dist.mV.click(button),yield(0,dist.X_)(()=>(0,dist.l_)((0,dist.uh)(document).getByRole("status")).toBeVisible())});return function play(_x){return _ref2.apply(this,arguments)}}(),Default=((args,_ref3)=>{var{argTypes}=_ref3;return{props:Object.keys(argTypes),components,template:'\n  <gl-button @click="showToast()">\n    Show default toast\n  </gl-button>',methods:{showToast(){this.$toast.show("This is the default toast.")}}}}).bind({});Default.play=play;var WithActions=()=>({components,template:'\n  <gl-button @click="showToast()">\n    Show toast with actions\n  </gl-button>',methods:{showToast(){this.$toast.show("This is a toast with an action.",{action:{text:"Undo",onClick:()=>{}}})}}});WithActions.play=play;var WithLongContent=()=>({components,template:'\n  <gl-button @click="showToast()">\n    Show toast with a long content\n  </gl-button>',methods:{showToast(){this.$toast.show("This is a toast with a long content and an action. Notice how the text wraps to multiple lines when the max-width is reached.",{action:{text:"Undo action",onClick:()=>{}}})}}});WithLongContent.play=play;let toast_stories={title:"base/toast",component:toast.default,parameters:{bootstrapComponent:"toast",docs:{description:{component:"\nToasts are used to display system messages. The messages are short and straightforward. It may\ncontain a dismiss button, and an action button depending on the situation.\n\n## Using the plugin\n\nIn order to use the plugin, it needs to be included in your application with `Vue.use`.\n\n```js\n// myApp.js\n\nimport { GlToast } from '@gitlab/ui';\n\n// Note, this has to be done before `Vue.new()`\nVue.use(GlToast);\n```\n\nOnce included in your application, the toast plugin is globally available.\n\n```js\n// myComponent.vue\n\nthis.$toast.show('Hello GitLab!');\n```\n\nBelow is an example with options\n\n```js\n// myComponent.vue\n\nthis.$toast.show('This is a toast with an option.', {\n  action: {\n    text: 'Undo',\n    onClick: () => { ... },\n  },\n});\n```\n\n### Options\n\nBelow are the options you can pass to create a toast\n\n| **Option**    | **Type**      | **Default** | **Description**                          |\n| ------------- | ------------- | ----------- | ---------------------------------------- |\n| autoHideDelay | Number        | 5000        | Display time of the toast in millisecond |\n| action        | Object        | close       | Add single actions to toast              |\n| toastClass    | String, Array | 'gl-toast'  | Custom css class name of the toast       |\n| onComplete    | Function      | null        | Trigger when toast is completed          |\n"}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: `\n  <gl-button @click=\"showToast()\">\n    Show default toast\n  </gl-button>`,\n  methods: {\n    showToast() {\n      this.$toast.show('This is the default toast.');\n    }\n  }\n})",...Default.parameters?.docs?.source}}},WithActions.parameters={...WithActions.parameters,docs:{...WithActions.parameters?.docs,source:{originalSource:"() => ({\n  components,\n  template: `\n  <gl-button @click=\"showToast()\">\n    Show toast with actions\n  </gl-button>`,\n  methods: {\n    showToast() {\n      this.$toast.show('This is a toast with an action.', {\n        action: {\n          text: 'Undo',\n          onClick: () => {}\n        }\n      });\n    }\n  }\n})",...WithActions.parameters?.docs?.source}}},WithLongContent.parameters={...WithLongContent.parameters,docs:{...WithLongContent.parameters?.docs,source:{originalSource:"() => ({\n  components,\n  template: `\n  <gl-button @click=\"showToast()\">\n    Show toast with a long content\n  </gl-button>`,\n  methods: {\n    showToast() {\n      this.$toast.show('This is a toast with a long content and an action. Notice how the text wraps to multiple lines when the max-width is reached.', {\n        action: {\n          text: 'Undo action',\n          onClick: () => {}\n        }\n      });\n    }\n  }\n})",...WithLongContent.parameters?.docs?.source}}}}}]);