"use strict";(globalThis.webpackChunk_gitlab_ui=globalThis.webpackChunk_gitlab_ui||[]).push([[7881],{"./src/components/base/tabs/tabs/tabs.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ContentlessTab:()=>ContentlessTab,Default:()=>Default,EmptyState:()=>EmptyState,JustifiedTabs:()=>JustifiedTabs,WithCounterBadges:()=>WithCounterBadges,WithScroll:()=>WithScroll,WithScrollAndGrowing:()=>WithScrollAndGrowing,default:()=>tabs_stories});var range=__webpack_require__("./node_modules/lodash/range.js"),range_default=__webpack_require__.n(range),badge=__webpack_require__("./src/components/base/badge/badge.vue"),constants=__webpack_require__("./src/utils/constants.js"),tab=__webpack_require__("./src/components/base/tabs/tab/tab.vue"),scrollable_tabs=__webpack_require__("./src/components/base/tabs/tabs/scrollable_tabs.vue"),tabs=__webpack_require__("./src/components/base/tabs/tabs/tabs.vue");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var components={GlTabs:tabs.default,GlTab:tab.default},generateProps=function(){var{justified}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{justified}},wrap=template=>'\n  <gl-tabs\n    :justified="justified"\n  >\n    '.concat(template,"\n  </gl-tabs>\n"),ScrollableTabsGenerator={components:{GlTabs:tabs.default,GlScrollableTabs:scrollable_tabs.default,GlTab:tab.default},props:{count:{type:Number,required:!0}},computed:{tabs(){return range_default()(this.count).map(i=>({title:"Tab ".concat(i+1),content:"Tab panel ".concat(i+1," content...")}))}},template:'\n    <gl-scrollable-tabs v-bind="$attrs">\n      <gl-tab v-for="tab in tabs" :key="tab.title" :title="tab.title">\n        {{ tab.content }}\n      </gl-tab>\n    </gl-scrollable-tabs>\n  '},Default=(_args,_ref)=>{var{argTypes}=_ref;return{props:Object.keys(argTypes),components,template:wrap('\n    <gl-tab title="Tab 1">\n      Tab panel 1\n    </gl-tab>\n    <gl-tab title="Tab 2">\n      Tab panel 2\n    </gl-tab>\n    <gl-tab title="Tab 3">\n      Tab panel 3\n    </gl-tab>\n    <gl-tab title="Tab 4">\n      Tab panel 4\n    </gl-tab>\n    <gl-tab title="Tab 5">\n      Tab panel 5\n    </gl-tab>\n    <gl-tab title="Tab 6">\n      Tab panel 6\n    </gl-tab>\n    <gl-tab title="Tab 7">\n      Tab panel 7\n    </gl-tab>\n    <gl-tab title="Tab 8">\n      Tab panel 8\n    </gl-tab>\n    <gl-tab title="Tab 9">\n      Tab panel 9\n    </gl-tab>\n    <gl-tab title="Tab 10">\n      Tab panel 10\n    </gl-tab>\n    <gl-tab title="Tab 11">\n      Tab panel 11\n    </gl-tab>\n    <gl-tab title="Tab 12">\n      Tab panel 12\n    </gl-tab>\n    <gl-tab title="Tab 13" query-param-value="thirteenth">\n      Tab panel 13\n    </gl-tab>\n    <gl-tab title="Tab 14">\n      Tab panel 14\n    </gl-tab>')}};Default.args=generateProps();var ContentlessTab=(_args,_ref2)=>{var{argTypes}=_ref2;return{props:Object.keys(argTypes),components,template:wrap('\n    <gl-tab title="Regular tab">\n      <p>Regular tab content.</p>\n      <p>The contentless tab is not selectable, as it has no content. This is useful for displaying things that aren\'t really tabs after the list of tabs.</p>\n    </gl-tab>\n    <gl-tab title="Another tab">\n      <p>Another tab\'s content.</p>\n    </gl-tab>\n    <template #tabs-end>\n      <li class="gl-tab-nav-item">\n        Contentless tab\n      </li>\n    </template>')}},EmptyState=(_args,_ref3)=>{var{argTypes}=_ref3;return{props:Object.keys(argTypes),components,template:wrap("\n    <template #empty>\n      This content is only displayed when there are no tabs. Useful for dynamically added/removed tabs.\n    </template>")}},JustifiedTabs=(_args,_ref4)=>{var{argTypes}=_ref4;return{props:Object.keys(argTypes),components,template:wrap('\n    <gl-tab title="Tab 1">\n      <p>Tab panel 1</p>\n    </gl-tab>\n    <gl-tab title="Tab 2">\n      <p>Tab panel 2</p>\n    </gl-tab>')}};JustifiedTabs.args=generateProps({justified:!0});var WithCounterBadges=(_args,_ref5)=>{var{argTypes}=_ref5;return{props:Object.keys(argTypes),components:_objectSpread(_objectSpread({},components),{},{GlBadge:badge.default}),template:wrap('\n    <gl-tab\n      v-for="variant in $options.badgeVariantOptions"\n      :key="variant"\n    >\n      <template #title>\n        <span>Tab</span>\n        <gl-badge size="sm" class="gl-tab-counter-badge" :variant="variant">500</gl-badge>\n        <span class="sr-only">items</span>\n      </template>\n      Tab panel {{ variant }}\n    </gl-tab>'),badgeVariantOptions:constants.mN}},WithScroll=(_args,_ref6)=>{var{argTypes}=_ref6;return{props:Object.keys(argTypes),components:{ScrollableTabsGenerator},template:'<scrollable-tabs-generator :count="50" />'}},WithScrollAndGrowing=(_args,_ref7)=>{var{argTypes}=_ref7;return{props:Object.keys(argTypes),components:{ScrollableTabsGenerator},data:()=>({count:2,intervalId:0}),mounted(){this.intervalId=setInterval(()=>{this.count+=1},2e3)},template:'<scrollable-tabs-generator :count="count" />'}};WithScrollAndGrowing.tags=["skip-visual-test"];let tabs_stories={title:"base/tabs",component:tabs.default,subcomponents:{GlTab:tab.default,GlScrollableTabs:scrollable_tabs.default},parameters:{bootstrapComponent:"b-tabs",docs:{description:{component:'Tabs are used to divide content into meaningful, related sections. Tabs allow users to focus on one\nspecific view at a time while maintaining sight of all the relevant content options available. Each\ntab, when active, will reveal itâ€™s own unique content.\n\n## Using the component Vue\n\n~~~html\n<gl-tabs>\n  <gl-tab title="Tab 1">\n    Tab panel 1\n  </gl-tab>\n  <gl-tab title="Tab 2">\n    Tab panel 2\n  </gl-tab>\n</gl-tabs>\n~~~\n\n## Using the component HTML\n\n~~~html\n<div class="tabs gl-tabs">\n  <ul role="tablist" class="nav gl-tabs-nav">\n    <li role="presentation" class="nav-item">\n      <a\n        role="tab"\n        target="_self"\n        href="#"\n        class="nav-link gl-tab-nav-item gl-tab-nav-item-active gl-tab-nav-item-active-indigo"\n      >Tab 1</a>\n    </li>\n    <li role="presentation" class="nav-item">\n      <a role="tab" target="_self" href="#" class="nav-link gl-tab-nav-item">Tab 2</a>\n    </li>\n  </ul>\n  <div class="tab-content gl-tab-content">\n    <div role="tabpanel" class="tab-pane gl-tab-content active">Tab panel 1</div>\n    <div role="tabpanel" class="tab-pane gl-tab-content">Tab panel 2</div>\n  </div>\n</div>\n~~~\n\n## Adding Action Buttons to the Tabs\n\nTabs start and end slot can be populated via props: `action-primary`, `action-secondary` and\n`action-tertiary`. These props allow you to handle how a primary, secondary and tertiary button will\nbehave and look. The props receive an object as such:\n\n~~~js\n{\n  text: \'Save Changes\',\n  attributes: {\n    variant: \'info\',\n    disabled: this.someState,\n    class: \'some-class\',\n    ...\n  }\n}\n~~~\n\n## Scrollable tab buttons\n\nBy default, `GlTab` will wrap tab buttons when they overflow the container. To\nenable horizontally scrolling for the tab buttons, use the `GlScrollableTabs`\ncomponent. This is a separate Vue component because of some limitations:\n\n- The action props (e.g., `action-primary`) are not respected in `GlScrollableTabs`. At the\n  moment, BootstrapVue does not provide a reliable way for us to achieve this desired combination.\n\n`GlScrollableTabs` composes `GlTabs` and passes through every listener, slot, or prop (with the above\nexceptions).\n\n~~~html\n<gl-scrollable-tabs>\n  <gl-tab v-for="tab in tabs" :key="tab.key" :title="tab.title"> {{ tab.content }} </gl-tab>\n</gl-scrollable-tabs>\n~~~\n'}}},argTypes:{contentClass:{control:{disable:!0}},navClass:{control:{disable:!0}},syncActiveTabWithQueryParams:{control:{disable:!0}},queryParamName:{control:{disable:!0}},value:{control:{disable:!0}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-tab title="Tab 1">\n      Tab panel 1\n    </gl-tab>\n    <gl-tab title="Tab 2">\n      Tab panel 2\n    </gl-tab>\n    <gl-tab title="Tab 3">\n      Tab panel 3\n    </gl-tab>\n    <gl-tab title="Tab 4">\n      Tab panel 4\n    </gl-tab>\n    <gl-tab title="Tab 5">\n      Tab panel 5\n    </gl-tab>\n    <gl-tab title="Tab 6">\n      Tab panel 6\n    </gl-tab>\n    <gl-tab title="Tab 7">\n      Tab panel 7\n    </gl-tab>\n    <gl-tab title="Tab 8">\n      Tab panel 8\n    </gl-tab>\n    <gl-tab title="Tab 9">\n      Tab panel 9\n    </gl-tab>\n    <gl-tab title="Tab 10">\n      Tab panel 10\n    </gl-tab>\n    <gl-tab title="Tab 11">\n      Tab panel 11\n    </gl-tab>\n    <gl-tab title="Tab 12">\n      Tab panel 12\n    </gl-tab>\n    <gl-tab title="Tab 13" query-param-value="thirteenth">\n      Tab panel 13\n    </gl-tab>\n    <gl-tab title="Tab 14">\n      Tab panel 14\n    </gl-tab>`)\n})',...Default.parameters?.docs?.source}}},ContentlessTab.parameters={...ContentlessTab.parameters,docs:{...ContentlessTab.parameters?.docs,source:{originalSource:'(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-tab title="Regular tab">\n      <p>Regular tab content.</p>\n      <p>The contentless tab is not selectable, as it has no content. This is useful for displaying things that aren\'t really tabs after the list of tabs.</p>\n    </gl-tab>\n    <gl-tab title="Another tab">\n      <p>Another tab\'s content.</p>\n    </gl-tab>\n    <template #tabs-end>\n      <li class="gl-tab-nav-item">\n        Contentless tab\n      </li>\n    </template>`)\n})',...ContentlessTab.parameters?.docs?.source}}},EmptyState.parameters={...EmptyState.parameters,docs:{...EmptyState.parameters?.docs,source:{originalSource:"(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <template #empty>\n      This content is only displayed when there are no tabs. Useful for dynamically added/removed tabs.\n    </template>`)\n})",...EmptyState.parameters?.docs?.source}}},JustifiedTabs.parameters={...JustifiedTabs.parameters,docs:{...JustifiedTabs.parameters?.docs,source:{originalSource:'(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components,\n  template: wrap(`\n    <gl-tab title="Tab 1">\n      <p>Tab panel 1</p>\n    </gl-tab>\n    <gl-tab title="Tab 2">\n      <p>Tab panel 2</p>\n    </gl-tab>`)\n})',...JustifiedTabs.parameters?.docs?.source}}},WithCounterBadges.parameters={...WithCounterBadges.parameters,docs:{...WithCounterBadges.parameters?.docs,source:{originalSource:'(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ...components,\n    GlBadge\n  },\n  template: wrap(`\n    <gl-tab\n      v-for="variant in $options.badgeVariantOptions"\n      :key="variant"\n    >\n      <template #title>\n        <span>Tab</span>\n        <gl-badge size="sm" class="gl-tab-counter-badge" :variant="variant">500</gl-badge>\n        <span class="sr-only">items</span>\n      </template>\n      Tab panel {{ variant }}\n    </gl-tab>`),\n  badgeVariantOptions\n})',...WithCounterBadges.parameters?.docs?.source}}},WithScroll.parameters={...WithScroll.parameters,docs:{...WithScroll.parameters?.docs,source:{originalSource:"(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ScrollableTabsGenerator\n  },\n  template: '<scrollable-tabs-generator :count=\"50\" />'\n})",...WithScroll.parameters?.docs?.source}}},WithScrollAndGrowing.parameters={...WithScrollAndGrowing.parameters,docs:{...WithScrollAndGrowing.parameters?.docs,source:{originalSource:"(_args, {\n  argTypes\n}) => ({\n  props: Object.keys(argTypes),\n  components: {\n    ScrollableTabsGenerator\n  },\n  data() {\n    return {\n      count: 2,\n      intervalId: 0\n    };\n  },\n  mounted() {\n    this.intervalId = setInterval(() => {\n      this.count += 1;\n    }, 2000);\n  },\n  template: '<scrollable-tabs-generator :count=\"count\" />'\n})",...WithScrollAndGrowing.parameters?.docs?.source}}}}}]);